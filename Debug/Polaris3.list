
Polaris3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e624  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ee0  0800e808  0800e808  0001e808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106e8  080106e8  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080106e8  080106e8  000206e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106f0  080106f0  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106f0  080106f0  000206f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106f4  080106f4  000206f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080106f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a234  2000007c  08010774  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a2b0  08010774  0003a2b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bf8  00000000  00000000  000300a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000493d  00000000  00000000  00049c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0004e5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0004f908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7a3  00000000  00000000  00050b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e7d  00000000  00000000  0007b2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca8e0  00000000  00000000  0009e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168a18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a4  00000000  00000000  00168a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e7f0 	.word	0x0800e7f0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000080 	.word	0x20000080
 8000220:	0800e7f0 	.word	0x0800e7f0

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000234:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fdd5 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f85b 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f917 	bl	800076c <MX_GPIO_Init>
  MX_I2C1_Init();
 800053e:	f000 f8b1 	bl	80006a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000542:	f000 f8dd 	bl	8000700 <MX_SPI1_Init>
  MX_LWIP_Init();
 8000546:	f003 fb7d 	bl	8003c44 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init();
 800054a:	f000 faff 	bl	8000b4c <udpServer_init>
  LED_data_size = 0;
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <main+0xac>)
 8000550:	2200      	movs	r2, #0
 8000552:	801a      	strh	r2, [r3, #0]
  LED_data = 0;
 8000554:	4b21      	ldr	r3, [pc, #132]	; (80005dc <main+0xb0>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000560:	481f      	ldr	r0, [pc, #124]	; (80005e0 <main+0xb4>)
 8000562:	f002 fa27 	bl	80029b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056c:	481c      	ldr	r0, [pc, #112]	; (80005e0 <main+0xb4>)
 800056e:	f002 fa21 	bl	80029b4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000578:	4819      	ldr	r0, [pc, #100]	; (80005e0 <main+0xb4>)
 800057a:	f002 fa1b 	bl	80029b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000584:	4816      	ldr	r0, [pc, #88]	; (80005e0 <main+0xb4>)
 8000586:	f002 fa15 	bl	80029b4 <HAL_GPIO_WritePin>

	ethernetif_input(&gnetif);
 800058a:	4816      	ldr	r0, [pc, #88]	; (80005e4 <main+0xb8>)
 800058c:	f003 ff3c 	bl	8004408 <ethernetif_input>
	sys_check_timeouts();
 8000590:	f00a f8a4 	bl	800a6dc <sys_check_timeouts>

	if(new_data)
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <main+0xbc>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00f      	beq.n	80005bc <main+0x90>
	{
		HAL_Delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fe01 	bl	80011a4 <HAL_Delay>
		HAL_StatusTypeDef errorcode = HAL_SPI_Transmit(&hspi1, LED_data, LED_data_size, 100);
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <main+0xb0>)
 80005a4:	6819      	ldr	r1, [r3, #0]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <main+0xac>)
 80005a8:	881a      	ldrh	r2, [r3, #0]
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0xc0>)
 80005ae:	f003 f967 	bl	8003880 <HAL_SPI_Transmit>
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
		new_data = 0;
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <main+0xbc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
	}


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <main+0xb4>)
 80005c4:	f002 f9f6 	bl	80029b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <main+0xb4>)
 80005d0:	f002 f9f0 	bl	80029b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80005d4:	e7cd      	b.n	8000572 <main+0x46>
 80005d6:	bf00      	nop
 80005d8:	20000148 	.word	0x20000148
 80005dc:	20000144 	.word	0x20000144
 80005e0:	40011000 	.word	0x40011000
 80005e4:	20000154 	.word	0x20000154
 80005e8:	2000014a 	.word	0x2000014a
 80005ec:	200000ec 	.word	0x200000ec

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2238      	movs	r2, #56	; 0x38
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f00c ff8c 	bl	800d51c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 800061c:	2303      	movs	r3, #3
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000634:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL10;
 800063e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 8000644:	2310      	movs	r3, #16
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fb0d 	bl	8002c6c <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000658:	f000 f8ee 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fe0f 	bl	8003298 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 f8da 	bl	8000838 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000684:	2200      	movs	r2, #0
 8000686:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800068a:	2000      	movs	r0, #0
 800068c:	f002 feee 	bl	800346c <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <SystemClock_Config+0xb0>)
 8000692:	2201      	movs	r2, #1
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	42420070 	.word	0x42420070

080006a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_I2C1_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b0:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_I2C1_Init+0x58>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006e2:	f002 f97f 	bl	80029e4 <HAL_I2C_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f8a4 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000098 	.word	0x20000098
 80006f8:	40005400 	.word	0x40005400
 80006fc:	000186a0 	.word	0x000186a0

08000700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_SPI1_Init+0x64>)
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <MX_SPI1_Init+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_SPI1_Init+0x64>)
 800070c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_SPI1_Init+0x64>)
 8000720:	2202      	movs	r2, #2
 8000722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_SPI1_Init+0x64>)
 8000726:	2201      	movs	r2, #1
 8000728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_SPI1_Init+0x64>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_SPI1_Init+0x64>)
 8000734:	2220      	movs	r2, #32
 8000736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_SPI1_Init+0x64>)
 800074c:	220a      	movs	r2, #10
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_SPI1_Init+0x64>)
 8000752:	f003 f811 	bl	8003778 <HAL_SPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f86c 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000ec 	.word	0x200000ec
 8000768:	40013000 	.word	0x40013000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000780:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_GPIO_Init+0xc0>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a29      	ldr	r2, [pc, #164]	; (800082c <MX_GPIO_Init+0xc0>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <MX_GPIO_Init+0xc0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0310 	and.w	r3, r3, #16
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_GPIO_Init+0xc0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a23      	ldr	r2, [pc, #140]	; (800082c <MX_GPIO_Init+0xc0>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_GPIO_Init+0xc0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_GPIO_Init+0xc0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a1d      	ldr	r2, [pc, #116]	; (800082c <MX_GPIO_Init+0xc0>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_GPIO_Init+0xc0>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_GPIO_Init+0xc0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a17      	ldr	r2, [pc, #92]	; (800082c <MX_GPIO_Init+0xc0>)
 80007ce:	f043 0320 	orr.w	r3, r3, #32
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_GPIO_Init+0xc0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007e8:	f002 f8e4 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80007ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	480a      	ldr	r0, [pc, #40]	; (8000830 <MX_GPIO_Init+0xc4>)
 8000806:	f001 ff51 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800080a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2302      	movs	r3, #2
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_GPIO_Init+0xc8>)
 8000820:	f001 ff44 	bl	80026ac <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	40011000 	.word	0x40011000
 8000834:	40010800 	.word	0x40010800

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_MspInit+0x40>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <HAL_MspInit+0x40>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_MspInit+0x40>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_MspInit+0x40>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <HAL_MspInit+0x40>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_MspInit+0x40>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <HAL_I2C_MspInit+0x70>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d123      	bne.n	80008f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_I2C_MspInit+0x74>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <HAL_I2C_MspInit+0x74>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_I2C_MspInit+0x74>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0308 	and.w	r3, r3, #8
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008c0:	23c0      	movs	r3, #192	; 0xc0
 80008c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c4:	2312      	movs	r3, #18
 80008c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	480b      	ldr	r0, [pc, #44]	; (8000900 <HAL_I2C_MspInit+0x78>)
 80008d4:	f001 feea 	bl	80026ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_I2C_MspInit+0x74>)
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_I2C_MspInit+0x74>)
 80008de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e2:	61d3      	str	r3, [r2, #28]
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_I2C_MspInit+0x74>)
 80008e6:	69db      	ldr	r3, [r3, #28]
 80008e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40005400 	.word	0x40005400
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010c00 	.word	0x40010c00

08000904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a1b      	ldr	r2, [pc, #108]	; (800098c <HAL_SPI_MspInit+0x88>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d12f      	bne.n	8000984 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a19      	ldr	r2, [pc, #100]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 800092a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <HAL_SPI_MspInit+0x90>)
 8000968:	f001 fea0 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <HAL_SPI_MspInit+0x90>)
 8000980:	f001 fe94 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40013000 	.word	0x40013000
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 fbc5 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <ETH_IRQHandler+0x10>)
 80009ee:	f001 f8b4 	bl	8001b5a <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200049d0 	.word	0x200049d0

080009fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e00a      	b.n	8000a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0e:	f3af 8000 	nop.w
 8000a12:	4601      	mov	r1, r0
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	60ba      	str	r2, [r7, #8]
 8000a1a:	b2ca      	uxtb	r2, r1
 8000a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf0      	blt.n	8000a0e <_read+0x12>
  }

  return len;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e009      	b.n	8000a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf1      	blt.n	8000a48 <_write+0x12>
  }
  return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_close>:

int _close(int file)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a94:	605a      	str	r2, [r3, #4]
  return 0;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <_isatty>:

int _isatty(int file)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b085      	sub	sp, #20
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
	...

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d205      	bcs.n	8000b0c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <_sbrk+0x6c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b0a:	e009      	b.n	8000b20 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <_sbrk+0x64>)
 8000b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	371c      	adds	r7, #28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20010000 	.word	0x20010000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	2000014c 	.word	0x2000014c
 8000b38:	2000a2b0 	.word	0x2000a2b0
 8000b3c:	2000a2a8 	.word	0x2000a2a8

08000b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8000b52:	f00a f9ad 	bl	800aeb0 <udp_new>
 8000b56:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, node_ip_address[0], node_ip_address[1], node_ip_address[2], node_ip_address[3]);
 8000b58:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <udpServer_init+0xc8>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	061a      	lsls	r2, r3, #24
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <udpServer_init+0xc8>)
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	041b      	lsls	r3, r3, #16
 8000b64:	431a      	orrs	r2, r3
 8000b66:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <udpServer_init+0xc8>)
 8000b68:	789b      	ldrb	r3, [r3, #2]
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <udpServer_init+0xc8>)
 8000b70:	78d2      	ldrb	r2, [r2, #3]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	061a      	lsls	r2, r3, #24
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <udpServer_init+0xc8>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	0619      	lsls	r1, r3, #24
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <udpServer_init+0xc8>)
 8000b7e:	785b      	ldrb	r3, [r3, #1]
 8000b80:	041b      	lsls	r3, r3, #16
 8000b82:	4319      	orrs	r1, r3
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <udpServer_init+0xc8>)
 8000b86:	789b      	ldrb	r3, [r3, #2]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	4921      	ldr	r1, [pc, #132]	; (8000c14 <udpServer_init+0xc8>)
 8000b8e:	78c9      	ldrb	r1, [r1, #3]
 8000b90:	430b      	orrs	r3, r1
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <udpServer_init+0xc8>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	0619      	lsls	r1, r3, #24
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <udpServer_init+0xc8>)
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	041b      	lsls	r3, r3, #16
 8000ba6:	4319      	orrs	r1, r3
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <udpServer_init+0xc8>)
 8000baa:	789b      	ldrb	r3, [r3, #2]
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	4918      	ldr	r1, [pc, #96]	; (8000c14 <udpServer_init+0xc8>)
 8000bb2:	78c9      	ldrb	r1, [r1, #3]
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <udpServer_init+0xc8>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	0619      	lsls	r1, r3, #24
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <udpServer_init+0xc8>)
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	041b      	lsls	r3, r3, #16
 8000bca:	4319      	orrs	r1, r3
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <udpServer_init+0xc8>)
 8000bce:	789b      	ldrb	r3, [r3, #2]
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	490f      	ldr	r1, [pc, #60]	; (8000c14 <udpServer_init+0xc8>)
 8000bd6:	78c9      	ldrb	r1, [r1, #3]
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	0e1b      	lsrs	r3, r3, #24
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 6454);  // 6454 is the default Art-Net port
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	f641 1236 	movw	r2, #6454	; 0x1936
 8000be6:	4619      	mov	r1, r3
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f00a f841 	bl	800ac70 <udp_bind>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000bf2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d105      	bne.n	8000c06 <udpServer_init+0xba>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4906      	ldr	r1, [pc, #24]	; (8000c18 <udpServer_init+0xcc>)
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f00a f912 	bl	800ae28 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8000c04:	e002      	b.n	8000c0c <udpServer_init+0xc0>
	   udp_remove(upcb);
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f00a f920 	bl	800ae4c <udp_remove>
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000004 	.word	0x20000004
 8000c18:	08000c1d 	.word	0x08000c1d

08000c1c <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b0e0      	sub	sp, #384	; 0x180
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	f507 74c0 	add.w	r4, r7, #384	; 0x180
 8000c26:	f5a4 74ba 	sub.w	r4, r4, #372	; 0x174
 8000c2a:	6020      	str	r0, [r4, #0]
 8000c2c:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8000c30:	f5a0 70bc 	sub.w	r0, r0, #376	; 0x178
 8000c34:	6001      	str	r1, [r0, #0]
 8000c36:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8000c3a:	f5a1 71be 	sub.w	r1, r1, #380	; 0x17c
 8000c3e:	600a      	str	r2, [r1, #0]
 8000c40:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000c44:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8000c48:	6013      	str	r3, [r2, #0]


	/* Get the IP of the Client */
	char *remoteIP = ipaddr_ntoa(addr);
 8000c4a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c4e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	f00b fcd2 	bl	800c5fc <ip4addr_ntoa>
 8000c58:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174

	uint8_t left_opcode = ((uint8_t*)p->payload)[8];
 8000c5c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c60:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	7a1b      	ldrb	r3, [r3, #8]
 8000c6a:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
	uint8_t right_opcode = ((uint8_t*)p->payload)[9];
 8000c6e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c72:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	7a5b      	ldrb	r3, [r3, #9]
 8000c7c:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
	uint16_t cur_opcode = (right_opcode << 8) | left_opcode;
 8000c80:	f897 3172 	ldrb.w	r3, [r7, #370]	; 0x172
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170

	if( cur_opcode == 0x2000 )
 8000c96:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 8000c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c9e:	f040 816c 	bne.w	8000f7a <udp_receive_callback+0x35e>
		// 0x2000 are ArtPoll packages we must reply within 3 seconds with an ArtPoll Reply
		// or else the node will be considered disconnected

		struct artnet_reply_s art_poll_reply;
		uint8_t id[8];
		sprintf((char *) id, "Art-Net\0");
 8000ca2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000ca6:	49d6      	ldr	r1, [pc, #856]	; (8001000 <udp_receive_callback+0x3e4>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f00c fd43 	bl	800d734 <siprintf>
		memcpy( art_poll_reply.id, id, sizeof(art_poll_reply.id) );
 8000cae:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000cbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cc0:	e882 0003 	stmia.w	r2, {r0, r1}
 8000cc4:	4bcf      	ldr	r3, [pc, #828]	; (8001004 <udp_receive_callback+0x3e8>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
		memcpy( art_poll_reply.ip, node_ip_address, sizeof(art_poll_reply.ip) );
 8000cc8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000cd0:	f8c3 200a 	str.w	r2, [r3, #10]
		art_poll_reply.opCode = ART_POLL_REPLY;
 8000cd4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000cdc:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8000ce0:	811a      	strh	r2, [r3, #8]
		art_poll_reply.port = ART_NET_PORT;
 8000ce2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000cea:	f641 1236 	movw	r2, #6454	; 0x1936
 8000cee:	81da      	strh	r2, [r3, #14]

		memset(art_poll_reply.goodinput, 0x08, 4);
 8000cf0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cf4:	33b2      	adds	r3, #178	; 0xb2
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00c fc0e 	bl	800d51c <memset>
		memset(art_poll_reply.goodoutput, 0x80, 4);
 8000d00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d04:	33b6      	adds	r3, #182	; 0xb6
 8000d06:	2204      	movs	r2, #4
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f00c fc06 	bl	800d51c <memset>
		memset(art_poll_reply.porttypes, 0xc0, 4);
 8000d10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d14:	33ae      	adds	r3, #174	; 0xae
 8000d16:	2204      	movs	r2, #4
 8000d18:	21c0      	movs	r1, #192	; 0xc0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00c fbfe 	bl	800d51c <memset>

		uint8_t shortname[18];
		uint8_t longname[64];

		sprintf((char *) shortname, "Artnet Polaris 2");
 8000d20:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000d24:	49b8      	ldr	r1, [pc, #736]	; (8001008 <udp_receive_callback+0x3ec>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f00c fd04 	bl	800d734 <siprintf>
		sprintf((char *) longname, "Ethernet -> WS2811 Bridge. PoE+ Enabled. Polaris 2");
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	49b6      	ldr	r1, [pc, #728]	; (800100c <udp_receive_callback+0x3f0>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f00c fcfe 	bl	800d734 <siprintf>
		memcpy( art_poll_reply.shortname, shortname, sizeof(shortname) );
 8000d38:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d40:	f103 051a 	add.w	r5, r3, #26
 8000d44:	f507 74a6 	add.w	r4, r7, #332	; 0x14c
 8000d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d4a:	6028      	str	r0, [r5, #0]
 8000d4c:	6069      	str	r1, [r5, #4]
 8000d4e:	60aa      	str	r2, [r5, #8]
 8000d50:	60eb      	str	r3, [r5, #12]
 8000d52:	8823      	ldrh	r3, [r4, #0]
 8000d54:	822b      	strh	r3, [r5, #16]
		memcpy( art_poll_reply.longname, longname, sizeof(longname) );
 8000d56:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d5e:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000d62:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8000d66:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000d6a:	4615      	mov	r5, r2
 8000d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		art_poll_reply.etsaman[0] = 0;
 8000d80:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d88:	2200      	movs	r2, #0
 8000d8a:	761a      	strb	r2, [r3, #24]
		art_poll_reply.etsaman[1] = 0;
 8000d8c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d94:	2200      	movs	r2, #0
 8000d96:	765a      	strb	r2, [r3, #25]
		art_poll_reply.verH       = 1;
 8000d98:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000da0:	2201      	movs	r2, #1
 8000da2:	741a      	strb	r2, [r3, #16]
		art_poll_reply.ver        = 0;
 8000da4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000dac:	2200      	movs	r2, #0
 8000dae:	745a      	strb	r2, [r3, #17]
		art_poll_reply.subH       = 0;
 8000db0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000db8:	2200      	movs	r2, #0
 8000dba:	749a      	strb	r2, [r3, #18]
		art_poll_reply.sub        = 0;
 8000dbc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	74da      	strb	r2, [r3, #19]
		art_poll_reply.oemH       = 0;
 8000dc8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	751a      	strb	r2, [r3, #20]
		art_poll_reply.oem        = 0x2828;
 8000dd4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000ddc:	2228      	movs	r2, #40	; 0x28
 8000dde:	755a      	strb	r2, [r3, #21]
		art_poll_reply.ubea       = 0;
 8000de0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000de8:	2200      	movs	r2, #0
 8000dea:	759a      	strb	r2, [r3, #22]
		art_poll_reply.status     = 0;
 8000dec:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000df4:	2200      	movs	r2, #0
 8000df6:	75da      	strb	r2, [r3, #23]
		art_poll_reply.swvideo    = 0;
 8000df8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		art_poll_reply.swmacro    = 0;
 8000e06:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
		art_poll_reply.swremote   = 0;
 8000e14:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		art_poll_reply.style      = 0;
 8000e22:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

		art_poll_reply.numbportsH = 0;
 8000e30:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		art_poll_reply.numbports  = 1;
 8000e3e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
		art_poll_reply.status2    = 0x08;
 8000e4c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e54:	2208      	movs	r2, #8
 8000e56:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4

		art_poll_reply.bindip[0] = node_ip_address[0];
 8000e5a:	4b6a      	ldr	r3, [pc, #424]	; (8001004 <udp_receive_callback+0x3e8>)
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e66:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
		art_poll_reply.bindip[1] = node_ip_address[1];
 8000e6a:	4b66      	ldr	r3, [pc, #408]	; (8001004 <udp_receive_callback+0x3e8>)
 8000e6c:	785a      	ldrb	r2, [r3, #1]
 8000e6e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e76:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		art_poll_reply.bindip[2] = node_ip_address[2];
 8000e7a:	4b62      	ldr	r3, [pc, #392]	; (8001004 <udp_receive_callback+0x3e8>)
 8000e7c:	789a      	ldrb	r2, [r3, #2]
 8000e7e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e86:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
		art_poll_reply.bindip[3] = node_ip_address[3];
 8000e8a:	4b5e      	ldr	r3, [pc, #376]	; (8001004 <udp_receive_callback+0x3e8>)
 8000e8c:	78da      	ldrb	r2, [r3, #3]
 8000e8e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e96:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2

        uint8_t swin[4]  = {0x01,0x02,0x03,0x04};
 8000e9a:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <udp_receive_callback+0x3f4>)
 8000e9c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        uint8_t swout[4] = {0x01,0x02,0x03,0x04};
 8000ea0:	4b5b      	ldr	r3, [pc, #364]	; (8001010 <udp_receive_callback+0x3f4>)
 8000ea2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        for(uint8_t i = 0; i < 4; i++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8000eac:	e026      	b.n	8000efc <udp_receive_callback+0x2e0>
        {
        	art_poll_reply.swout[i] = swout[i];
 8000eae:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8000eb2:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8000eb6:	f502 72c0 	add.w	r2, r2, #384	; 0x180
 8000eba:	443a      	add	r2, r7
 8000ebc:	f812 1c3c 	ldrb.w	r1, [r2, #-60]
 8000ec0:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000ec4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8000ec8:	4413      	add	r3, r2
 8000eca:	460a      	mov	r2, r1
 8000ecc:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
        	art_poll_reply.swin[i] = swin[i];
 8000ed0:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8000ed4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8000ed8:	f502 72c0 	add.w	r2, r2, #384	; 0x180
 8000edc:	443a      	add	r2, r7
 8000ede:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 8000ee2:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000ee6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8000eea:	4413      	add	r3, r2
 8000eec:	460a      	mov	r2, r1
 8000eee:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
        for(uint8_t i = 0; i < 4; i++)
 8000ef2:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8000efc:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d9d4      	bls.n	8000eae <udp_receive_callback+0x292>
        }
        sprintf((char *)art_poll_reply.nodereport, "%i DMX output universes active.", art_poll_reply.numbports);
 8000f04:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f0c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8000f10:	461a      	mov	r2, r3
 8000f12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f16:	336c      	adds	r3, #108	; 0x6c
 8000f18:	493e      	ldr	r1, [pc, #248]	; (8001014 <udp_receive_callback+0x3f8>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00c fc0a 	bl	800d734 <siprintf>

    	/* allocate pbuf from RAM*/
    	txBuf = pbuf_alloc(PBUF_TRANSPORT, sizeof(art_poll_reply), PBUF_RAM); //239 is the length of a
 8000f20:	2200      	movs	r2, #0
 8000f22:	21ef      	movs	r1, #239	; 0xef
 8000f24:	2000      	movs	r0, #0
 8000f26:	f004 f905 	bl	8005134 <pbuf_alloc>
 8000f2a:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c

    	/* copy the data into the buffer  */
    	pbuf_take(txBuf, &art_poll_reply, sizeof(art_poll_reply));
 8000f2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f32:	22ef      	movs	r2, #239	; 0xef
 8000f34:	4619      	mov	r1, r3
 8000f36:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8000f3a:	f004 feeb 	bl	8005d14 <pbuf_take>

    	/* Connect to the remote client */
    	ip_addr_t broadcast_addr = IPADDR4_INIT_BYTES(192,168,0,255);
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <udp_receive_callback+0x3fc>)
 8000f40:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    	udp_connect(upcb, &broadcast_addr, port);
 8000f44:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8000f48:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8000f4c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000f50:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	f009 fefb 	bl	800ad50 <udp_connect>

    	/* Send a Reply to the Client */
    	udp_send(upcb, txBuf);
 8000f5a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000f5e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8000f62:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	f009 fd68 	bl	800aa3c <udp_send>

		pbuf_free(txBuf);
 8000f6c:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8000f70:	f004 fc58 	bl	8005824 <pbuf_free>
		new_data = 0;
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <udp_receive_callback+0x400>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	}

	if( cur_opcode == 0x5000 ) // These are DMX data packets
 8000f7a:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 8000f7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000f82:	d170      	bne.n	8001066 <udp_receive_callback+0x44a>
	{
		uint8_t left_size = ((uint8_t*)p->payload)[16];
 8000f84:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000f88:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	7c1b      	ldrb	r3, [r3, #16]
 8000f92:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
		uint8_t right_size = ((uint8_t*)p->payload)[17];
 8000f96:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000f9a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	7c5b      	ldrb	r3, [r3, #17]
 8000fa4:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
		uint16_t cur_data_size = (left_size << 8) | right_size;
 8000fa8:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	f897 316a 	ldrb.w	r3, [r7, #362]	; 0x16a
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168

		if( cur_data_size != LED_data_size)
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <udp_receive_callback+0x404>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	f8b7 2168 	ldrh.w	r2, [r7, #360]	; 0x168
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d015      	beq.n	8000ff6 <udp_receive_callback+0x3da>
		{
			if( LED_data )
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <udp_receive_callback+0x408>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d004      	beq.n	8000fdc <udp_receive_callback+0x3c0>
			{
				free(LED_data);
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <udp_receive_callback+0x408>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f00c fa7a 	bl	800d4d0 <free>
			}
			LED_data = malloc( cur_data_size * sizeof(uint8_t) );
 8000fdc:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00c fa6d 	bl	800d4c0 <malloc>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <udp_receive_callback+0x408>)
 8000fec:	601a      	str	r2, [r3, #0]
			LED_data_size = cur_data_size;
 8000fee:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <udp_receive_callback+0x404>)
 8000ff0:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8000ff4:	8013      	strh	r3, [r2, #0]
		}

		for( unsigned int i = 0; i < cur_data_size; i++ )
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000ffc:	e02a      	b.n	8001054 <udp_receive_callback+0x438>
 8000ffe:	bf00      	nop
 8001000:	0800e808 	.word	0x0800e808
 8001004:	20000004 	.word	0x20000004
 8001008:	0800e814 	.word	0x0800e814
 800100c:	0800e828 	.word	0x0800e828
 8001010:	04030201 	.word	0x04030201
 8001014:	0800e85c 	.word	0x0800e85c
 8001018:	ff00a8c0 	.word	0xff00a8c0
 800101c:	2000014a 	.word	0x2000014a
 8001020:	20000148 	.word	0x20000148
 8001024:	20000144 	.word	0x20000144
		{
			LED_data[i] = ((uint8_t*)p->payload)[18+i];
 8001028:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800102c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001038:	3312      	adds	r3, #18
 800103a:	441a      	add	r2, r3
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <udp_receive_callback+0x470>)
 800103e:	6819      	ldr	r1, [r3, #0]
 8001040:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001044:	440b      	add	r3, r1
 8001046:	7812      	ldrb	r2, [r2, #0]
 8001048:	701a      	strb	r2, [r3, #0]
		for( unsigned int i = 0; i < cur_data_size; i++ )
 800104a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800104e:	3301      	adds	r3, #1
 8001050:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001054:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8001058:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800105c:	429a      	cmp	r2, r3
 800105e:	d3e3      	bcc.n	8001028 <udp_receive_callback+0x40c>
		}
		new_data = 1;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <udp_receive_callback+0x474>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]

	/* Send a Reply to the Client */
	//udp_send(upcb, txBuf);

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8001066:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800106a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	f009 fec4 	bl	800adfc <udp_disconnect>

	/* Free the p_tx buffer */
	//pbuf_free(txBuf);

	/* Free the p buffer */
	pbuf_free(p);
 8001074:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001078:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f004 fbd1 	bl	8005824 <pbuf_free>

}
 8001082:	bf00      	nop
 8001084:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8001088:	46bd      	mov	sp, r7
 800108a:	bdb0      	pop	{r4, r5, r7, pc}
 800108c:	20000144 	.word	0x20000144
 8001090:	2000014a 	.word	0x2000014a

08001094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	; (80010cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	; (80010d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ba:	f7ff fd41 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010be:	f00c f9db 	bl	800d478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c2:	f7ff fa33 	bl	800052c <main>
  bx lr
 80010c6:	4770      	bx	lr
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010d0:	080106f8 	.word	0x080106f8
  ldr r2, =_sbss
 80010d4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010d8:	2000a2b0 	.word	0x2000a2b0

080010dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_2_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x28>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x28>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f947 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fba2 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f95f 	bl	80013ee <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001148:	f000 f927 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	2000000c 	.word	0x2000000c
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x1c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_IncTick+0x20>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_IncTick+0x20>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000150 	.word	0x20000150

08001190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <HAL_GetTick+0x10>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000150 	.word	0x20000150

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff fff0 	bl	8001190 <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffe0 	bl	8001190 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000000c 	.word	0x2000000c

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4906      	ldr	r1, [pc, #24]	; (8001284 <__NVIC_EnableIRQ+0x34>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001364:	f7ff ff90 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff2d 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff42 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff90 	bl	80012dc <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5f 	bl	8001288 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff35 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001418:	4ba4      	ldr	r3, [pc, #656]	; (80016ac <HAL_ETH_Init+0x2a4>)
 800141a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e153      	b.n	80016d6 <HAL_ETH_Init+0x2ce>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f002 fd30 	bl	8003ea8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 8001448:	4b99      	ldr	r3, [pc, #612]	; (80016b0 <HAL_ETH_Init+0x2a8>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4a98      	ldr	r2, [pc, #608]	; (80016b0 <HAL_ETH_Init+0x2a8>)
 800144e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001452:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 8001454:	4b96      	ldr	r3, [pc, #600]	; (80016b0 <HAL_ETH_Init+0x2a8>)
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4994      	ldr	r1, [pc, #592]	; (80016b0 <HAL_ETH_Init+0x2a8>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001478:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800147a:	f7ff fe89 	bl	8001190 <HAL_GetTick>
 800147e:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001480:	e011      	b.n	80014a6 <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001482:	f7ff fe85 	bl	8001190 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001490:	d909      	bls.n	80014a6 <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2203      	movs	r2, #3
 8001496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e117      	b.n	80016d6 <HAL_ETH_Init+0x2ce>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e4      	bne.n	8001482 <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f023 031c 	bic.w	r3, r3, #28
 80014c6:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014c8:	f002 f91a 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 80014cc:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4a78      	ldr	r2, [pc, #480]	; (80016b4 <HAL_ETH_Init+0x2ac>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d908      	bls.n	80014e8 <HAL_ETH_Init+0xe0>
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4a77      	ldr	r2, [pc, #476]	; (80016b8 <HAL_ETH_Init+0x2b0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d804      	bhi.n	80014e8 <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	e00b      	b.n	8001500 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	4a73      	ldr	r2, [pc, #460]	; (80016b8 <HAL_ETH_Init+0x2b0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d907      	bls.n	8001500 <HAL_ETH_Init+0xf8>
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <HAL_ETH_Init+0x2a4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d203      	bcs.n	8001500 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f043 030c 	orr.w	r3, r3, #12
 80014fe:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001508:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800150c:	2100      	movs	r1, #0
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fc0a 	bl	8001d28 <HAL_ETH_WritePHYRegister>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800151e:	6939      	ldr	r1, [r7, #16]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fdbf 	bl	80020a4 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0d1      	b.n	80016d6 <HAL_ETH_Init+0x2ce>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001532:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001536:	f7ff fe35 	bl	80011a4 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8096 	beq.w	8001670 <HAL_ETH_Init+0x268>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001544:	f7ff fe24 	bl	8001190 <HAL_GetTick>
 8001548:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	461a      	mov	r2, r3
 8001550:	2101      	movs	r1, #1
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fb80 	bl	8001c58 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001558:	f7ff fe1a 	bl	8001190 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	; 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d90f      	bls.n	800158a <HAL_ETH_Init+0x182>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800156e:	6939      	ldr	r1, [r7, #16]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fd97 	bl	80020a4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e0a5      	b.n	80016d6 <HAL_ETH_Init+0x2ce>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0da      	beq.n	800154a <HAL_ETH_Init+0x142>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001594:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001598:	2100      	movs	r1, #0
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fbc4 	bl	8001d28 <HAL_ETH_WritePHYRegister>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_ETH_Init+0x1b6>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015aa:	6939      	ldr	r1, [r7, #16]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fd79 	bl	80020a4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e08b      	b.n	80016d6 <HAL_ETH_Init+0x2ce>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80015be:	f7ff fde7 	bl	8001190 <HAL_GetTick>
 80015c2:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	461a      	mov	r2, r3
 80015ca:	2101      	movs	r1, #1
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fb43 	bl	8001c58 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015d2:	f7ff fddd 	bl	8001190 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d90f      	bls.n	8001604 <HAL_ETH_Init+0x1fc>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015e8:	6939      	ldr	r1, [r7, #16]
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fd5a 	bl	80020a4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e068      	b.n	80016d6 <HAL_ETH_Init+0x2ce>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0da      	beq.n	80015c4 <HAL_ETH_Init+0x1bc>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	461a      	mov	r2, r3
 8001614:	2110      	movs	r1, #16
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fb1e 	bl	8001c58 <HAL_ETH_ReadPHYRegister>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <HAL_ETH_Init+0x232>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001626:	6939      	ldr	r1, [r7, #16]
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fd3b 	bl	80020a4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e04d      	b.n	80016d6 <HAL_ETH_Init+0x2ce>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d004      	beq.n	800164e <HAL_ETH_Init+0x246>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	e002      	b.n	8001654 <HAL_ETH_Init+0x24c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_ETH_Init+0x25e>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	e02e      	b.n	80016c4 <HAL_ETH_Init+0x2bc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	e029      	b.n	80016c4 <HAL_ETH_Init+0x2bc>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001680:	4313      	orrs	r3, r2
 8001682:	b29b      	uxth	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 fb4d 	bl	8001d28 <HAL_ETH_WritePHYRegister>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_ETH_Init+0x2b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001698:	6939      	ldr	r1, [r7, #16]
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fd02 	bl	80020a4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e014      	b.n	80016d6 <HAL_ETH_Init+0x2ce>
 80016ac:	03938700 	.word	0x03938700
 80016b0:	40010000 	.word	0x40010000
 80016b4:	01312cff 	.word	0x01312cff
 80016b8:	02160ebf 	.word	0x02160ebf
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016c0:	f7ff fd70 	bl	80011a4 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016c4:	6939      	ldr	r1, [r7, #16]
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fcec 	bl	80020a4 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3720      	adds	r7, #32
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop

080016e0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_ETH_DMATxDescListInit+0x20>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e051      	b.n	80017a4 <HAL_ETH_DMATxDescListInit+0xc4>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e030      	b.n	800177e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	4413      	add	r3, r2
 8001724:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800172c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	461a      	mov	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	3b01      	subs	r3, #1
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	d208      	bcs.n	8001772 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4413      	add	r3, r2
 800176a:	461a      	mov	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	e002      	b.n	8001778 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3301      	adds	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d3ca      	bcc.n	800171c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001790:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b087      	sub	sp, #28
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_ETH_DMARxDescListInit+0x20>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e055      	b.n	800187a <HAL_ETH_DMARxDescListInit+0xcc>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2202      	movs	r2, #2
 80017da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e034      	b.n	8001854 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4413      	add	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017fa:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001802:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	461a      	mov	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	429a      	cmp	r2, r3
 8001834:	d208      	bcs.n	8001848 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	461a      	mov	r2, r3
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	e002      	b.n	800184e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d3c6      	bcc.n	80017ea <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001866:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_ETH_TransmitFrame+0x24>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e0cc      	b.n	8001a42 <HAL_ETH_TransmitFrame+0x1be>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0b7      	b.n	8001a42 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da09      	bge.n	80018f0 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2212      	movs	r2, #18
 80018e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0a8      	b.n	8001a42 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d915      	bls.n	8001926 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	4a53      	ldr	r2, [pc, #332]	; (8001a4c <HAL_ETH_TransmitFrame+0x1c8>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0a9b      	lsrs	r3, r3, #10
 8001904:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <HAL_ETH_TransmitFrame+0x1c8>)
 800190a:	fba3 1302 	umull	r1, r3, r3, r2
 800190e:	0a9b      	lsrs	r3, r3, #10
 8001910:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e001      	b.n	800192a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8001926:	2301      	movs	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d11c      	bne.n	800196a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800193e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800194a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800195a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
 8001968:	e04b      	b.n	8001a02 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e044      	b.n	80019fa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800197e:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d107      	bne.n	8001996 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001994:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800199e:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d116      	bne.n	80019d8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019b8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <HAL_ETH_TransmitFrame+0x1cc>)
 80019be:	fb03 f202 	mul.w	r2, r3, r2
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019ca:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019d6:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019e6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	3301      	adds	r3, #1
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3b6      	bcc.n	8001970 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00d      	beq.n	8001a30 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2304      	movs	r3, #4
 8001a20:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	ac02b00b 	.word	0xac02b00b
 8001a50:	fffffa0c 	.word	0xfffffa0c

08001a54 <HAL_ETH_GetReceivedFrame>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_ETH_GetReceivedFrame+0x1a>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e070      	b.n	8001b50 <HAL_ETH_GetReceivedFrame+0xfc>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db5a      	blt.n	8001b3e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d030      	beq.n	8001af8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d103      	bne.n	8001ab0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0c1b      	lsrs	r3, r3, #16
 8001ac0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ac4:	3b04      	subs	r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e02b      	b.n	8001b50 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d010      	beq.n	8001b28 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
 8001b26:	e00a      	b.n	8001b3e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	d112      	bne.n	8001b9a <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f85d 	bl	8001c34 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	461a      	mov	r2, r3
 8001b84:	2340      	movs	r3, #64	; 0x40
 8001b86:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b98:	e01a      	b.n	8001bd0 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d111      	bne.n	8001bd0 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f838 	bl	8001c22 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bde:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bf2:	d112      	bne.n	8001c1a <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f826 	bl	8001c46 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c02:	461a      	mov	r2, r3
 8001c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c08:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	460b      	mov	r3, r1
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b82      	cmp	r3, #130	; 0x82
 8001c78:	d101      	bne.n	8001c7e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e050      	b.n	8001d20 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2282      	movs	r2, #130	; 0x82
 8001c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 031c 	and.w	r3, r3, #28
 8001c94:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8a1b      	ldrh	r3, [r3, #16]
 8001c9a:	02db      	lsls	r3, r3, #11
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001ca4:	897b      	ldrh	r3, [r7, #10]
 8001ca6:	019b      	lsls	r3, r3, #6
 8001ca8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f023 0302 	bic.w	r3, r3, #2
 8001cb8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cca:	f7ff fa61 	bl	8001190 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd0:	e015      	b.n	8001cfe <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001cd2:	f7ff fa5d 	bl	8001190 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ce0:	d309      	bcc.n	8001cf6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e014      	b.n	8001d20 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e4      	bne.n	8001cd2 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	460b      	mov	r3, r1
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b42      	cmp	r3, #66	; 0x42
 8001d48:	d101      	bne.n	8001d4e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e04e      	b.n	8001dec <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2242      	movs	r2, #66	; 0x42
 8001d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f003 031c 	and.w	r3, r3, #28
 8001d64:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8a1b      	ldrh	r3, [r3, #16]
 8001d6a:	02db      	lsls	r3, r3, #11
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d74:	897b      	ldrh	r3, [r7, #10]
 8001d76:	019b      	lsls	r3, r3, #6
 8001d78:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da4:	f7ff f9f4 	bl	8001190 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001daa:	e015      	b.n	8001dd8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001dac:	f7ff f9f0 	bl	8001190 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dba:	d309      	bcc.n	8001dd0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e00d      	b.n	8001dec <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e4      	bne.n	8001dac <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_ETH_Start+0x16>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e01f      	b.n	8001e4a <HAL_ETH_Start+0x56>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fb3a 	bl	8002494 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fb71 	bl	8002508 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fbfc 	bl	8002624 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fba5 	bl	800257c <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fbcc 	bl	80025d0 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_ETH_Stop+0x16>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e01f      	b.n	8001ea8 <HAL_ETH_Stop+0x56>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fb94 	bl	80025a6 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fbbb 	bl	80025fa <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fb5c 	bl	8002542 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fbca 	bl	8002624 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fb1c 	bl	80024ce <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_ETH_ConfigMAC+0x1c>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e0e4      	b.n	8002096 <HAL_ETH_ConfigMAC+0x1e6>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80b1 	beq.w	8002046 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4b6c      	ldr	r3, [pc, #432]	; (80020a0 <HAL_ETH_ConfigMAC+0x1f0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001efc:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001f02:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001f08:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001f0e:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001f14:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001f1a:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001f20:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001f26:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001f2c:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001f32:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8001f38:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8001f3e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f7ff f924 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001f6c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001f72:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001f78:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8001f7e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f84:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f8a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f96:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001f98:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7ff f8fe 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fb8:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fc2:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fe0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001fe6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001fec:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8001ff2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001ff8:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002010:	2001      	movs	r0, #1
 8002012:	f7ff f8c7 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002036:	2001      	movs	r0, #1
 8002038:	f7ff f8b4 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	61da      	str	r2, [r3, #28]
 8002044:	e01e      	b.n	8002084 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002054:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002076:	2001      	movs	r0, #1
 8002078:	f7ff f894 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	ff20810f 	.word	0xff20810f

080020a4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b0b0      	sub	sp, #192	; 0xc0
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020c0:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020c8:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020d2:	2300      	movs	r3, #0
 80020d4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ee:	663b      	str	r3, [r7, #96]	; 0x60
 80020f0:	e001      	b.n	80020f6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002100:	2300      	movs	r3, #0
 8002102:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002110:	2340      	movs	r3, #64	; 0x40
 8002112:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002178:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800217c:	4ba8      	ldr	r3, [pc, #672]	; (8002420 <ETH_MACDMAConfig+0x37c>)
 800217e:	4013      	ands	r3, r2
 8002180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002184:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8002186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002188:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 800218a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 800218c:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 800218e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8002190:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8002196:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8002198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 800219a:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 800219c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 800219e:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80021a4:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80021a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 80021a8:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80021aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 80021ac:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80021ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 80021b0:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80021b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 80021b4:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80021b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80021b8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80021ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d8:	2001      	movs	r0, #1
 80021da:	f7fe ffe3 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80021e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80021ec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021f0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 80021f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021f6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 80021fc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002202:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002208:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800220c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002214:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002216:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002222:	2001      	movs	r0, #1
 8002224:	f7fe ffbe 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002230:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800223a:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002244:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002250:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002254:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002258:	4013      	ands	r3, r2
 800225a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800225e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002262:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002264:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002268:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800226a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800226e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002274:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 800227a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 800227c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002280:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002282:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002294:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7fe ff7f 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ae:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80022b0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80022b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7fe ff6a 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d8:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e2:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80022e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022ec:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022fe:	2304      	movs	r3, #4
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800230e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002312:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002318:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 800231a:	2300      	movs	r3, #0
 800231c:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800231e:	2300      	movs	r3, #0
 8002320:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002330:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <ETH_MACDMAConfig+0x380>)
 8002336:	4013      	ands	r3, r2
 8002338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800233c:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 800233e:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002340:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002342:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 8002344:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002346:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 8002348:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 800234a:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 800234c:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800234e:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 8002350:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardErrorFrames |
 8002354:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 8002358:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 800235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                        dmainit.ReceiveThresholdControl |
 800235c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800235e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002370:	461a      	mov	r2, r3
 8002372:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002376:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002386:	2001      	movs	r0, #1
 8002388:	f7fe ff0c 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002394:	461a      	mov	r2, r3
 8002396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800239a:	6193      	str	r3, [r2, #24]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800239c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                                        dmainit.FixedBurst |
 800239e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80023a0:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.FixedBurst |
 80023a4:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80023a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023a8:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80023aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ac:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 80023ae:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80023b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80023b2:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c0:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d0:	2001      	movs	r0, #1
 80023d2:	f7fe fee7 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023de:	461a      	mov	r2, r3
 80023e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023e4:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10d      	bne.n	800240a <ETH_MACDMAConfig+0x366>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002404:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002408:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	461a      	mov	r2, r3
 8002410:	2100      	movs	r1, #0
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f808 	bl	8002428 <ETH_MACAddressConfig>
}
 8002418:	bf00      	nop
 800241a:	37c0      	adds	r7, #192	; 0xc0
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	ff20810f 	.word	0xff20810f
 8002424:	f8de3f23 	.word	0xf8de3f23

08002428 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3305      	adds	r3, #5
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	3204      	adds	r2, #4
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <ETH_MACAddressConfig+0x64>)
 800244a:	4413      	add	r3, r2
 800244c:	461a      	mov	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3303      	adds	r3, #3
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	061a      	lsls	r2, r3, #24
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3302      	adds	r3, #2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3301      	adds	r3, #1
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4313      	orrs	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	7812      	ldrb	r2, [r2, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <ETH_MACAddressConfig+0x68>)
 800247a:	4413      	add	r3, r2
 800247c:	461a      	mov	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	6013      	str	r3, [r2, #0]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40028040 	.word	0x40028040
 8002490:	40028044 	.word	0x40028044

08002494 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0208 	orr.w	r2, r2, #8
 80024ae:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024b8:	2001      	movs	r0, #1
 80024ba:	f000 f8d9 	bl	8002670 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0208 	bic.w	r2, r2, #8
 80024e8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f000 f8bc 	bl	8002670 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0204 	orr.w	r2, r2, #4
 8002522:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800252c:	2001      	movs	r0, #1
 800252e:	f000 f89f 	bl	8002670 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0204 	bic.w	r2, r2, #4
 800255c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002566:	2001      	movs	r0, #1
 8002568:	f000 f882 	bl	8002670 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002596:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800259a:	6193      	str	r3, [r2, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025c4:	6193      	str	r3, [r2, #24]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	f043 0302 	orr.w	r3, r3, #2
 80025ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ee:	6193      	str	r3, [r2, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	f023 0302 	bic.w	r3, r3, #2
 8002614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002618:	6193      	str	r3, [r2, #24]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002646:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002654:	2001      	movs	r0, #1
 8002656:	f000 f80b 	bl	8002670 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002664:	6193      	str	r3, [r2, #24]
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <ETH_Delay+0x34>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <ETH_Delay+0x38>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0a5b      	lsrs	r3, r3, #9
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800268c:	bf00      	nop
  }
  while (Delay --);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	60fa      	str	r2, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f9      	bne.n	800268c <ETH_Delay+0x1c>
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000000 	.word	0x20000000
 80026a8:	10624dd3 	.word	0x10624dd3

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b08b      	sub	sp, #44	; 0x2c
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026be:	e169      	b.n	8002994 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026c0:	2201      	movs	r2, #1
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f040 8158 	bne.w	800298e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4a9a      	ldr	r2, [pc, #616]	; (800294c <HAL_GPIO_Init+0x2a0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d05e      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
 80026e8:	4a98      	ldr	r2, [pc, #608]	; (800294c <HAL_GPIO_Init+0x2a0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d875      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 80026ee:	4a98      	ldr	r2, [pc, #608]	; (8002950 <HAL_GPIO_Init+0x2a4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d058      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
 80026f4:	4a96      	ldr	r2, [pc, #600]	; (8002950 <HAL_GPIO_Init+0x2a4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d86f      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 80026fa:	4a96      	ldr	r2, [pc, #600]	; (8002954 <HAL_GPIO_Init+0x2a8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d052      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
 8002700:	4a94      	ldr	r2, [pc, #592]	; (8002954 <HAL_GPIO_Init+0x2a8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d869      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 8002706:	4a94      	ldr	r2, [pc, #592]	; (8002958 <HAL_GPIO_Init+0x2ac>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d04c      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
 800270c:	4a92      	ldr	r2, [pc, #584]	; (8002958 <HAL_GPIO_Init+0x2ac>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d863      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 8002712:	4a92      	ldr	r2, [pc, #584]	; (800295c <HAL_GPIO_Init+0x2b0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d046      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
 8002718:	4a90      	ldr	r2, [pc, #576]	; (800295c <HAL_GPIO_Init+0x2b0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d85d      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 800271e:	2b12      	cmp	r3, #18
 8002720:	d82a      	bhi.n	8002778 <HAL_GPIO_Init+0xcc>
 8002722:	2b12      	cmp	r3, #18
 8002724:	d859      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 8002726:	a201      	add	r2, pc, #4	; (adr r2, 800272c <HAL_GPIO_Init+0x80>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	080027a7 	.word	0x080027a7
 8002730:	08002781 	.word	0x08002781
 8002734:	08002793 	.word	0x08002793
 8002738:	080027d5 	.word	0x080027d5
 800273c:	080027db 	.word	0x080027db
 8002740:	080027db 	.word	0x080027db
 8002744:	080027db 	.word	0x080027db
 8002748:	080027db 	.word	0x080027db
 800274c:	080027db 	.word	0x080027db
 8002750:	080027db 	.word	0x080027db
 8002754:	080027db 	.word	0x080027db
 8002758:	080027db 	.word	0x080027db
 800275c:	080027db 	.word	0x080027db
 8002760:	080027db 	.word	0x080027db
 8002764:	080027db 	.word	0x080027db
 8002768:	080027db 	.word	0x080027db
 800276c:	080027db 	.word	0x080027db
 8002770:	08002789 	.word	0x08002789
 8002774:	0800279d 	.word	0x0800279d
 8002778:	4a79      	ldr	r2, [pc, #484]	; (8002960 <HAL_GPIO_Init+0x2b4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d013      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800277e:	e02c      	b.n	80027da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	623b      	str	r3, [r7, #32]
          break;
 8002786:	e029      	b.n	80027dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	3304      	adds	r3, #4
 800278e:	623b      	str	r3, [r7, #32]
          break;
 8002790:	e024      	b.n	80027dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	3308      	adds	r3, #8
 8002798:	623b      	str	r3, [r7, #32]
          break;
 800279a:	e01f      	b.n	80027dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	330c      	adds	r3, #12
 80027a2:	623b      	str	r3, [r7, #32]
          break;
 80027a4:	e01a      	b.n	80027dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ae:	2304      	movs	r3, #4
 80027b0:	623b      	str	r3, [r7, #32]
          break;
 80027b2:	e013      	b.n	80027dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027bc:	2308      	movs	r3, #8
 80027be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	611a      	str	r2, [r3, #16]
          break;
 80027c6:	e009      	b.n	80027dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c8:	2308      	movs	r3, #8
 80027ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	615a      	str	r2, [r3, #20]
          break;
 80027d2:	e003      	b.n	80027dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027d4:	2300      	movs	r3, #0
 80027d6:	623b      	str	r3, [r7, #32]
          break;
 80027d8:	e000      	b.n	80027dc <HAL_GPIO_Init+0x130>
          break;
 80027da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2bff      	cmp	r3, #255	; 0xff
 80027e0:	d801      	bhi.n	80027e6 <HAL_GPIO_Init+0x13a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	e001      	b.n	80027ea <HAL_GPIO_Init+0x13e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2bff      	cmp	r3, #255	; 0xff
 80027f0:	d802      	bhi.n	80027f8 <HAL_GPIO_Init+0x14c>
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	e002      	b.n	80027fe <HAL_GPIO_Init+0x152>
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	3b08      	subs	r3, #8
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	210f      	movs	r1, #15
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	401a      	ands	r2, r3
 8002810:	6a39      	ldr	r1, [r7, #32]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	431a      	orrs	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80b1 	beq.w	800298e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800282c:	4b4d      	ldr	r3, [pc, #308]	; (8002964 <HAL_GPIO_Init+0x2b8>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	4a4c      	ldr	r2, [pc, #304]	; (8002964 <HAL_GPIO_Init+0x2b8>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6193      	str	r3, [r2, #24]
 8002838:	4b4a      	ldr	r3, [pc, #296]	; (8002964 <HAL_GPIO_Init+0x2b8>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002844:	4a48      	ldr	r2, [pc, #288]	; (8002968 <HAL_GPIO_Init+0x2bc>)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a40      	ldr	r2, [pc, #256]	; (800296c <HAL_GPIO_Init+0x2c0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d013      	beq.n	8002898 <HAL_GPIO_Init+0x1ec>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a3f      	ldr	r2, [pc, #252]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00d      	beq.n	8002894 <HAL_GPIO_Init+0x1e8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a3e      	ldr	r2, [pc, #248]	; (8002974 <HAL_GPIO_Init+0x2c8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <HAL_GPIO_Init+0x1e4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a3d      	ldr	r2, [pc, #244]	; (8002978 <HAL_GPIO_Init+0x2cc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_GPIO_Init+0x1e0>
 8002888:	2303      	movs	r3, #3
 800288a:	e006      	b.n	800289a <HAL_GPIO_Init+0x1ee>
 800288c:	2304      	movs	r3, #4
 800288e:	e004      	b.n	800289a <HAL_GPIO_Init+0x1ee>
 8002890:	2302      	movs	r3, #2
 8002892:	e002      	b.n	800289a <HAL_GPIO_Init+0x1ee>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_GPIO_Init+0x1ee>
 8002898:	2300      	movs	r3, #0
 800289a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289c:	f002 0203 	and.w	r2, r2, #3
 80028a0:	0092      	lsls	r2, r2, #2
 80028a2:	4093      	lsls	r3, r2
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028aa:	492f      	ldr	r1, [pc, #188]	; (8002968 <HAL_GPIO_Init+0x2bc>)
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	492c      	ldr	r1, [pc, #176]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e006      	b.n	80028e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028d2:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	43db      	mvns	r3, r3
 80028da:	4928      	ldr	r1, [pc, #160]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028dc:	4013      	ands	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028ec:	4b23      	ldr	r3, [pc, #140]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4922      	ldr	r1, [pc, #136]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	43db      	mvns	r3, r3
 8002902:	491e      	ldr	r1, [pc, #120]	; (800297c <HAL_GPIO_Init+0x2d0>)
 8002904:	4013      	ands	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_GPIO_Init+0x2d0>)
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	4918      	ldr	r1, [pc, #96]	; (800297c <HAL_GPIO_Init+0x2d0>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	608b      	str	r3, [r1, #8]
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_GPIO_Init+0x2d0>)
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	43db      	mvns	r3, r3
 800292a:	4914      	ldr	r1, [pc, #80]	; (800297c <HAL_GPIO_Init+0x2d0>)
 800292c:	4013      	ands	r3, r2
 800292e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d021      	beq.n	8002980 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_GPIO_Init+0x2d0>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	490e      	ldr	r1, [pc, #56]	; (800297c <HAL_GPIO_Init+0x2d0>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
 8002948:	e021      	b.n	800298e <HAL_GPIO_Init+0x2e2>
 800294a:	bf00      	nop
 800294c:	10320000 	.word	0x10320000
 8002950:	10310000 	.word	0x10310000
 8002954:	10220000 	.word	0x10220000
 8002958:	10210000 	.word	0x10210000
 800295c:	10120000 	.word	0x10120000
 8002960:	10110000 	.word	0x10110000
 8002964:	40021000 	.word	0x40021000
 8002968:	40010000 	.word	0x40010000
 800296c:	40010800 	.word	0x40010800
 8002970:	40010c00 	.word	0x40010c00
 8002974:	40011000 	.word	0x40011000
 8002978:	40011400 	.word	0x40011400
 800297c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_GPIO_Init+0x304>)
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	43db      	mvns	r3, r3
 8002988:	4909      	ldr	r1, [pc, #36]	; (80029b0 <HAL_GPIO_Init+0x304>)
 800298a:	4013      	ands	r3, r2
 800298c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	3301      	adds	r3, #1
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f47f ae8e 	bne.w	80026c0 <HAL_GPIO_Init+0x14>
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	372c      	adds	r7, #44	; 0x2c
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	40010400 	.word	0x40010400

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029d0:	e003      	b.n	80029da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	041a      	lsls	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	611a      	str	r2, [r3, #16]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e12b      	b.n	8002c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fd ff3c 	bl	8000888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	; 0x24
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a48:	f000 fe64 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8002a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a81      	ldr	r2, [pc, #516]	; (8002c58 <HAL_I2C_Init+0x274>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d807      	bhi.n	8002a68 <HAL_I2C_Init+0x84>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a80      	ldr	r2, [pc, #512]	; (8002c5c <HAL_I2C_Init+0x278>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	bf94      	ite	ls
 8002a60:	2301      	movls	r3, #1
 8002a62:	2300      	movhi	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e006      	b.n	8002a76 <HAL_I2C_Init+0x92>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a7d      	ldr	r2, [pc, #500]	; (8002c60 <HAL_I2C_Init+0x27c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	bf94      	ite	ls
 8002a70:	2301      	movls	r3, #1
 8002a72:	2300      	movhi	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0e7      	b.n	8002c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a78      	ldr	r2, [pc, #480]	; (8002c64 <HAL_I2C_Init+0x280>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0c9b      	lsrs	r3, r3, #18
 8002a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a6a      	ldr	r2, [pc, #424]	; (8002c58 <HAL_I2C_Init+0x274>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d802      	bhi.n	8002ab8 <HAL_I2C_Init+0xd4>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	e009      	b.n	8002acc <HAL_I2C_Init+0xe8>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	4a69      	ldr	r2, [pc, #420]	; (8002c68 <HAL_I2C_Init+0x284>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	099b      	lsrs	r3, r3, #6
 8002aca:	3301      	adds	r3, #1
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ade:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	495c      	ldr	r1, [pc, #368]	; (8002c58 <HAL_I2C_Init+0x274>)
 8002ae8:	428b      	cmp	r3, r1
 8002aea:	d819      	bhi.n	8002b20 <HAL_I2C_Init+0x13c>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e59      	subs	r1, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002afa:	1c59      	adds	r1, r3, #1
 8002afc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b00:	400b      	ands	r3, r1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_I2C_Init+0x138>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e59      	subs	r1, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1a:	e051      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e04f      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d111      	bne.n	8002b4c <HAL_I2C_Init+0x168>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1e58      	subs	r0, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	440b      	add	r3, r1
 8002b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e012      	b.n	8002b72 <HAL_I2C_Init+0x18e>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	0099      	lsls	r1, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Init+0x196>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e022      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10e      	bne.n	8002ba0 <HAL_I2C_Init+0x1bc>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1e58      	subs	r0, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	440b      	add	r3, r1
 8002b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9e:	e00f      	b.n	8002bc0 <HAL_I2C_Init+0x1dc>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e58      	subs	r0, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	0099      	lsls	r1, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	6809      	ldr	r1, [r1, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6911      	ldr	r1, [r2, #16]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68d2      	ldr	r2, [r2, #12]
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	000186a0 	.word	0x000186a0
 8002c5c:	001e847f 	.word	0x001e847f
 8002c60:	003d08ff 	.word	0x003d08ff
 8002c64:	431bde83 	.word	0x431bde83
 8002c68:	10624dd3 	.word	0x10624dd3

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e304      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8087 	beq.w	8002d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c8c:	4b92      	ldr	r3, [pc, #584]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d00c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c98:	4b8f      	ldr	r3, [pc, #572]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d112      	bne.n	8002cca <HAL_RCC_OscConfig+0x5e>
 8002ca4:	4b8c      	ldr	r3, [pc, #560]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d10b      	bne.n	8002cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb2:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d06c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x12c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d168      	bne.n	8002d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e2de      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x76>
 8002cd4:	4b80      	ldr	r3, [pc, #512]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a7f      	ldr	r2, [pc, #508]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	e02e      	b.n	8002d40 <HAL_RCC_OscConfig+0xd4>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x98>
 8002cea:	4b7b      	ldr	r3, [pc, #492]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7a      	ldr	r2, [pc, #488]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b78      	ldr	r3, [pc, #480]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a77      	ldr	r2, [pc, #476]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e01d      	b.n	8002d40 <HAL_RCC_OscConfig+0xd4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0xbc>
 8002d0e:	4b72      	ldr	r3, [pc, #456]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a71      	ldr	r2, [pc, #452]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6e      	ldr	r2, [pc, #440]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0xd4>
 8002d28:	4b6b      	ldr	r3, [pc, #428]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a6a      	ldr	r2, [pc, #424]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b68      	ldr	r3, [pc, #416]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a67      	ldr	r2, [pc, #412]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fa22 	bl	8001190 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe fa1e 	bl	8001190 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e292      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4b5d      	ldr	r3, [pc, #372]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0xe4>
 8002d6e:	e014      	b.n	8002d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe fa0e 	bl	8001190 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d78:	f7fe fa0a 	bl	8001190 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e27e      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	4b53      	ldr	r3, [pc, #332]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x10c>
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d063      	beq.n	8002e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002da6:	4b4c      	ldr	r3, [pc, #304]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002db2:	4b49      	ldr	r3, [pc, #292]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d11c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x18c>
 8002dbe:	4b46      	ldr	r3, [pc, #280]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d116      	bne.n	8002df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dca:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_RCC_OscConfig+0x176>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e252      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de2:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4939      	ldr	r1, [pc, #228]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	e03a      	b.n	8002e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e00:	4b36      	ldr	r3, [pc, #216]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fe f9c3 	bl	8001190 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0e:	f7fe f9bf 	bl	8001190 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e233      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4927      	ldr	r1, [pc, #156]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
 8002e40:	e015      	b.n	8002e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e42:	4b26      	ldr	r3, [pc, #152]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe f9a2 	bl	8001190 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e50:	f7fe f99e 	bl	8001190 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e212      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d03a      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d019      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e88:	f7fe f982 	bl	8001190 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e90:	f7fe f97e 	bl	8001190 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1f2      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f000 fc44 	bl	800373c <RCC_Delay>
 8002eb4:	e01c      	b.n	8002ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe f968 	bl	8001190 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec2:	e00f      	b.n	8002ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7fe f964 	bl	8001190 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d908      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e1d8      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	42420000 	.word	0x42420000
 8002ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	4b9b      	ldr	r3, [pc, #620]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e9      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80a6 	beq.w	800304a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b94      	ldr	r3, [pc, #592]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10d      	bne.n	8002f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	4b91      	ldr	r3, [pc, #580]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	4a90      	ldr	r2, [pc, #576]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f18:	61d3      	str	r3, [r2, #28]
 8002f1a:	4b8e      	ldr	r3, [pc, #568]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f26:	2301      	movs	r3, #1
 8002f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	4b8b      	ldr	r3, [pc, #556]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d118      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f36:	4b88      	ldr	r3, [pc, #544]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a87      	ldr	r2, [pc, #540]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f42:	f7fe f925 	bl	8001190 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4a:	f7fe f921 	bl	8001190 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b64      	cmp	r3, #100	; 0x64
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e195      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	4b7e      	ldr	r3, [pc, #504]	; (8003158 <HAL_RCC_OscConfig+0x4ec>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCC_OscConfig+0x312>
 8002f70:	4b78      	ldr	r3, [pc, #480]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4a77      	ldr	r2, [pc, #476]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6213      	str	r3, [r2, #32]
 8002f7c:	e02d      	b.n	8002fda <HAL_RCC_OscConfig+0x36e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x334>
 8002f86:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4a72      	ldr	r2, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	6213      	str	r3, [r2, #32]
 8002f92:	4b70      	ldr	r3, [pc, #448]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4a6f      	ldr	r2, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	6213      	str	r3, [r2, #32]
 8002f9e:	e01c      	b.n	8002fda <HAL_RCC_OscConfig+0x36e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x356>
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4a69      	ldr	r2, [pc, #420]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	6213      	str	r3, [r2, #32]
 8002fb4:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4a66      	ldr	r2, [pc, #408]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6213      	str	r3, [r2, #32]
 8002fc0:	e00b      	b.n	8002fda <HAL_RCC_OscConfig+0x36e>
 8002fc2:	4b64      	ldr	r3, [pc, #400]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4a63      	ldr	r2, [pc, #396]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6213      	str	r3, [r2, #32]
 8002fce:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4a60      	ldr	r2, [pc, #384]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d015      	beq.n	800300e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe f8d5 	bl	8001190 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe f8d1 	bl	8001190 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e143      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	4b54      	ldr	r3, [pc, #336]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ee      	beq.n	8002fea <HAL_RCC_OscConfig+0x37e>
 800300c:	e014      	b.n	8003038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300e:	f7fe f8bf 	bl	8001190 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003014:	e00a      	b.n	800302c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe f8bb 	bl	8001190 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e12d      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302c:	4b49      	ldr	r3, [pc, #292]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ee      	bne.n	8003016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303e:	4b45      	ldr	r3, [pc, #276]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	4a44      	ldr	r2, [pc, #272]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003048:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 808c 	beq.w	800316c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003054:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003060:	d10e      	bne.n	8003080 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003062:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800306a:	2b08      	cmp	r3, #8
 800306c:	d108      	bne.n	8003080 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800306e:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307a:	d101      	bne.n	8003080 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e103      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	2b02      	cmp	r3, #2
 8003086:	d14e      	bne.n	8003126 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003088:	4b32      	ldr	r3, [pc, #200]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0ef      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80030a8:	4b2c      	ldr	r3, [pc, #176]	; (800315c <HAL_RCC_OscConfig+0x4f0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe f86f 	bl	8001190 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80030b6:	f7fe f86b 	bl	8001190 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b64      	cmp	r3, #100	; 0x64
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0df      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80030c8:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80030d4:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	491c      	ldr	r1, [pc, #112]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4918      	ldr	r1, [pc, #96]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_RCC_OscConfig+0x4f0>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe f847 	bl	8001190 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003106:	f7fe f843 	bl	8001190 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b64      	cmp	r3, #100	; 0x64
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0b7      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x49a>
 8003124:	e022      	b.n	800316c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_RCC_OscConfig+0x4e8>)
 800312c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_OscConfig+0x4f0>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe f82a 	bl	8001190 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800313e:	e00f      	b.n	8003160 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003140:	f7fe f826 	bl	8001190 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d908      	bls.n	8003160 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e09a      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	40007000 	.word	0x40007000
 800315c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003160:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e9      	bne.n	8003140 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8088 	beq.w	8003286 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003176:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b08      	cmp	r3, #8
 8003180:	d068      	beq.n	8003254 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d14d      	bne.n	8003226 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fd fffe 	bl	8001190 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003198:	f7fd fffa 	bl	8001190 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e06e      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031aa:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031be:	d10f      	bne.n	80031e0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80031c0:	4b33      	ldr	r3, [pc, #204]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 80031c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4931      	ldr	r1, [pc, #196]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ce:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	f023 020f 	bic.w	r2, r3, #15
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	492d      	ldr	r1, [pc, #180]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	430b      	orrs	r3, r1
 80031f2:	4927      	ldr	r1, [pc, #156]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fd ffc7 	bl	8001190 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003206:	f7fd ffc3 	bl	8001190 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e037      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x59a>
 8003224:	e02f      	b.n	8003286 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003226:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fd ffb0 	bl	8001190 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7fd ffac 	bl	8001190 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e020      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x5c8>
 8003252:	e018      	b.n	8003286 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e013      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_OscConfig+0x624>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	429a      	cmp	r2, r3
 8003272:	d106      	bne.n	8003282 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	42420060 	.word	0x42420060

08003298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0d0      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ac:	4b6a      	ldr	r3, [pc, #424]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d910      	bls.n	80032dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b67      	ldr	r3, [pc, #412]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 0207 	bic.w	r2, r3, #7
 80032c2:	4965      	ldr	r1, [pc, #404]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b63      	ldr	r3, [pc, #396]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0b8      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a58      	ldr	r2, [pc, #352]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800330c:	4b53      	ldr	r3, [pc, #332]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a52      	ldr	r2, [pc, #328]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003318:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	494d      	ldr	r1, [pc, #308]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d040      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d115      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07f      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003356:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e073      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	4b3d      	ldr	r3, [pc, #244]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06b      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003376:	4b39      	ldr	r3, [pc, #228]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f023 0203 	bic.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4936      	ldr	r1, [pc, #216]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003388:	f7fd ff02 	bl	8001190 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7fd fefe 	bl	8001190 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e053      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 020c 	and.w	r2, r3, #12
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1eb      	bne.n	8003390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d210      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 0207 	bic.w	r2, r3, #7
 80033ce:	4922      	ldr	r1, [pc, #136]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e032      	b.n	800344e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4916      	ldr	r1, [pc, #88]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	490e      	ldr	r1, [pc, #56]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003426:	f000 f859 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800342a:	4602      	mov	r2, r0
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	490a      	ldr	r1, [pc, #40]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003438:	5ccb      	ldrb	r3, [r1, r3]
 800343a:	fa22 f303 	lsr.w	r3, r2, r3
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <HAL_RCC_ClockConfig+0x1cc>)
 8003440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_RCC_ClockConfig+0x1d0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd fe60 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40022000 	.word	0x40022000
 800345c:	40021000 	.word	0x40021000
 8003460:	08010554 	.word	0x08010554
 8003464:	20000000 	.word	0x20000000
 8003468:	20000008 	.word	0x20000008

0800346c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003478:	f107 0318 	add.w	r3, r7, #24
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800348a:	2303      	movs	r3, #3
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8003492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003496:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_RCC_MCOConfig+0x68>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <HAL_RCC_MCOConfig+0x68>)
 800349e:	f043 0304 	orr.w	r3, r3, #4
 80034a2:	6193      	str	r3, [r2, #24]
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_MCOConfig+0x68>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80034b0:	f107 0318 	add.w	r3, r7, #24
 80034b4:	4619      	mov	r1, r3
 80034b6:	4808      	ldr	r0, [pc, #32]	; (80034d8 <HAL_RCC_MCOConfig+0x6c>)
 80034b8:	f7ff f8f8 	bl	80026ac <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_MCOConfig+0x68>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80034c4:	4903      	ldr	r1, [pc, #12]	; (80034d4 <HAL_RCC_MCOConfig+0x68>)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
}
 80034cc:	bf00      	nop
 80034ce:	3728      	adds	r7, #40	; 0x28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40010800 	.word	0x40010800

080034dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e0:	b09d      	sub	sp, #116	; 0x74
 80034e2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80034e4:	4b81      	ldr	r3, [pc, #516]	; (80036ec <HAL_RCC_GetSysClockFreq+0x210>)
 80034e6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80034ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ec:	c407      	stmia	r4!, {r0, r1, r2}
 80034ee:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80034f0:	4b7f      	ldr	r3, [pc, #508]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x214>)
 80034f2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80034f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003500:	2300      	movs	r3, #0
 8003502:	663b      	str	r3, [r7, #96]	; 0x60
 8003504:	2300      	movs	r3, #0
 8003506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003508:	2300      	movs	r3, #0
 800350a:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	65bb      	str	r3, [r7, #88]	; 0x58
 8003514:	2300      	movs	r3, #0
 8003516:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003518:	4b76      	ldr	r3, [pc, #472]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x218>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800351e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b04      	cmp	r3, #4
 8003526:	d002      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x52>
 8003528:	2b08      	cmp	r3, #8
 800352a:	d003      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x58>
 800352c:	e0d4      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800352e:	4b72      	ldr	r3, [pc, #456]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x21c>)
 8003530:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8003532:	e0d4      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003536:	0c9b      	lsrs	r3, r3, #18
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	3340      	adds	r3, #64	; 0x40
 800353e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003542:	4413      	add	r3, r2
 8003544:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003548:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800354a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800354c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80b9 	beq.w	80036c8 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003556:	4b67      	ldr	r3, [pc, #412]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x218>)
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3340      	adds	r3, #64	; 0x40
 8003560:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003564:	4413      	add	r3, r2
 8003566:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800356a:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800356c:	4b61      	ldr	r3, [pc, #388]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x218>)
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8095 	beq.w	80036a4 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800357a:	4b5e      	ldr	r3, [pc, #376]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x218>)
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	3301      	adds	r3, #1
 8003586:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003588:	4b5a      	ldr	r3, [pc, #360]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x218>)
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3302      	adds	r3, #2
 8003594:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003598:	2200      	movs	r2, #0
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	61fa      	str	r2, [r7, #28]
 800359e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a0:	2200      	movs	r2, #0
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035a6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80035aa:	4622      	mov	r2, r4
 80035ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035b0:	4684      	mov	ip, r0
 80035b2:	fb0c f202 	mul.w	r2, ip, r2
 80035b6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80035ba:	468c      	mov	ip, r1
 80035bc:	4618      	mov	r0, r3
 80035be:	4621      	mov	r1, r4
 80035c0:	4603      	mov	r3, r0
 80035c2:	fb03 f30c 	mul.w	r3, r3, ip
 80035c6:	4413      	add	r3, r2
 80035c8:	4602      	mov	r2, r0
 80035ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035cc:	fba2 8901 	umull	r8, r9, r2, r1
 80035d0:	444b      	add	r3, r9
 80035d2:	4699      	mov	r9, r3
 80035d4:	4642      	mov	r2, r8
 80035d6:	464b      	mov	r3, r9
 80035d8:	f04f 0000 	mov.w	r0, #0
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	0159      	lsls	r1, r3, #5
 80035e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e6:	0150      	lsls	r0, r2, #5
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	ebb2 0508 	subs.w	r5, r2, r8
 80035f0:	eb63 0609 	sbc.w	r6, r3, r9
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	01b3      	lsls	r3, r6, #6
 80035fe:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 8003602:	01aa      	lsls	r2, r5, #6
 8003604:	ebb2 0a05 	subs.w	sl, r2, r5
 8003608:	eb63 0b06 	sbc.w	fp, r3, r6
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003618:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800361c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003620:	4692      	mov	sl, r2
 8003622:	469b      	mov	fp, r3
 8003624:	eb1a 0308 	adds.w	r3, sl, r8
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	eb4b 0309 	adc.w	r3, fp, r9
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363c:	4629      	mov	r1, r5
 800363e:	024b      	lsls	r3, r1, #9
 8003640:	4620      	mov	r0, r4
 8003642:	4629      	mov	r1, r5
 8003644:	4604      	mov	r4, r0
 8003646:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800364a:	4601      	mov	r1, r0
 800364c:	024a      	lsls	r2, r1, #9
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003654:	2200      	movs	r2, #0
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	617a      	str	r2, [r7, #20]
 800365a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800365c:	2200      	movs	r2, #0
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	60fa      	str	r2, [r7, #12]
 8003662:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003666:	4622      	mov	r2, r4
 8003668:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800366c:	4645      	mov	r5, r8
 800366e:	fb05 f202 	mul.w	r2, r5, r2
 8003672:	464e      	mov	r6, r9
 8003674:	4625      	mov	r5, r4
 8003676:	461c      	mov	r4, r3
 8003678:	4623      	mov	r3, r4
 800367a:	fb03 f306 	mul.w	r3, r3, r6
 800367e:	4413      	add	r3, r2
 8003680:	4622      	mov	r2, r4
 8003682:	4644      	mov	r4, r8
 8003684:	fba2 2404 	umull	r2, r4, r2, r4
 8003688:	627c      	str	r4, [r7, #36]	; 0x24
 800368a:	623a      	str	r2, [r7, #32]
 800368c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368e:	4413      	add	r3, r2
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
 8003692:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003696:	f7fc fdc5 	bl	8000224 <__aeabi_uldivmod>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4613      	mov	r3, r2
 80036a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036a2:	e007      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80036a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a6:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x21c>)
 80036a8:	fb03 f202 	mul.w	r2, r3, r2
 80036ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80036b4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80036b8:	461a      	mov	r2, r3
 80036ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036bc:	4293      	cmp	r3, r2
 80036be:	d108      	bne.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 80036c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c6:	e004      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ca:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <HAL_RCC_GetSysClockFreq+0x220>)
 80036cc:	fb02 f303 	mul.w	r3, r2, r3
 80036d0:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 80036d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d4:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80036d6:	e002      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036d8:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x21c>)
 80036da:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80036dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3774      	adds	r7, #116	; 0x74
 80036e4:	46bd      	mov	sp, r7
 80036e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ea:	bf00      	nop
 80036ec:	0800e87c 	.word	0x0800e87c
 80036f0:	0800e88c 	.word	0x0800e88c
 80036f4:	40021000 	.word	0x40021000
 80036f8:	007a1200 	.word	0x007a1200
 80036fc:	003d0900 	.word	0x003d0900

08003700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <HAL_RCC_GetHCLKFreq+0x10>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	20000000 	.word	0x20000000

08003714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003718:	f7ff fff2 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4903      	ldr	r1, [pc, #12]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021000 	.word	0x40021000
 8003738:	08010564 	.word	0x08010564

0800373c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <RCC_Delay+0x34>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <RCC_Delay+0x38>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0a5b      	lsrs	r3, r3, #9
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003758:	bf00      	nop
  }
  while (Delay --);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1e5a      	subs	r2, r3, #1
 800375e:	60fa      	str	r2, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f9      	bne.n	8003758 <RCC_Delay+0x1c>
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	20000000 	.word	0x20000000
 8003774:	10624dd3 	.word	0x10624dd3

08003778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e076      	b.n	8003878 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d108      	bne.n	80037a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379a:	d009      	beq.n	80037b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	61da      	str	r2, [r3, #28]
 80037a2:	e005      	b.n	80037b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd f89a 	bl	8000904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	ea42 0103 	orr.w	r1, r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	0c1a      	lsrs	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f002 0204 	and.w	r2, r2, #4
 8003856:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003866:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_SPI_Transmit+0x22>
 800389e:	2302      	movs	r3, #2
 80038a0:	e126      	b.n	8003af0 <HAL_SPI_Transmit+0x270>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038aa:	f7fd fc71 	bl	8001190 <HAL_GetTick>
 80038ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d002      	beq.n	80038c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
 80038c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c4:	e10b      	b.n	8003ade <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_SPI_Transmit+0x52>
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d6:	e102      	b.n	8003ade <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2203      	movs	r2, #3
 80038dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391e:	d10f      	bne.n	8003940 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d007      	beq.n	800395e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800395c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003966:	d14b      	bne.n	8003a00 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_SPI_Transmit+0xf6>
 8003970:	8afb      	ldrh	r3, [r7, #22]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d13e      	bne.n	80039f4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800399a:	e02b      	b.n	80039f4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d112      	bne.n	80039d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80039ce:	e011      	b.n	80039f4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d0:	f7fd fbde 	bl	8001190 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d803      	bhi.n	80039e8 <HAL_SPI_Transmit+0x168>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e6:	d102      	bne.n	80039ee <HAL_SPI_Transmit+0x16e>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f2:	e074      	b.n	8003ade <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ce      	bne.n	800399c <HAL_SPI_Transmit+0x11c>
 80039fe:	e04c      	b.n	8003a9a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_SPI_Transmit+0x18e>
 8003a08:	8afb      	ldrh	r3, [r7, #22]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d140      	bne.n	8003a90 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a34:	e02c      	b.n	8003a90 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d113      	bne.n	8003a6c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	7812      	ldrb	r2, [r2, #0]
 8003a50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a6a:	e011      	b.n	8003a90 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6c:	f7fd fb90 	bl	8001190 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d803      	bhi.n	8003a84 <HAL_SPI_Transmit+0x204>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a82:	d102      	bne.n	8003a8a <HAL_SPI_Transmit+0x20a>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a8e:	e026      	b.n	8003ade <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1cd      	bne.n	8003a36 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f8b2 	bl	8003c08 <SPI_EndRxTxTransaction>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e000      	b.n	8003ade <HAL_SPI_Transmit+0x25e>
  }

error:
 8003adc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aee:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b08:	f7fd fb42 	bl	8001190 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	4413      	add	r3, r2
 8003b16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b18:	f7fd fb3a 	bl	8001190 <HAL_GetTick>
 8003b1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b1e:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	015b      	lsls	r3, r3, #5
 8003b24:	0d1b      	lsrs	r3, r3, #20
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	fb02 f303 	mul.w	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b2e:	e054      	b.n	8003bda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b36:	d050      	beq.n	8003bda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b38:	f7fd fb2a 	bl	8001190 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d902      	bls.n	8003b4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d13d      	bne.n	8003bca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b66:	d111      	bne.n	8003b8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b70:	d004      	beq.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7a:	d107      	bne.n	8003b8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b94:	d10f      	bne.n	8003bb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e017      	b.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4013      	ands	r3, r2
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d19b      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000000 	.word	0x20000000

08003c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff ff6a 	bl	8003af8 <SPI_WaitFlagStateUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	f043 0220 	orr.w	r2, r3, #32
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e000      	b.n	8003c3c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003c4a:	4b8d      	ldr	r3, [pc, #564]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003c4c:	22c0      	movs	r2, #192	; 0xc0
 8003c4e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003c50:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003c52:	22a8      	movs	r2, #168	; 0xa8
 8003c54:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003c56:	4b8a      	ldr	r3, [pc, #552]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8003c5c:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003c5e:	226f      	movs	r2, #111	; 0x6f
 8003c60:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003c62:	4b88      	ldr	r3, [pc, #544]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003c64:	22ff      	movs	r2, #255	; 0xff
 8003c66:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003c68:	4b86      	ldr	r3, [pc, #536]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003c6a:	22ff      	movs	r2, #255	; 0xff
 8003c6c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003c6e:	4b85      	ldr	r3, [pc, #532]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003c70:	22ff      	movs	r2, #255	; 0xff
 8003c72:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003c74:	4b83      	ldr	r3, [pc, #524]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 223;
 8003c7a:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003c7c:	22df      	movs	r2, #223	; 0xdf
 8003c7e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 255;
 8003c80:	4b81      	ldr	r3, [pc, #516]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003c82:	22ff      	movs	r2, #255	; 0xff
 8003c84:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003c86:	4b80      	ldr	r3, [pc, #512]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003c8c:	4b7e      	ldr	r3, [pc, #504]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003c92:	f000 fcb9 	bl	8004608 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003c96:	4b7a      	ldr	r3, [pc, #488]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	061a      	lsls	r2, r3, #24
 8003c9c:	4b78      	ldr	r3, [pc, #480]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	4b76      	ldr	r3, [pc, #472]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003ca6:	789b      	ldrb	r3, [r3, #2]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	4313      	orrs	r3, r2
 8003cac:	4a74      	ldr	r2, [pc, #464]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003cae:	78d2      	ldrb	r2, [r2, #3]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	061a      	lsls	r2, r3, #24
 8003cb4:	4b72      	ldr	r3, [pc, #456]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	0619      	lsls	r1, r3, #24
 8003cba:	4b71      	ldr	r3, [pc, #452]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	4319      	orrs	r1, r3
 8003cc2:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003cc4:	789b      	ldrb	r3, [r3, #2]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	496d      	ldr	r1, [pc, #436]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003ccc:	78c9      	ldrb	r1, [r1, #3]
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	4b69      	ldr	r3, [pc, #420]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	0619      	lsls	r1, r3, #24
 8003cde:	4b68      	ldr	r3, [pc, #416]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003ce0:	785b      	ldrb	r3, [r3, #1]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	4319      	orrs	r1, r3
 8003ce6:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003ce8:	789b      	ldrb	r3, [r3, #2]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	430b      	orrs	r3, r1
 8003cee:	4964      	ldr	r1, [pc, #400]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003cf0:	78c9      	ldrb	r1, [r1, #3]
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	4b60      	ldr	r3, [pc, #384]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	0619      	lsls	r1, r3, #24
 8003d02:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003d04:	785b      	ldrb	r3, [r3, #1]
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	4319      	orrs	r1, r3
 8003d0a:	4b5d      	ldr	r3, [pc, #372]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003d0c:	789b      	ldrb	r3, [r3, #2]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	430b      	orrs	r3, r1
 8003d12:	495b      	ldr	r1, [pc, #364]	; (8003e80 <MX_LWIP_Init+0x23c>)
 8003d14:	78c9      	ldrb	r1, [r1, #3]
 8003d16:	430b      	orrs	r3, r1
 8003d18:	0e1b      	lsrs	r3, r3, #24
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	4a5b      	ldr	r2, [pc, #364]	; (8003e8c <MX_LWIP_Init+0x248>)
 8003d1e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003d20:	4b58      	ldr	r3, [pc, #352]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	061a      	lsls	r2, r3, #24
 8003d26:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	4b55      	ldr	r3, [pc, #340]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d30:	789b      	ldrb	r3, [r3, #2]
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	4313      	orrs	r3, r2
 8003d36:	4a53      	ldr	r2, [pc, #332]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d38:	78d2      	ldrb	r2, [r2, #3]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	061a      	lsls	r2, r3, #24
 8003d3e:	4b51      	ldr	r3, [pc, #324]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	0619      	lsls	r1, r3, #24
 8003d44:	4b4f      	ldr	r3, [pc, #316]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	4319      	orrs	r1, r3
 8003d4c:	4b4d      	ldr	r3, [pc, #308]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d4e:	789b      	ldrb	r3, [r3, #2]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	430b      	orrs	r3, r1
 8003d54:	494b      	ldr	r1, [pc, #300]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d56:	78c9      	ldrb	r1, [r1, #3]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d60:	431a      	orrs	r2, r3
 8003d62:	4b48      	ldr	r3, [pc, #288]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	0619      	lsls	r1, r3, #24
 8003d68:	4b46      	ldr	r3, [pc, #280]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	4319      	orrs	r1, r3
 8003d70:	4b44      	ldr	r3, [pc, #272]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d72:	789b      	ldrb	r3, [r3, #2]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	430b      	orrs	r3, r1
 8003d78:	4942      	ldr	r1, [pc, #264]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d7a:	78c9      	ldrb	r1, [r1, #3]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d84:	431a      	orrs	r2, r3
 8003d86:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	0619      	lsls	r1, r3, #24
 8003d8c:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d8e:	785b      	ldrb	r3, [r3, #1]
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	4319      	orrs	r1, r3
 8003d94:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d96:	789b      	ldrb	r3, [r3, #2]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	4939      	ldr	r1, [pc, #228]	; (8003e84 <MX_LWIP_Init+0x240>)
 8003d9e:	78c9      	ldrb	r1, [r1, #3]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	0e1b      	lsrs	r3, r3, #24
 8003da4:	4313      	orrs	r3, r2
 8003da6:	4a3a      	ldr	r2, [pc, #232]	; (8003e90 <MX_LWIP_Init+0x24c>)
 8003da8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	061a      	lsls	r2, r3, #24
 8003db0:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	431a      	orrs	r2, r3
 8003db8:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003dba:	789b      	ldrb	r3, [r3, #2]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	4a31      	ldr	r2, [pc, #196]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003dc2:	78d2      	ldrb	r2, [r2, #3]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	061a      	lsls	r2, r3, #24
 8003dc8:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	0619      	lsls	r1, r3, #24
 8003dce:	4b2e      	ldr	r3, [pc, #184]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	4319      	orrs	r1, r3
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003dd8:	789b      	ldrb	r3, [r3, #2]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	492a      	ldr	r1, [pc, #168]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003de0:	78c9      	ldrb	r1, [r1, #3]
 8003de2:	430b      	orrs	r3, r1
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003dea:	431a      	orrs	r2, r3
 8003dec:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	0619      	lsls	r1, r3, #24
 8003df2:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003df4:	785b      	ldrb	r3, [r3, #1]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	4319      	orrs	r1, r3
 8003dfa:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003dfc:	789b      	ldrb	r3, [r3, #2]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	430b      	orrs	r3, r1
 8003e02:	4921      	ldr	r1, [pc, #132]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003e04:	78c9      	ldrb	r1, [r1, #3]
 8003e06:	430b      	orrs	r3, r1
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	0619      	lsls	r1, r3, #24
 8003e16:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	4319      	orrs	r1, r3
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003e20:	789b      	ldrb	r3, [r3, #2]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	430b      	orrs	r3, r1
 8003e26:	4918      	ldr	r1, [pc, #96]	; (8003e88 <MX_LWIP_Init+0x244>)
 8003e28:	78c9      	ldrb	r1, [r1, #3]
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	0e1b      	lsrs	r3, r3, #24
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	4a18      	ldr	r2, [pc, #96]	; (8003e94 <MX_LWIP_Init+0x250>)
 8003e32:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003e34:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <MX_LWIP_Init+0x254>)
 8003e36:	9302      	str	r3, [sp, #8]
 8003e38:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <MX_LWIP_Init+0x258>)
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <MX_LWIP_Init+0x250>)
 8003e42:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <MX_LWIP_Init+0x24c>)
 8003e44:	4911      	ldr	r1, [pc, #68]	; (8003e8c <MX_LWIP_Init+0x248>)
 8003e46:	4816      	ldr	r0, [pc, #88]	; (8003ea0 <MX_LWIP_Init+0x25c>)
 8003e48:	f000 ffde 	bl	8004e08 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003e4c:	4814      	ldr	r0, [pc, #80]	; (8003ea0 <MX_LWIP_Init+0x25c>)
 8003e4e:	f001 f8bd 	bl	8004fcc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <MX_LWIP_Init+0x25c>)
 8003e54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003e64:	480e      	ldr	r0, [pc, #56]	; (8003ea0 <MX_LWIP_Init+0x25c>)
 8003e66:	f001 f8bf 	bl	8004fe8 <netif_set_up>
 8003e6a:	e002      	b.n	8003e72 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003e6c:	480c      	ldr	r0, [pc, #48]	; (8003ea0 <MX_LWIP_Init+0x25c>)
 8003e6e:	f001 f8ff 	bl	8005070 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003e72:	490c      	ldr	r1, [pc, #48]	; (8003ea4 <MX_LWIP_Init+0x260>)
 8003e74:	480a      	ldr	r0, [pc, #40]	; (8003ea0 <MX_LWIP_Init+0x25c>)
 8003e76:	f001 f91d 	bl	80050b4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003e7a:	bf00      	nop
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000194 	.word	0x20000194
 8003e84:	20000198 	.word	0x20000198
 8003e88:	2000019c 	.word	0x2000019c
 8003e8c:	20000188 	.word	0x20000188
 8003e90:	2000018c 	.word	0x2000018c
 8003e94:	20000190 	.word	0x20000190
 8003e98:	0800d2bd 	.word	0x0800d2bd
 8003e9c:	08004449 	.word	0x08004449
 8003ea0:	20000154 	.word	0x20000154
 8003ea4:	080044b5 	.word	0x080044b5

08003ea8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08e      	sub	sp, #56	; 0x38
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_ETH_MspInit+0x17c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	f040 80a8 	bne.w	800401a <HAL_ETH_MspInit+0x172>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003eca:	4b57      	ldr	r3, [pc, #348]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	4a56      	ldr	r2, [pc, #344]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed4:	6153      	str	r3, [r2, #20]
 8003ed6:	4b54      	ldr	r3, [pc, #336]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ede:	623b      	str	r3, [r7, #32]
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	4b51      	ldr	r3, [pc, #324]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4a50      	ldr	r2, [pc, #320]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eec:	6153      	str	r3, [r2, #20]
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	4a4a      	ldr	r2, [pc, #296]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6153      	str	r3, [r2, #20]
 8003f06:	4b48      	ldr	r3, [pc, #288]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f12:	4b45      	ldr	r3, [pc, #276]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	4a44      	ldr	r2, [pc, #272]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f18:	f043 0310 	orr.w	r3, r3, #16
 8003f1c:	6193      	str	r3, [r2, #24]
 8003f1e:	4b42      	ldr	r3, [pc, #264]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	4b3f      	ldr	r3, [pc, #252]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	4a3e      	ldr	r2, [pc, #248]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f30:	f043 0304 	orr.w	r3, r3, #4
 8003f34:	6193      	str	r3, [r2, #24]
 8003f36:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	4b39      	ldr	r3, [pc, #228]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	4a38      	ldr	r2, [pc, #224]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f48:	f043 0308 	orr.w	r3, r3, #8
 8003f4c:	6193      	str	r3, [r2, #24]
 8003f4e:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f5a:	4b33      	ldr	r3, [pc, #204]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	4a32      	ldr	r2, [pc, #200]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f60:	f043 0320 	orr.w	r3, r3, #32
 8003f64:	6193      	str	r3, [r2, #24]
 8003f66:	4b30      	ldr	r3, [pc, #192]	; (8004028 <HAL_ETH_MspInit+0x180>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> ETH_TXD1
    PD8     ------> ETH_CRS_DV
    PD9     ------> ETH_RXD0
    PD10     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f72:	2302      	movs	r3, #2
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f76:	2302      	movs	r3, #2
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f82:	4619      	mov	r1, r3
 8003f84:	4829      	ldr	r0, [pc, #164]	; (800402c <HAL_ETH_MspInit+0x184>)
 8003f86:	f7fe fb91 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4824      	ldr	r0, [pc, #144]	; (8004030 <HAL_ETH_MspInit+0x188>)
 8003f9e:	f7fe fb85 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003faa:	2303      	movs	r3, #3
 8003fac:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	481e      	ldr	r0, [pc, #120]	; (8004030 <HAL_ETH_MspInit+0x188>)
 8003fb6:	f7fe fb79 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003fba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4819      	ldr	r0, [pc, #100]	; (8004034 <HAL_ETH_MspInit+0x18c>)
 8003fd0:	f7fe fb6c 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003fd4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4813      	ldr	r0, [pc, #76]	; (8004038 <HAL_ETH_MspInit+0x190>)
 8003fea:	f7fe fb5f 	bl	80026ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_ETH_ENABLE();
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_ETH_MspInit+0x194>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
 8004004:	4a0d      	ldr	r2, [pc, #52]	; (800403c <HAL_ETH_MspInit+0x194>)
 8004006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004008:	6053      	str	r3, [r2, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800400a:	2200      	movs	r2, #0
 800400c:	2100      	movs	r1, #0
 800400e:	203d      	movs	r0, #61	; 0x3d
 8004010:	f7fd f9c3 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004014:	203d      	movs	r0, #61	; 0x3d
 8004016:	f7fd f9dc 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800401a:	bf00      	nop
 800401c:	3738      	adds	r7, #56	; 0x38
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40028000 	.word	0x40028000
 8004028:	40021000 	.word	0x40021000
 800402c:	40011000 	.word	0x40011000
 8004030:	40010800 	.word	0x40010800
 8004034:	40010c00 	.word	0x40010c00
 8004038:	40011400 	.word	0x40011400
 800403c:	40010000 	.word	0x40010000

08004040 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004048:	4b41      	ldr	r3, [pc, #260]	; (8004150 <low_level_init+0x110>)
 800404a:	4a42      	ldr	r2, [pc, #264]	; (8004154 <low_level_init+0x114>)
 800404c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800404e:	4b40      	ldr	r3, [pc, #256]	; (8004150 <low_level_init+0x110>)
 8004050:	2201      	movs	r2, #1
 8004052:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004054:	4b3e      	ldr	r3, [pc, #248]	; (8004150 <low_level_init+0x110>)
 8004056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800405a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800405c:	4b3c      	ldr	r3, [pc, #240]	; (8004150 <low_level_init+0x110>)
 800405e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004062:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = PHY_USER_NAME_PHY_ADDRESS;
 8004064:	4b3a      	ldr	r3, [pc, #232]	; (8004150 <low_level_init+0x110>)
 8004066:	2201      	movs	r2, #1
 8004068:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800406a:	2300      	movs	r3, #0
 800406c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800406e:	2380      	movs	r3, #128	; 0x80
 8004070:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004072:	23e1      	movs	r3, #225	; 0xe1
 8004074:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004076:	2300      	movs	r3, #0
 8004078:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800407a:	2300      	movs	r3, #0
 800407c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800407e:	2300      	movs	r3, #0
 8004080:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004082:	4a33      	ldr	r2, [pc, #204]	; (8004150 <low_level_init+0x110>)
 8004084:	f107 0308 	add.w	r3, r7, #8
 8004088:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800408a:	4b31      	ldr	r3, [pc, #196]	; (8004150 <low_level_init+0x110>)
 800408c:	2200      	movs	r2, #0
 800408e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004090:	4b2f      	ldr	r3, [pc, #188]	; (8004150 <low_level_init+0x110>)
 8004092:	2200      	movs	r2, #0
 8004094:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004096:	4b2e      	ldr	r3, [pc, #184]	; (8004150 <low_level_init+0x110>)
 8004098:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800409c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800409e:	482c      	ldr	r0, [pc, #176]	; (8004150 <low_level_init+0x110>)
 80040a0:	f7fd f9b2 	bl	8001408 <HAL_ETH_Init>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]

  if (hal_eth_init_status == HAL_OK)
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <low_level_init+0x80>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80040c0:	2304      	movs	r3, #4
 80040c2:	4a25      	ldr	r2, [pc, #148]	; (8004158 <low_level_init+0x118>)
 80040c4:	4925      	ldr	r1, [pc, #148]	; (800415c <low_level_init+0x11c>)
 80040c6:	4822      	ldr	r0, [pc, #136]	; (8004150 <low_level_init+0x110>)
 80040c8:	f7fd fb0a 	bl	80016e0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80040cc:	2308      	movs	r3, #8
 80040ce:	4a24      	ldr	r2, [pc, #144]	; (8004160 <low_level_init+0x120>)
 80040d0:	4924      	ldr	r1, [pc, #144]	; (8004164 <low_level_init+0x124>)
 80040d2:	481f      	ldr	r0, [pc, #124]	; (8004150 <low_level_init+0x110>)
 80040d4:	f7fd fb6b 	bl	80017ae <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2206      	movs	r2, #6
 80040dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80040e0:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <low_level_init+0x110>)
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	781a      	ldrb	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80040ec:	4b18      	ldr	r3, [pc, #96]	; (8004150 <low_level_init+0x110>)
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	785a      	ldrb	r2, [r3, #1]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <low_level_init+0x110>)
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	789a      	ldrb	r2, [r3, #2]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <low_level_init+0x110>)
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	78da      	ldrb	r2, [r3, #3]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <low_level_init+0x110>)
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	791a      	ldrb	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <low_level_init+0x110>)
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	795a      	ldrb	r2, [r3, #5]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800412e:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004136:	f043 030a 	orr.w	r3, r3, #10
 800413a:	b2da      	uxtb	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004142:	4803      	ldr	r0, [pc, #12]	; (8004150 <low_level_init+0x110>)
 8004144:	f7fd fe56 	bl	8001df4 <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200049d0 	.word	0x200049d0
 8004154:	40028000 	.word	0x40028000
 8004158:	20003200 	.word	0x20003200
 800415c:	20000220 	.word	0x20000220
 8004160:	20000260 	.word	0x20000260
 8004164:	200001a0 	.word	0x200001a0

08004168 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004172:	4b4b      	ldr	r3, [pc, #300]	; (80042a0 <low_level_output+0x138>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800418a:	4b45      	ldr	r3, [pc, #276]	; (80042a0 <low_level_output+0x138>)
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	e05a      	b.n	8004250 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	da03      	bge.n	80041aa <low_level_output+0x42>
      {
        errval = ERR_USE;
 80041a2:	23f8      	movs	r3, #248	; 0xf8
 80041a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80041a8:	e05c      	b.n	8004264 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	895b      	ldrh	r3, [r3, #10]
 80041ae:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80041b4:	e02f      	b.n	8004216 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	18d0      	adds	r0, r2, r3
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	18d1      	adds	r1, r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80041ca:	3304      	adds	r3, #4
 80041cc:	461a      	mov	r2, r3
 80041ce:	f009 f997 	bl	800d500 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	da03      	bge.n	80041e8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80041e0:	23f8      	movs	r3, #248	; 0xf8
 80041e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80041e6:	e03d      	b.n	8004264 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80041f8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004204:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004210:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004220:	4293      	cmp	r3, r2
 8004222:	d8c8      	bhi.n	80041b6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	18d0      	adds	r0, r2, r3
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4413      	add	r3, r2
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4619      	mov	r1, r3
 8004236:	f009 f963 	bl	800d500 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	623b      	str	r3, [r7, #32]
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1a1      	bne.n	800419a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004256:	6979      	ldr	r1, [r7, #20]
 8004258:	4811      	ldr	r0, [pc, #68]	; (80042a0 <low_level_output+0x138>)
 800425a:	f7fd fb13 	bl	8001884 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <low_level_output+0x138>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <low_level_output+0x138>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800427e:	461a      	mov	r2, r3
 8004280:	2320      	movs	r3, #32
 8004282:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <low_level_output+0x138>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428c:	461a      	mov	r2, r3
 800428e:	2300      	movs	r3, #0
 8004290:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8004292:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004296:	4618      	mov	r0, r3
 8004298:	3728      	adds	r7, #40	; 0x28
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200049d0 	.word	0x200049d0

080042a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08c      	sub	sp, #48	; 0x30
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80042c8:	484e      	ldr	r0, [pc, #312]	; (8004404 <low_level_input+0x160>)
 80042ca:	f7fd fbc3 	bl	8001a54 <HAL_ETH_GetReceivedFrame>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <low_level_input+0x34>

    return NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e090      	b.n	80043fa <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80042d8:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <low_level_input+0x160>)
 80042da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042dc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80042de:	4b49      	ldr	r3, [pc, #292]	; (8004404 <low_level_input+0x160>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80042e4:	89fb      	ldrh	r3, [r7, #14]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d006      	beq.n	80042f8 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80042ea:	89fb      	ldrh	r3, [r7, #14]
 80042ec:	2203      	movs	r2, #3
 80042ee:	4619      	mov	r1, r3
 80042f0:	2004      	movs	r0, #4
 80042f2:	f000 ff1f 	bl	8005134 <pbuf_alloc>
 80042f6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d04b      	beq.n	8004396 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <low_level_input+0x160>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
 800430c:	e040      	b.n	8004390 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	895b      	ldrh	r3, [r3, #10]
 8004312:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004318:	e021      	b.n	800435e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	18d0      	adds	r0, r2, r3
 8004322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	18d1      	adds	r1, r2, r3
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800432e:	3304      	adds	r3, #4
 8004330:	461a      	mov	r2, r3
 8004332:	f009 f8e5 	bl	800d500 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	4413      	add	r3, r2
 8004348:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800434c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004358:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004368:	4293      	cmp	r3, r2
 800436a:	d8d6      	bhi.n	800431a <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	18d0      	adds	r0, r2, r3
 8004374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4619      	mov	r1, r3
 800437e:	f009 f8bf 	bl	800d500 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4413      	add	r3, r2
 8004388:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1bb      	bne.n	800430e <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <low_level_input+0x160>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	e00b      	b.n	80043ba <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	3301      	adds	r3, #1
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <low_level_input+0x160>)
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d3ee      	bcc.n	80043a2 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <low_level_input+0x160>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80043ca:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <low_level_input+0x160>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <low_level_input+0x160>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e4:	461a      	mov	r2, r3
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <low_level_input+0x160>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f2:	461a      	mov	r2, r3
 80043f4:	2300      	movs	r3, #0
 80043f6:	6093      	str	r3, [r2, #8]
  }
  return p;
 80043f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3730      	adds	r7, #48	; 0x30
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200049d0 	.word	0x200049d0

08004408 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff47 	bl	80042a4 <low_level_input>
 8004416:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d010      	beq.n	8004440 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	4798      	blx	r3
 8004428:	4603      	mov	r3, r0
 800442a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800442c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d006      	beq.n	8004442 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f001 f9f5 	bl	8005824 <pbuf_free>
    p = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e000      	b.n	8004442 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004440:	bf00      	nop
  }
}
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <ethernetif_init+0x1c>
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <ethernetif_init+0x48>)
 8004458:	f240 220e 	movw	r2, #526	; 0x20e
 800445c:	490d      	ldr	r1, [pc, #52]	; (8004494 <ethernetif_init+0x4c>)
 800445e:	480e      	ldr	r0, [pc, #56]	; (8004498 <ethernetif_init+0x50>)
 8004460:	f009 f940 	bl	800d6e4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2273      	movs	r2, #115	; 0x73
 8004468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2274      	movs	r2, #116	; 0x74
 8004470:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a09      	ldr	r2, [pc, #36]	; (800449c <ethernetif_init+0x54>)
 8004478:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <ethernetif_init+0x58>)
 800447e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fddd 	bl	8004040 <low_level_init>

  return ERR_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	0800e89c 	.word	0x0800e89c
 8004494:	0800e8b8 	.word	0x0800e8b8
 8004498:	0800e8c8 	.word	0x0800e8c8
 800449c:	0800b77d 	.word	0x0800b77d
 80044a0:	08004169 	.word	0x08004169

080044a4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044a8:	f7fc fe72 	bl	8001190 <HAL_GetTick>
 80044ac:	4603      	mov	r3, r0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d05d      	beq.n	8004592 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80044d6:	4b34      	ldr	r3, [pc, #208]	; (80045a8 <ethernetif_update_config+0xf4>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d03f      	beq.n	800455e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80044de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044e2:	2100      	movs	r1, #0
 80044e4:	4830      	ldr	r0, [pc, #192]	; (80045a8 <ethernetif_update_config+0xf4>)
 80044e6:	f7fd fc1f 	bl	8001d28 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80044ea:	f7fc fe51 	bl	8001190 <HAL_GetTick>
 80044ee:	4603      	mov	r3, r0
 80044f0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80044f2:	f107 0308 	add.w	r3, r7, #8
 80044f6:	461a      	mov	r2, r3
 80044f8:	2101      	movs	r1, #1
 80044fa:	482b      	ldr	r0, [pc, #172]	; (80045a8 <ethernetif_update_config+0xf4>)
 80044fc:	f7fd fbac 	bl	8001c58 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004500:	f7fc fe46 	bl	8001190 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800450e:	d828      	bhi.n	8004562 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0eb      	beq.n	80044f2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800451a:	f107 0308 	add.w	r3, r7, #8
 800451e:	461a      	mov	r2, r3
 8004520:	2110      	movs	r1, #16
 8004522:	4821      	ldr	r0, [pc, #132]	; (80045a8 <ethernetif_update_config+0xf4>)
 8004524:	f7fd fb98 	bl	8001c58 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <ethernetif_update_config+0xf4>)
 8004534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	e002      	b.n	8004542 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <ethernetif_update_config+0xf4>)
 800453e:	2200      	movs	r2, #0
 8004540:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800454c:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <ethernetif_update_config+0xf4>)
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
 8004552:	e016      	b.n	8004582 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <ethernetif_update_config+0xf4>)
 8004556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	e011      	b.n	8004582 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800455e:	bf00      	nop
 8004560:	e000      	b.n	8004564 <ethernetif_update_config+0xb0>
          goto error;
 8004562:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004564:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <ethernetif_update_config+0xf4>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	08db      	lsrs	r3, r3, #3
 800456a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800456c:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <ethernetif_update_config+0xf4>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004574:	4313      	orrs	r3, r2
 8004576:	b29b      	uxth	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	2100      	movs	r1, #0
 800457c:	480a      	ldr	r0, [pc, #40]	; (80045a8 <ethernetif_update_config+0xf4>)
 800457e:	f7fd fbd3 	bl	8001d28 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004582:	2100      	movs	r1, #0
 8004584:	4808      	ldr	r0, [pc, #32]	; (80045a8 <ethernetif_update_config+0xf4>)
 8004586:	f7fd fc93 	bl	8001eb0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800458a:	4807      	ldr	r0, [pc, #28]	; (80045a8 <ethernetif_update_config+0xf4>)
 800458c:	f7fd fc32 	bl	8001df4 <HAL_ETH_Start>
 8004590:	e002      	b.n	8004598 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004592:	4805      	ldr	r0, [pc, #20]	; (80045a8 <ethernetif_update_config+0xf4>)
 8004594:	f7fd fc5d 	bl	8001e52 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f807 	bl	80045ac <ethernetif_notify_conn_changed>
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200049d0 	.word	0x200049d0

080045ac <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	4603      	mov	r3, r0
 80045c6:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	ba5b      	rev16	r3, r3
 80045cc:	b29b      	uxth	r3, r3
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	061a      	lsls	r2, r3, #24
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	0e1b      	lsrs	r3, r3, #24
 80045fc:	4313      	orrs	r3, r2
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004612:	f000 f8a7 	bl	8004764 <mem_init>
  memp_init();
 8004616:	f000 fb37 	bl	8004c88 <memp_init>
  pbuf_init();
  netif_init();
 800461a:	f000 fbef 	bl	8004dfc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800461e:	f006 f8af 	bl	800a780 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004622:	f001 fc09 	bl	8005e38 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8004626:	f005 ff8d 	bl	800a544 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800463c:	4b40      	ldr	r3, [pc, #256]	; (8004740 <plug_holes+0x10c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d206      	bcs.n	8004654 <plug_holes+0x20>
 8004646:	4b3f      	ldr	r3, [pc, #252]	; (8004744 <plug_holes+0x110>)
 8004648:	f240 125d 	movw	r2, #349	; 0x15d
 800464c:	493e      	ldr	r1, [pc, #248]	; (8004748 <plug_holes+0x114>)
 800464e:	483f      	ldr	r0, [pc, #252]	; (800474c <plug_holes+0x118>)
 8004650:	f009 f848 	bl	800d6e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004654:	4b3e      	ldr	r3, [pc, #248]	; (8004750 <plug_holes+0x11c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	429a      	cmp	r2, r3
 800465c:	d306      	bcc.n	800466c <plug_holes+0x38>
 800465e:	4b39      	ldr	r3, [pc, #228]	; (8004744 <plug_holes+0x110>)
 8004660:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004664:	493b      	ldr	r1, [pc, #236]	; (8004754 <plug_holes+0x120>)
 8004666:	4839      	ldr	r0, [pc, #228]	; (800474c <plug_holes+0x118>)
 8004668:	f009 f83c 	bl	800d6e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	791b      	ldrb	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <plug_holes+0x4e>
 8004674:	4b33      	ldr	r3, [pc, #204]	; (8004744 <plug_holes+0x110>)
 8004676:	f240 125f 	movw	r2, #351	; 0x15f
 800467a:	4937      	ldr	r1, [pc, #220]	; (8004758 <plug_holes+0x124>)
 800467c:	4833      	ldr	r0, [pc, #204]	; (800474c <plug_holes+0x118>)
 800467e:	f009 f831 	bl	800d6e4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800468a:	d906      	bls.n	800469a <plug_holes+0x66>
 800468c:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <plug_holes+0x110>)
 800468e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8004692:	4932      	ldr	r1, [pc, #200]	; (800475c <plug_holes+0x128>)
 8004694:	482d      	ldr	r0, [pc, #180]	; (800474c <plug_holes+0x118>)
 8004696:	f009 f825 	bl	800d6e4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800469a:	4b29      	ldr	r3, [pc, #164]	; (8004740 <plug_holes+0x10c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	8812      	ldrh	r2, [r2, #0]
 80046a2:	4413      	add	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d01f      	beq.n	80046ee <plug_holes+0xba>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	791b      	ldrb	r3, [r3, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11b      	bne.n	80046ee <plug_holes+0xba>
 80046b6:	4b26      	ldr	r3, [pc, #152]	; (8004750 <plug_holes+0x11c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d016      	beq.n	80046ee <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <plug_holes+0x12c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d102      	bne.n	80046d0 <plug_holes+0x9c>
      lfree = mem;
 80046ca:	4a25      	ldr	r2, [pc, #148]	; (8004760 <plug_holes+0x12c>)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	881a      	ldrh	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80046d8:	4b19      	ldr	r3, [pc, #100]	; (8004740 <plug_holes+0x10c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	1ad1      	subs	r1, r2, r3
 80046e0:	4b17      	ldr	r3, [pc, #92]	; (8004740 <plug_holes+0x10c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	8812      	ldrh	r2, [r2, #0]
 80046e8:	4413      	add	r3, r2
 80046ea:	b28a      	uxth	r2, r1
 80046ec:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <plug_holes+0x10c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	8852      	ldrh	r2, [r2, #2]
 80046f6:	4413      	add	r3, r2
 80046f8:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d01a      	beq.n	8004738 <plug_holes+0x104>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	791b      	ldrb	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <plug_holes+0x12c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	d102      	bne.n	800471a <plug_holes+0xe6>
      lfree = pmem;
 8004714:	4a12      	ldr	r2, [pc, #72]	; (8004760 <plug_holes+0x12c>)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	881a      	ldrh	r2, [r3, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <plug_holes+0x10c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	1ad1      	subs	r1, r2, r3
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <plug_holes+0x10c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	8812      	ldrh	r2, [r2, #0]
 8004732:	4413      	add	r3, r2
 8004734:	b28a      	uxth	r2, r1
 8004736:	805a      	strh	r2, [r3, #2]
  }
}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	20007244 	.word	0x20007244
 8004744:	0800e8f0 	.word	0x0800e8f0
 8004748:	0800e920 	.word	0x0800e920
 800474c:	0800e938 	.word	0x0800e938
 8004750:	20007248 	.word	0x20007248
 8004754:	0800e960 	.word	0x0800e960
 8004758:	0800e97c 	.word	0x0800e97c
 800475c:	0800e998 	.word	0x0800e998
 8004760:	2000724c 	.word	0x2000724c

08004764 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800476a:	4b18      	ldr	r3, [pc, #96]	; (80047cc <mem_init+0x68>)
 800476c:	3303      	adds	r3, #3
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	461a      	mov	r2, r3
 8004774:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <mem_init+0x6c>)
 8004776:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <mem_init+0x6c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004784:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <mem_init+0x6c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800479a:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <mem_init+0x70>)
 800479c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800479e:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <mem_init+0x70>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <mem_init+0x70>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80047ae:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80047b0:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <mem_init+0x70>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80047b8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <mem_init+0x6c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a06      	ldr	r2, [pc, #24]	; (80047d8 <mem_init+0x74>)
 80047c0:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr
 80047cc:	20004a30 	.word	0x20004a30
 80047d0:	20007244 	.word	0x20007244
 80047d4:	20007248 	.word	0x20007248
 80047d8:	2000724c 	.word	0x2000724c

080047dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d043      	beq.n	8004872 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d006      	beq.n	8004802 <mem_free+0x26>
 80047f4:	4b22      	ldr	r3, [pc, #136]	; (8004880 <mem_free+0xa4>)
 80047f6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80047fa:	4922      	ldr	r1, [pc, #136]	; (8004884 <mem_free+0xa8>)
 80047fc:	4822      	ldr	r0, [pc, #136]	; (8004888 <mem_free+0xac>)
 80047fe:	f008 ff71 	bl	800d6e4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004802:	4b22      	ldr	r3, [pc, #136]	; (800488c <mem_free+0xb0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d304      	bcc.n	8004816 <mem_free+0x3a>
 800480c:	4b20      	ldr	r3, [pc, #128]	; (8004890 <mem_free+0xb4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d306      	bcc.n	8004824 <mem_free+0x48>
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <mem_free+0xa4>)
 8004818:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800481c:	491d      	ldr	r1, [pc, #116]	; (8004894 <mem_free+0xb8>)
 800481e:	481a      	ldr	r0, [pc, #104]	; (8004888 <mem_free+0xac>)
 8004820:	f008 ff60 	bl	800d6e4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004824:	4b19      	ldr	r3, [pc, #100]	; (800488c <mem_free+0xb0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d323      	bcc.n	8004876 <mem_free+0x9a>
 800482e:	4b18      	ldr	r3, [pc, #96]	; (8004890 <mem_free+0xb4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d21e      	bcs.n	8004876 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3b08      	subs	r3, #8
 800483c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	791b      	ldrb	r3, [r3, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <mem_free+0x78>
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <mem_free+0xa4>)
 8004848:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800484c:	4912      	ldr	r1, [pc, #72]	; (8004898 <mem_free+0xbc>)
 800484e:	480e      	ldr	r0, [pc, #56]	; (8004888 <mem_free+0xac>)
 8004850:	f008 ff48 	bl	800d6e4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800485a:	4b10      	ldr	r3, [pc, #64]	; (800489c <mem_free+0xc0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	429a      	cmp	r2, r3
 8004862:	d202      	bcs.n	800486a <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004864:	4a0d      	ldr	r2, [pc, #52]	; (800489c <mem_free+0xc0>)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f7ff fee2 	bl	8004634 <plug_holes>
 8004870:	e002      	b.n	8004878 <mem_free+0x9c>
    return;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <mem_free+0x9c>
    return;
 8004876:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	0800e8f0 	.word	0x0800e8f0
 8004884:	0800e9c4 	.word	0x0800e9c4
 8004888:	0800e938 	.word	0x0800e938
 800488c:	20007244 	.word	0x20007244
 8004890:	20007248 	.word	0x20007248
 8004894:	0800e9e8 	.word	0x0800e9e8
 8004898:	0800ea00 	.word	0x0800ea00
 800489c:	2000724c 	.word	0x2000724c

080048a0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80048ac:	887b      	ldrh	r3, [r7, #2]
 80048ae:	3303      	adds	r3, #3
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80048b8:	887b      	ldrh	r3, [r7, #2]
 80048ba:	2b0b      	cmp	r3, #11
 80048bc:	d801      	bhi.n	80048c2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80048be:	230c      	movs	r3, #12
 80048c0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80048c2:	887b      	ldrh	r3, [r7, #2]
 80048c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80048c8:	d901      	bls.n	80048ce <mem_trim+0x2e>
    return NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e0b1      	b.n	8004a32 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80048ce:	4b5b      	ldr	r3, [pc, #364]	; (8004a3c <mem_trim+0x19c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d304      	bcc.n	80048e2 <mem_trim+0x42>
 80048d8:	4b59      	ldr	r3, [pc, #356]	; (8004a40 <mem_trim+0x1a0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d306      	bcc.n	80048f0 <mem_trim+0x50>
 80048e2:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <mem_trim+0x1a4>)
 80048e4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80048e8:	4957      	ldr	r1, [pc, #348]	; (8004a48 <mem_trim+0x1a8>)
 80048ea:	4858      	ldr	r0, [pc, #352]	; (8004a4c <mem_trim+0x1ac>)
 80048ec:	f008 fefa 	bl	800d6e4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80048f0:	4b52      	ldr	r3, [pc, #328]	; (8004a3c <mem_trim+0x19c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d304      	bcc.n	8004904 <mem_trim+0x64>
 80048fa:	4b51      	ldr	r3, [pc, #324]	; (8004a40 <mem_trim+0x1a0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	429a      	cmp	r2, r3
 8004902:	d301      	bcc.n	8004908 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	e094      	b.n	8004a32 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3b08      	subs	r3, #8
 800490c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800490e:	4b4b      	ldr	r3, [pc, #300]	; (8004a3c <mem_trim+0x19c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	881a      	ldrh	r2, [r3, #0]
 800491c:	8a7b      	ldrh	r3, [r7, #18]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b08      	subs	r3, #8
 8004924:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004926:	887a      	ldrh	r2, [r7, #2]
 8004928:	8a3b      	ldrh	r3, [r7, #16]
 800492a:	429a      	cmp	r2, r3
 800492c:	d906      	bls.n	800493c <mem_trim+0x9c>
 800492e:	4b45      	ldr	r3, [pc, #276]	; (8004a44 <mem_trim+0x1a4>)
 8004930:	f240 2206 	movw	r2, #518	; 0x206
 8004934:	4946      	ldr	r1, [pc, #280]	; (8004a50 <mem_trim+0x1b0>)
 8004936:	4845      	ldr	r0, [pc, #276]	; (8004a4c <mem_trim+0x1ac>)
 8004938:	f008 fed4 	bl	800d6e4 <iprintf>
  if (newsize > size) {
 800493c:	887a      	ldrh	r2, [r7, #2]
 800493e:	8a3b      	ldrh	r3, [r7, #16]
 8004940:	429a      	cmp	r2, r3
 8004942:	d901      	bls.n	8004948 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	e074      	b.n	8004a32 <mem_trim+0x192>
  }
  if (newsize == size) {
 8004948:	887a      	ldrh	r2, [r7, #2]
 800494a:	8a3b      	ldrh	r3, [r7, #16]
 800494c:	429a      	cmp	r2, r3
 800494e:	d101      	bne.n	8004954 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	e06e      	b.n	8004a32 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004954:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <mem_trim+0x19c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	8812      	ldrh	r2, [r2, #0]
 800495c:	4413      	add	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	791b      	ldrb	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d131      	bne.n	80049cc <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800496e:	8a7a      	ldrh	r2, [r7, #18]
 8004970:	887b      	ldrh	r3, [r7, #2]
 8004972:	4413      	add	r3, r2
 8004974:	b29b      	uxth	r3, r3
 8004976:	3308      	adds	r3, #8
 8004978:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800497a:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <mem_trim+0x1b4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	429a      	cmp	r2, r3
 8004982:	d105      	bne.n	8004990 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004984:	4b2d      	ldr	r3, [pc, #180]	; (8004a3c <mem_trim+0x19c>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	897b      	ldrh	r3, [r7, #10]
 800498a:	4413      	add	r3, r2
 800498c:	4a31      	ldr	r2, [pc, #196]	; (8004a54 <mem_trim+0x1b4>)
 800498e:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004990:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <mem_trim+0x19c>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	897b      	ldrh	r3, [r7, #10]
 8004996:	4413      	add	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	893a      	ldrh	r2, [r7, #8]
 80049a4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8a7a      	ldrh	r2, [r7, #18]
 80049aa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	897a      	ldrh	r2, [r7, #10]
 80049b0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80049ba:	d039      	beq.n	8004a30 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80049bc:	4b1f      	ldr	r3, [pc, #124]	; (8004a3c <mem_trim+0x19c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	8812      	ldrh	r2, [r2, #0]
 80049c4:	4413      	add	r3, r2
 80049c6:	897a      	ldrh	r2, [r7, #10]
 80049c8:	805a      	strh	r2, [r3, #2]
 80049ca:	e031      	b.n	8004a30 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	f103 0214 	add.w	r2, r3, #20
 80049d2:	8a3b      	ldrh	r3, [r7, #16]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d82b      	bhi.n	8004a30 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80049d8:	8a7a      	ldrh	r2, [r7, #18]
 80049da:	887b      	ldrh	r3, [r7, #2]
 80049dc:	4413      	add	r3, r2
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3308      	adds	r3, #8
 80049e2:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80049e4:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <mem_trim+0x19c>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	897b      	ldrh	r3, [r7, #10]
 80049ea:	4413      	add	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 80049ee:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <mem_trim+0x1b4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d202      	bcs.n	80049fe <mem_trim+0x15e>
      lfree = mem2;
 80049f8:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <mem_trim+0x1b4>)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	881a      	ldrh	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8a7a      	ldrh	r2, [r7, #18]
 8004a10:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	897a      	ldrh	r2, [r7, #10]
 8004a16:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004a20:	d006      	beq.n	8004a30 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <mem_trim+0x19c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	8812      	ldrh	r2, [r2, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	897a      	ldrh	r2, [r7, #10]
 8004a2e:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004a30:	687b      	ldr	r3, [r7, #4]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20007244 	.word	0x20007244
 8004a40:	20007248 	.word	0x20007248
 8004a44:	0800e8f0 	.word	0x0800e8f0
 8004a48:	0800ea14 	.word	0x0800ea14
 8004a4c:	0800e938 	.word	0x0800e938
 8004a50:	0800ea2c 	.word	0x0800ea2c
 8004a54:	2000724c 	.word	0x2000724c

08004a58 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <mem_malloc+0x14>
    return NULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e0c7      	b.n	8004bfc <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	3303      	adds	r3, #3
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	2b0b      	cmp	r3, #11
 8004a7c:	d801      	bhi.n	8004a82 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004a7e:	230c      	movs	r3, #12
 8004a80:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004a88:	d901      	bls.n	8004a8e <mem_malloc+0x36>
    return NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e0b6      	b.n	8004bfc <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004a8e:	4b5d      	ldr	r3, [pc, #372]	; (8004c04 <mem_malloc+0x1ac>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b5d      	ldr	r3, [pc, #372]	; (8004c08 <mem_malloc+0x1b0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	83fb      	strh	r3, [r7, #30]
 8004a9a:	e0a7      	b.n	8004bec <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004a9c:	4b5a      	ldr	r3, [pc, #360]	; (8004c08 <mem_malloc+0x1b0>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	8bfb      	ldrh	r3, [r7, #30]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	791b      	ldrb	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 8098 	bne.w	8004be0 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	8bfb      	ldrh	r3, [r7, #30]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f1a3 0208 	sub.w	r2, r3, #8
 8004abe:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	f0c0 808d 	bcc.w	8004be0 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	8bfb      	ldrh	r3, [r7, #30]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f1a3 0208 	sub.w	r2, r3, #8
 8004ad4:	88fb      	ldrh	r3, [r7, #6]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d327      	bcc.n	8004b2c <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004adc:	8bfa      	ldrh	r2, [r7, #30]
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004ae8:	4b47      	ldr	r3, [pc, #284]	; (8004c08 <mem_malloc+0x1b0>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	8a7b      	ldrh	r3, [r7, #18]
 8004aee:	4413      	add	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	881a      	ldrh	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8bfa      	ldrh	r2, [r7, #30]
 8004b04:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	8a7a      	ldrh	r2, [r7, #18]
 8004b0a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004b1a:	d00a      	beq.n	8004b32 <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004b1c:	4b3a      	ldr	r3, [pc, #232]	; (8004c08 <mem_malloc+0x1b0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	8812      	ldrh	r2, [r2, #0]
 8004b24:	4413      	add	r3, r2
 8004b26:	8a7a      	ldrh	r2, [r7, #18]
 8004b28:	805a      	strh	r2, [r3, #2]
 8004b2a:	e002      	b.n	8004b32 <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004b32:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <mem_malloc+0x1ac>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d127      	bne.n	8004b8c <mem_malloc+0x134>
          struct mem *cur = lfree;
 8004b3c:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <mem_malloc+0x1ac>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004b42:	e005      	b.n	8004b50 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8004b44:	4b30      	ldr	r3, [pc, #192]	; (8004c08 <mem_malloc+0x1b0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	8812      	ldrh	r2, [r2, #0]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	791b      	ldrb	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d004      	beq.n	8004b62 <mem_malloc+0x10a>
 8004b58:	4b2c      	ldr	r3, [pc, #176]	; (8004c0c <mem_malloc+0x1b4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d1f0      	bne.n	8004b44 <mem_malloc+0xec>
          }
          lfree = cur;
 8004b62:	4a28      	ldr	r2, [pc, #160]	; (8004c04 <mem_malloc+0x1ac>)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004b68:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <mem_malloc+0x1ac>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <mem_malloc+0x1b4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d00b      	beq.n	8004b8c <mem_malloc+0x134>
 8004b74:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <mem_malloc+0x1ac>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	791b      	ldrb	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d006      	beq.n	8004b8c <mem_malloc+0x134>
 8004b7e:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <mem_malloc+0x1b8>)
 8004b80:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004b84:	4923      	ldr	r1, [pc, #140]	; (8004c14 <mem_malloc+0x1bc>)
 8004b86:	4824      	ldr	r0, [pc, #144]	; (8004c18 <mem_malloc+0x1c0>)
 8004b88:	f008 fdac 	bl	800d6e4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	4413      	add	r3, r2
 8004b92:	3308      	adds	r3, #8
 8004b94:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <mem_malloc+0x1b4>)
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d906      	bls.n	8004baa <mem_malloc+0x152>
 8004b9c:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <mem_malloc+0x1b8>)
 8004b9e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8004ba2:	491e      	ldr	r1, [pc, #120]	; (8004c1c <mem_malloc+0x1c4>)
 8004ba4:	481c      	ldr	r0, [pc, #112]	; (8004c18 <mem_malloc+0x1c0>)
 8004ba6:	f008 fd9d 	bl	800d6e4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d006      	beq.n	8004bc2 <mem_malloc+0x16a>
 8004bb4:	4b16      	ldr	r3, [pc, #88]	; (8004c10 <mem_malloc+0x1b8>)
 8004bb6:	f240 22d5 	movw	r2, #725	; 0x2d5
 8004bba:	4919      	ldr	r1, [pc, #100]	; (8004c20 <mem_malloc+0x1c8>)
 8004bbc:	4816      	ldr	r0, [pc, #88]	; (8004c18 <mem_malloc+0x1c0>)
 8004bbe:	f008 fd91 	bl	800d6e4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d006      	beq.n	8004bda <mem_malloc+0x182>
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <mem_malloc+0x1b8>)
 8004bce:	f240 22d7 	movw	r2, #727	; 0x2d7
 8004bd2:	4914      	ldr	r1, [pc, #80]	; (8004c24 <mem_malloc+0x1cc>)
 8004bd4:	4810      	ldr	r0, [pc, #64]	; (8004c18 <mem_malloc+0x1c0>)
 8004bd6:	f008 fd85 	bl	800d6e4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	3308      	adds	r3, #8
 8004bde:	e00d      	b.n	8004bfc <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <mem_malloc+0x1b0>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	8bfb      	ldrh	r3, [r7, #30]
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004bec:	8bfa      	ldrh	r2, [r7, #30]
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	f4ff af51 	bcc.w	8004a9c <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	2000724c 	.word	0x2000724c
 8004c08:	20007244 	.word	0x20007244
 8004c0c:	20007248 	.word	0x20007248
 8004c10:	0800e8f0 	.word	0x0800e8f0
 8004c14:	0800ea4c 	.word	0x0800ea4c
 8004c18:	0800e938 	.word	0x0800e938
 8004c1c:	0800ea68 	.word	0x0800ea68
 8004c20:	0800ea98 	.word	0x0800ea98
 8004c24:	0800eac8 	.word	0x0800eac8

08004c28 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	3303      	adds	r3, #3
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e011      	b.n	8004c6e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4413      	add	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	885b      	ldrh	r3, [r3, #2]
 8004c72:	461a      	mov	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4293      	cmp	r3, r2
 8004c78:	dbe7      	blt.n	8004c4a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
	...

08004c88 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004c8e:	2300      	movs	r3, #0
 8004c90:	80fb      	strh	r3, [r7, #6]
 8004c92:	e009      	b.n	8004ca8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	4a08      	ldr	r2, [pc, #32]	; (8004cb8 <memp_init+0x30>)
 8004c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff ffc3 	bl	8004c28 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	80fb      	strh	r3, [r7, #6]
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d9f2      	bls.n	8004c94 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004cae:	bf00      	nop
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	080105d8 	.word	0x080105d8

08004cbc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d012      	beq.n	8004cf8 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d006      	beq.n	8004cf4 <do_memp_malloc_pool+0x38>
 8004ce6:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <do_memp_malloc_pool+0x48>)
 8004ce8:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8004cec:	4906      	ldr	r1, [pc, #24]	; (8004d08 <do_memp_malloc_pool+0x4c>)
 8004cee:	4807      	ldr	r0, [pc, #28]	; (8004d0c <do_memp_malloc_pool+0x50>)
 8004cf0:	f008 fcf8 	bl	800d6e4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	e000      	b.n	8004cfa <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	0800eaec 	.word	0x0800eaec
 8004d08:	0800eb1c 	.word	0x0800eb1c
 8004d0c:	0800eb40 	.word	0x0800eb40

08004d10 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d908      	bls.n	8004d32 <memp_malloc+0x22>
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <memp_malloc+0x3c>)
 8004d22:	f240 1287 	movw	r2, #391	; 0x187
 8004d26:	490a      	ldr	r1, [pc, #40]	; (8004d50 <memp_malloc+0x40>)
 8004d28:	480a      	ldr	r0, [pc, #40]	; (8004d54 <memp_malloc+0x44>)
 8004d2a:	f008 fcdb 	bl	800d6e4 <iprintf>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e008      	b.n	8004d44 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <memp_malloc+0x48>)
 8004d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff ffbe 	bl	8004cbc <do_memp_malloc_pool>
 8004d40:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	0800eaec 	.word	0x0800eaec
 8004d50:	0800eb7c 	.word	0x0800eb7c
 8004d54:	0800eb40 	.word	0x0800eb40
 8004d58:	080105d8 	.word	0x080105d8

08004d5c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d006      	beq.n	8004d7e <do_memp_free_pool+0x22>
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <do_memp_free_pool+0x40>)
 8004d72:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8004d76:	490a      	ldr	r1, [pc, #40]	; (8004da0 <do_memp_free_pool+0x44>)
 8004d78:	480a      	ldr	r0, [pc, #40]	; (8004da4 <do_memp_free_pool+0x48>)
 8004d7a:	f008 fcb3 	bl	800d6e4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	0800eaec 	.word	0x0800eaec
 8004da0:	0800eb9c 	.word	0x0800eb9c
 8004da4:	0800eb40 	.word	0x0800eb40

08004da8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	6039      	str	r1, [r7, #0]
 8004db2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d907      	bls.n	8004dca <memp_free+0x22>
 8004dba:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <memp_free+0x44>)
 8004dbc:	f240 12db 	movw	r2, #475	; 0x1db
 8004dc0:	490b      	ldr	r1, [pc, #44]	; (8004df0 <memp_free+0x48>)
 8004dc2:	480c      	ldr	r0, [pc, #48]	; (8004df4 <memp_free+0x4c>)
 8004dc4:	f008 fc8e 	bl	800d6e4 <iprintf>
 8004dc8:	e00c      	b.n	8004de4 <memp_free+0x3c>

  if (mem == NULL) {
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <memp_free+0x50>)
 8004dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff ffbe 	bl	8004d5c <do_memp_free_pool>
 8004de0:	e000      	b.n	8004de4 <memp_free+0x3c>
    return;
 8004de2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	0800eaec 	.word	0x0800eaec
 8004df0:	0800ebbc 	.word	0x0800ebbc
 8004df4:	0800eb40 	.word	0x0800eb40
 8004df8:	080105d8 	.word	0x080105d8

08004dfc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <netif_add+0x20>
 8004e1c:	4b21      	ldr	r3, [pc, #132]	; (8004ea4 <netif_add+0x9c>)
 8004e1e:	22fb      	movs	r2, #251	; 0xfb
 8004e20:	4921      	ldr	r1, [pc, #132]	; (8004ea8 <netif_add+0xa0>)
 8004e22:	4822      	ldr	r0, [pc, #136]	; (8004eac <netif_add+0xa4>)
 8004e24:	f008 fc5e 	bl	800d6e4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2203      	movs	r2, #3
 8004e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <netif_add+0xa8>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	b2d1      	uxtb	r1, r2
 8004e5e:	4a14      	ldr	r2, [pc, #80]	; (8004eb0 <netif_add+0xa8>)
 8004e60:	7011      	strb	r1, [r2, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a3a      	ldr	r2, [r7, #32]
 8004e6c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f81f 	bl	8004eb8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	4798      	blx	r3
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <netif_add+0x82>
    return NULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e007      	b.n	8004e9a <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <netif_add+0xac>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004e92:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <netif_add+0xac>)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8004e98:	68fb      	ldr	r3, [r7, #12]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	0800ebd8 	.word	0x0800ebd8
 8004ea8:	0800ec0c 	.word	0x0800ec0c
 8004eac:	0800ec24 	.word	0x0800ec24
 8004eb0:	2000a130 	.word	0x2000a130
 8004eb4:	2000a128 	.word	0x2000a128

08004eb8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <netif_set_addr+0x1c>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10c      	bne.n	8004eee <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f81a 	bl	8004f10 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f861 	bl	8004fa6 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f84a 	bl	8004f80 <netif_set_gw>
 8004eec:	e00c      	b.n	8004f08 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f858 	bl	8004fa6 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f841 	bl	8004f80 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f805 	bl	8004f10 <netif_set_ipaddr>
  }
}
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <netif_set_ipaddr+0x18>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e002      	b.n	8004f2e <netif_set_ipaddr+0x1e>
 8004f28:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <netif_set_ipaddr+0x6c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d01c      	beq.n	8004f74 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	f107 020c 	add.w	r2, r7, #12
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f002 f90b 	bl	8007160 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	f107 020c 	add.w	r2, r7, #12
 8004f52:	4611      	mov	r1, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f005 ffc3 	bl	800aee0 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <netif_set_ipaddr+0x56>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	e000      	b.n	8004f68 <netif_set_ipaddr+0x58>
 8004f66:	2300      	movs	r3, #0
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f85d 	bl	800502e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	0801063c 	.word	0x0801063c

08004f80 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <netif_set_gw+0x16>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	e000      	b.n	8004f98 <netif_set_gw+0x18>
 8004f96:	2300      	movs	r3, #0
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr

08004fa6 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <netif_set_netmask+0x16>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	e000      	b.n	8004fbe <netif_set_netmask+0x18>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004fd4:	4a03      	ldr	r2, [pc, #12]	; (8004fe4 <netif_set_default+0x18>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	2000a12c 	.word	0x2000a12c

08004fe8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d113      	bne.n	8005026 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	b2da      	uxtb	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800501e:	2103      	movs	r1, #3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f804 	bl	800502e <netif_issue_reports>
    }
  }
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	460b      	mov	r3, r1
 8005038:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d011      	beq.n	8005068 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3304      	adds	r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f006 fe6e 	bl	800bd44 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d012      	beq.n	80050ac <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f006 fa12 	bl	800b4d0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  if (netif) {
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	61da      	str	r2, [r3, #28]
  }
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80050da:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <pbuf_free_ooseq+0x40>)
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <pbuf_free_ooseq+0x44>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	e00f      	b.n	8005108 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 fd70 	bl	8006bda <tcp_segs_free>
      pcb->ooseq = NULL;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8005100:	e005      	b.n	800510e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1ec      	bne.n	80050e8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	2000a131 	.word	0x2000a131
 8005118:	2000a140 	.word	0x2000a140

0800511c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005120:	4b03      	ldr	r3, [pc, #12]	; (8005130 <pbuf_pool_is_empty+0x14>)
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005126:	bf00      	nop
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	2000a131 	.word	0x2000a131

08005134 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	71fb      	strb	r3, [r7, #7]
 800513e:	460b      	mov	r3, r1
 8005140:	80bb      	strh	r3, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d81c      	bhi.n	8005186 <pbuf_alloc+0x52>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <pbuf_alloc+0x20>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005169 	.word	0x08005169
 8005158:	0800516f 	.word	0x0800516f
 800515c:	08005175 	.word	0x08005175
 8005160:	0800517b 	.word	0x0800517b
 8005164:	08005181 	.word	0x08005181
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005168:	2336      	movs	r3, #54	; 0x36
 800516a:	82fb      	strh	r3, [r7, #22]
    break;
 800516c:	e014      	b.n	8005198 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800516e:	2322      	movs	r3, #34	; 0x22
 8005170:	82fb      	strh	r3, [r7, #22]
    break;
 8005172:	e011      	b.n	8005198 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005174:	230e      	movs	r3, #14
 8005176:	82fb      	strh	r3, [r7, #22]
    break;
 8005178:	e00e      	b.n	8005198 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800517a:	2300      	movs	r3, #0
 800517c:	82fb      	strh	r3, [r7, #22]
    break;
 800517e:	e00b      	b.n	8005198 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	82fb      	strh	r3, [r7, #22]
    break;
 8005184:	e008      	b.n	8005198 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8005186:	4ba1      	ldr	r3, [pc, #644]	; (800540c <pbuf_alloc+0x2d8>)
 8005188:	f44f 728b 	mov.w	r2, #278	; 0x116
 800518c:	49a0      	ldr	r1, [pc, #640]	; (8005410 <pbuf_alloc+0x2dc>)
 800518e:	48a1      	ldr	r0, [pc, #644]	; (8005414 <pbuf_alloc+0x2e0>)
 8005190:	f008 faa8 	bl	800d6e4 <iprintf>
    return NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	e15c      	b.n	8005452 <pbuf_alloc+0x31e>
  }

  switch (type) {
 8005198:	79bb      	ldrb	r3, [r7, #6]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d00d      	beq.n	80051ba <pbuf_alloc+0x86>
 800519e:	2b03      	cmp	r3, #3
 80051a0:	f300 8146 	bgt.w	8005430 <pbuf_alloc+0x2fc>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80d0 	beq.w	800534a <pbuf_alloc+0x216>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f2c0 8140 	blt.w	8005430 <pbuf_alloc+0x2fc>
 80051b0:	3b01      	subs	r3, #1
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	f200 813c 	bhi.w	8005430 <pbuf_alloc+0x2fc>
 80051b8:	e10d      	b.n	80053d6 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80051ba:	2008      	movs	r0, #8
 80051bc:	f7ff fda8 	bl	8004d10 <memp_malloc>
 80051c0:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d103      	bne.n	80051d0 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 80051c8:	f7ff ffa8 	bl	800511c <pbuf_pool_is_empty>
      return NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e140      	b.n	8005452 <pbuf_alloc+0x31e>
    }
    p->type = type;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	79ba      	ldrb	r2, [r7, #6]
 80051d4:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80051dc:	8afb      	ldrh	r3, [r7, #22]
 80051de:	3310      	adds	r3, #16
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	3303      	adds	r3, #3
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	461a      	mov	r2, r3
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d006      	beq.n	800520a <pbuf_alloc+0xd6>
 80051fc:	4b83      	ldr	r3, [pc, #524]	; (800540c <pbuf_alloc+0x2d8>)
 80051fe:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005202:	4985      	ldr	r1, [pc, #532]	; (8005418 <pbuf_alloc+0x2e4>)
 8005204:	4883      	ldr	r0, [pc, #524]	; (8005414 <pbuf_alloc+0x2e0>)
 8005206:	f008 fa6d 	bl	800d6e4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	88ba      	ldrh	r2, [r7, #4]
 800520e:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005210:	8afb      	ldrh	r3, [r7, #22]
 8005212:	3303      	adds	r3, #3
 8005214:	f023 0303 	bic.w	r3, r3, #3
 8005218:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800521c:	88bb      	ldrh	r3, [r7, #4]
 800521e:	4293      	cmp	r3, r2
 8005220:	bf28      	it	cs
 8005222:	4613      	movcs	r3, r2
 8005224:	b29a      	uxth	r2, r3
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	8952      	ldrh	r2, [r2, #10]
 8005232:	441a      	add	r2, r3
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800523a:	429a      	cmp	r2, r3
 800523c:	d906      	bls.n	800524c <pbuf_alloc+0x118>
 800523e:	4b73      	ldr	r3, [pc, #460]	; (800540c <pbuf_alloc+0x2d8>)
 8005240:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8005244:	4975      	ldr	r1, [pc, #468]	; (800541c <pbuf_alloc+0x2e8>)
 8005246:	4873      	ldr	r0, [pc, #460]	; (8005414 <pbuf_alloc+0x2e0>)
 8005248:	f008 fa4c 	bl	800d6e4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800524c:	8afb      	ldrh	r3, [r7, #22]
 800524e:	3303      	adds	r3, #3
 8005250:	f023 0303 	bic.w	r3, r3, #3
 8005254:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005258:	d106      	bne.n	8005268 <pbuf_alloc+0x134>
 800525a:	4b6c      	ldr	r3, [pc, #432]	; (800540c <pbuf_alloc+0x2d8>)
 800525c:	f240 1231 	movw	r2, #305	; 0x131
 8005260:	496f      	ldr	r1, [pc, #444]	; (8005420 <pbuf_alloc+0x2ec>)
 8005262:	486c      	ldr	r0, [pc, #432]	; (8005414 <pbuf_alloc+0x2e0>)
 8005264:	f008 fa3e 	bl	800d6e4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	2201      	movs	r2, #1
 800526c:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8005272:	88bb      	ldrh	r3, [r7, #4]
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	8952      	ldrh	r2, [r2, #10]
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800527c:	e061      	b.n	8005342 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800527e:	2008      	movs	r0, #8
 8005280:	f7ff fd46 	bl	8004d10 <memp_malloc>
 8005284:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800528c:	f7ff ff46 	bl	800511c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8005290:	69f8      	ldr	r0, [r7, #28]
 8005292:	f000 fac7 	bl	8005824 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	e0db      	b.n	8005452 <pbuf_alloc+0x31e>
      }
      q->type = type;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	79ba      	ldrb	r2, [r7, #6]
 800529e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80052b8:	4293      	cmp	r3, r2
 80052ba:	dd06      	ble.n	80052ca <pbuf_alloc+0x196>
 80052bc:	4b53      	ldr	r3, [pc, #332]	; (800540c <pbuf_alloc+0x2d8>)
 80052be:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80052c2:	4958      	ldr	r1, [pc, #352]	; (8005424 <pbuf_alloc+0x2f0>)
 80052c4:	4853      	ldr	r0, [pc, #332]	; (8005414 <pbuf_alloc+0x2e0>)
 80052c6:	f008 fa0d 	bl	800d6e4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80052da:	bf28      	it	cs
 80052dc:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f103 0210 	add.w	r2, r3, #16
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d006      	beq.n	800530a <pbuf_alloc+0x1d6>
 80052fc:	4b43      	ldr	r3, [pc, #268]	; (800540c <pbuf_alloc+0x2d8>)
 80052fe:	f240 1251 	movw	r2, #337	; 0x151
 8005302:	4949      	ldr	r1, [pc, #292]	; (8005428 <pbuf_alloc+0x2f4>)
 8005304:	4843      	ldr	r0, [pc, #268]	; (8005414 <pbuf_alloc+0x2e0>)
 8005306:	f008 f9ed 	bl	800d6e4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	8952      	ldrh	r2, [r2, #10]
 8005312:	441a      	add	r2, r3
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800531a:	429a      	cmp	r2, r3
 800531c:	d906      	bls.n	800532c <pbuf_alloc+0x1f8>
 800531e:	4b3b      	ldr	r3, [pc, #236]	; (800540c <pbuf_alloc+0x2d8>)
 8005320:	f240 1253 	movw	r2, #339	; 0x153
 8005324:	493d      	ldr	r1, [pc, #244]	; (800541c <pbuf_alloc+0x2e8>)
 8005326:	483b      	ldr	r0, [pc, #236]	; (8005414 <pbuf_alloc+0x2e0>)
 8005328:	f008 f9dc 	bl	800d6e4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	895b      	ldrh	r3, [r3, #10]
 8005336:	461a      	mov	r2, r3
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	dc9a      	bgt.n	800527e <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8005348:	e07c      	b.n	8005444 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800534a:	8afb      	ldrh	r3, [r7, #22]
 800534c:	3313      	adds	r3, #19
 800534e:	b29b      	uxth	r3, r3
 8005350:	f023 0303 	bic.w	r3, r3, #3
 8005354:	b29a      	uxth	r2, r3
 8005356:	88bb      	ldrh	r3, [r7, #4]
 8005358:	3303      	adds	r3, #3
 800535a:	b29b      	uxth	r3, r3
 800535c:	f023 0303 	bic.w	r3, r3, #3
 8005360:	b29b      	uxth	r3, r3
 8005362:	4413      	add	r3, r2
 8005364:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8005366:	897a      	ldrh	r2, [r7, #10]
 8005368:	88bb      	ldrh	r3, [r7, #4]
 800536a:	3303      	adds	r3, #3
 800536c:	f023 0303 	bic.w	r3, r3, #3
 8005370:	429a      	cmp	r2, r3
 8005372:	d201      	bcs.n	8005378 <pbuf_alloc+0x244>
        return NULL;
 8005374:	2300      	movs	r3, #0
 8005376:	e06c      	b.n	8005452 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8005378:	897b      	ldrh	r3, [r7, #10]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fb6c 	bl	8004a58 <mem_malloc>
 8005380:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <pbuf_alloc+0x258>
      return NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	e062      	b.n	8005452 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800538c:	8afb      	ldrh	r3, [r7, #22]
 800538e:	3310      	adds	r3, #16
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	3303      	adds	r3, #3
 8005396:	f023 0303 	bic.w	r3, r3, #3
 800539a:	461a      	mov	r2, r3
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	88ba      	ldrh	r2, [r7, #4]
 80053a4:	811a      	strh	r2, [r3, #8]
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	891a      	ldrh	r2, [r3, #8]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
    p->type = type;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	79ba      	ldrb	r2, [r7, #6]
 80053b8:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d03d      	beq.n	8005442 <pbuf_alloc+0x30e>
 80053c6:	4b11      	ldr	r3, [pc, #68]	; (800540c <pbuf_alloc+0x2d8>)
 80053c8:	f44f 72bb 	mov.w	r2, #374	; 0x176
 80053cc:	4917      	ldr	r1, [pc, #92]	; (800542c <pbuf_alloc+0x2f8>)
 80053ce:	4811      	ldr	r0, [pc, #68]	; (8005414 <pbuf_alloc+0x2e0>)
 80053d0:	f008 f988 	bl	800d6e4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80053d4:	e035      	b.n	8005442 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80053d6:	2007      	movs	r0, #7
 80053d8:	f7ff fc9a 	bl	8004d10 <memp_malloc>
 80053dc:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e034      	b.n	8005452 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2200      	movs	r2, #0
 80053ec:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	88ba      	ldrh	r2, [r7, #4]
 80053f2:	811a      	strh	r2, [r3, #8]
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	891a      	ldrh	r2, [r3, #8]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
    p->type = type;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	79ba      	ldrb	r2, [r7, #6]
 8005406:	731a      	strb	r2, [r3, #12]
    break;
 8005408:	e01c      	b.n	8005444 <pbuf_alloc+0x310>
 800540a:	bf00      	nop
 800540c:	0800ec4c 	.word	0x0800ec4c
 8005410:	0800ec7c 	.word	0x0800ec7c
 8005414:	0800ec98 	.word	0x0800ec98
 8005418:	0800ecc0 	.word	0x0800ecc0
 800541c:	0800ecf0 	.word	0x0800ecf0
 8005420:	0800ed24 	.word	0x0800ed24
 8005424:	0800ed58 	.word	0x0800ed58
 8005428:	0800ed6c 	.word	0x0800ed6c
 800542c:	0800ed9c 	.word	0x0800ed9c
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <pbuf_alloc+0x328>)
 8005432:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005436:	490a      	ldr	r1, [pc, #40]	; (8005460 <pbuf_alloc+0x32c>)
 8005438:	480a      	ldr	r0, [pc, #40]	; (8005464 <pbuf_alloc+0x330>)
 800543a:	f008 f953 	bl	800d6e4 <iprintf>
    return NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	e007      	b.n	8005452 <pbuf_alloc+0x31e>
    break;
 8005442:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2201      	movs	r2, #1
 8005448:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2200      	movs	r2, #0
 800544e:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005450:	69fb      	ldr	r3, [r7, #28]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	0800ec4c 	.word	0x0800ec4c
 8005460:	0800edc8 	.word	0x0800edc8
 8005464:	0800ec98 	.word	0x0800ec98

08005468 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4603      	mov	r3, r0
 8005472:	71fb      	strb	r3, [r7, #7]
 8005474:	460b      	mov	r3, r1
 8005476:	80bb      	strh	r3, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	2b04      	cmp	r3, #4
 8005480:	d81b      	bhi.n	80054ba <pbuf_alloced_custom+0x52>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <pbuf_alloced_custom+0x20>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	0800549d 	.word	0x0800549d
 800548c:	080054a3 	.word	0x080054a3
 8005490:	080054a9 	.word	0x080054a9
 8005494:	080054af 	.word	0x080054af
 8005498:	080054b5 	.word	0x080054b5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800549c:	2336      	movs	r3, #54	; 0x36
 800549e:	81fb      	strh	r3, [r7, #14]
    break;
 80054a0:	e014      	b.n	80054cc <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80054a2:	2322      	movs	r3, #34	; 0x22
 80054a4:	81fb      	strh	r3, [r7, #14]
    break;
 80054a6:	e011      	b.n	80054cc <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80054a8:	230e      	movs	r3, #14
 80054aa:	81fb      	strh	r3, [r7, #14]
    break;
 80054ac:	e00e      	b.n	80054cc <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80054ae:	2300      	movs	r3, #0
 80054b0:	81fb      	strh	r3, [r7, #14]
    break;
 80054b2:	e00b      	b.n	80054cc <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	81fb      	strh	r3, [r7, #14]
    break;
 80054b8:	e008      	b.n	80054cc <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80054ba:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <pbuf_alloced_custom+0xc8>)
 80054bc:	f240 12c5 	movw	r2, #453	; 0x1c5
 80054c0:	491c      	ldr	r1, [pc, #112]	; (8005534 <pbuf_alloced_custom+0xcc>)
 80054c2:	481d      	ldr	r0, [pc, #116]	; (8005538 <pbuf_alloced_custom+0xd0>)
 80054c4:	f008 f90e 	bl	800d6e4 <iprintf>
    return NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e02d      	b.n	8005528 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80054cc:	89fb      	ldrh	r3, [r7, #14]
 80054ce:	3303      	adds	r3, #3
 80054d0:	f023 0203 	bic.w	r2, r3, #3
 80054d4:	88bb      	ldrh	r3, [r7, #4]
 80054d6:	441a      	add	r2, r3
 80054d8:	8bbb      	ldrh	r3, [r7, #28]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d901      	bls.n	80054e2 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	e022      	b.n	8005528 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d008      	beq.n	8005500 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80054ee:	89fb      	ldrh	r3, [r7, #14]
 80054f0:	3303      	adds	r3, #3
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	441a      	add	r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	e002      	b.n	8005506 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2202      	movs	r2, #2
 800550a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	88ba      	ldrh	r2, [r7, #4]
 8005510:	811a      	strh	r2, [r3, #8]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	891a      	ldrh	r2, [r3, #8]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	79ba      	ldrb	r2, [r7, #6]
 800551e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2201      	movs	r2, #1
 8005524:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8005526:	683b      	ldr	r3, [r7, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	0800ec4c 	.word	0x0800ec4c
 8005534:	0800ede4 	.word	0x0800ede4
 8005538:	0800ec98 	.word	0x0800ec98

0800553c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <pbuf_realloc+0x20>
 800554e:	4b4b      	ldr	r3, [pc, #300]	; (800567c <pbuf_realloc+0x140>)
 8005550:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005554:	494a      	ldr	r1, [pc, #296]	; (8005680 <pbuf_realloc+0x144>)
 8005556:	484b      	ldr	r0, [pc, #300]	; (8005684 <pbuf_realloc+0x148>)
 8005558:	f008 f8c4 	bl	800d6e4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7b1b      	ldrb	r3, [r3, #12]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d012      	beq.n	800558a <pbuf_realloc+0x4e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	7b1b      	ldrb	r3, [r3, #12]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d00e      	beq.n	800558a <pbuf_realloc+0x4e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7b1b      	ldrb	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <pbuf_realloc+0x4e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	7b1b      	ldrb	r3, [r3, #12]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d006      	beq.n	800558a <pbuf_realloc+0x4e>
 800557c:	4b3f      	ldr	r3, [pc, #252]	; (800567c <pbuf_realloc+0x140>)
 800557e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005582:	4941      	ldr	r1, [pc, #260]	; (8005688 <pbuf_realloc+0x14c>)
 8005584:	483f      	ldr	r0, [pc, #252]	; (8005684 <pbuf_realloc+0x148>)
 8005586:	f008 f8ad 	bl	800d6e4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	891b      	ldrh	r3, [r3, #8]
 800558e:	887a      	ldrh	r2, [r7, #2]
 8005590:	429a      	cmp	r2, r3
 8005592:	d26e      	bcs.n	8005672 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8005594:	887b      	ldrh	r3, [r7, #2]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	8912      	ldrh	r2, [r2, #8]
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800559e:	887b      	ldrh	r3, [r7, #2]
 80055a0:	827b      	strh	r3, [r7, #18]
  q = p;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80055a6:	e025      	b.n	80055f4 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	895b      	ldrh	r3, [r3, #10]
 80055ac:	8a7a      	ldrh	r2, [r7, #18]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80055b8:	4293      	cmp	r3, r2
 80055ba:	dd06      	ble.n	80055ca <pbuf_realloc+0x8e>
 80055bc:	4b2f      	ldr	r3, [pc, #188]	; (800567c <pbuf_realloc+0x140>)
 80055be:	f240 220b 	movw	r2, #523	; 0x20b
 80055c2:	4932      	ldr	r1, [pc, #200]	; (800568c <pbuf_realloc+0x150>)
 80055c4:	482f      	ldr	r0, [pc, #188]	; (8005684 <pbuf_realloc+0x148>)
 80055c6:	f008 f88d 	bl	800d6e4 <iprintf>
    q->tot_len += (u16_t)grow;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	891a      	ldrh	r2, [r3, #8]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	4413      	add	r3, r2
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <pbuf_realloc+0xb8>
 80055e6:	4b25      	ldr	r3, [pc, #148]	; (800567c <pbuf_realloc+0x140>)
 80055e8:	f240 220f 	movw	r2, #527	; 0x20f
 80055ec:	4928      	ldr	r1, [pc, #160]	; (8005690 <pbuf_realloc+0x154>)
 80055ee:	4825      	ldr	r0, [pc, #148]	; (8005684 <pbuf_realloc+0x148>)
 80055f0:	f008 f878 	bl	800d6e4 <iprintf>
  while (rem_len > q->len) {
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	895b      	ldrh	r3, [r3, #10]
 80055f8:	8a7a      	ldrh	r2, [r7, #18]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d8d4      	bhi.n	80055a8 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	7b1b      	ldrb	r3, [r3, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d121      	bne.n	800564a <pbuf_realloc+0x10e>
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	895b      	ldrh	r3, [r3, #10]
 800560a:	8a7a      	ldrh	r2, [r7, #18]
 800560c:	429a      	cmp	r2, r3
 800560e:	d01c      	beq.n	800564a <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	7b5b      	ldrb	r3, [r3, #13]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d116      	bne.n	800564a <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	b29a      	uxth	r2, r3
 8005626:	8a7b      	ldrh	r3, [r7, #18]
 8005628:	4413      	add	r3, r2
 800562a:	b29b      	uxth	r3, r3
 800562c:	4619      	mov	r1, r3
 800562e:	6978      	ldr	r0, [r7, #20]
 8005630:	f7ff f936 	bl	80048a0 <mem_trim>
 8005634:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <pbuf_realloc+0x10e>
 800563c:	4b0f      	ldr	r3, [pc, #60]	; (800567c <pbuf_realloc+0x140>)
 800563e:	f240 221d 	movw	r2, #541	; 0x21d
 8005642:	4914      	ldr	r1, [pc, #80]	; (8005694 <pbuf_realloc+0x158>)
 8005644:	480f      	ldr	r0, [pc, #60]	; (8005684 <pbuf_realloc+0x148>)
 8005646:	f008 f84d 	bl	800d6e4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	8a7a      	ldrh	r2, [r7, #18]
 800564e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	895a      	ldrh	r2, [r3, #10]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 f8dd 	bl	8005824 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e000      	b.n	8005674 <pbuf_realloc+0x138>
    return;
 8005672:	bf00      	nop

}
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	0800ec4c 	.word	0x0800ec4c
 8005680:	0800ee08 	.word	0x0800ee08
 8005684:	0800ec98 	.word	0x0800ec98
 8005688:	0800ee20 	.word	0x0800ee20
 800568c:	0800ee3c 	.word	0x0800ee3c
 8005690:	0800ee50 	.word	0x0800ee50
 8005694:	0800ee68 	.word	0x0800ee68

08005698 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]
 80056a4:	4613      	mov	r3, r2
 80056a6:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <pbuf_header_impl+0x24>
 80056ae:	4b46      	ldr	r3, [pc, #280]	; (80057c8 <pbuf_header_impl+0x130>)
 80056b0:	f240 223f 	movw	r2, #575	; 0x23f
 80056b4:	4945      	ldr	r1, [pc, #276]	; (80057cc <pbuf_header_impl+0x134>)
 80056b6:	4846      	ldr	r0, [pc, #280]	; (80057d0 <pbuf_header_impl+0x138>)
 80056b8:	f008 f814 	bl	800d6e4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80056bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <pbuf_header_impl+0x32>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <pbuf_header_impl+0x36>
    return 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e078      	b.n	80057c0 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80056ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	da10      	bge.n	80056f8 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80056d6:	887b      	ldrh	r3, [r7, #2]
 80056d8:	425b      	negs	r3, r3
 80056da:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	895b      	ldrh	r3, [r3, #10]
 80056e0:	89fa      	ldrh	r2, [r7, #14]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d90a      	bls.n	80056fc <pbuf_header_impl+0x64>
 80056e6:	4b38      	ldr	r3, [pc, #224]	; (80057c8 <pbuf_header_impl+0x130>)
 80056e8:	f240 2247 	movw	r2, #583	; 0x247
 80056ec:	4939      	ldr	r1, [pc, #228]	; (80057d4 <pbuf_header_impl+0x13c>)
 80056ee:	4838      	ldr	r0, [pc, #224]	; (80057d0 <pbuf_header_impl+0x138>)
 80056f0:	f007 fff8 	bl	800d6e4 <iprintf>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e063      	b.n	80057c0 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80056f8:	887b      	ldrh	r3, [r7, #2]
 80056fa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	7b1b      	ldrb	r3, [r3, #12]
 8005700:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8005708:	89bb      	ldrh	r3, [r7, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <pbuf_header_impl+0x7c>
 800570e:	89bb      	ldrh	r3, [r7, #12]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d112      	bne.n	800573a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800571c:	425b      	negs	r3, r3
 800571e:	441a      	add	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3310      	adds	r3, #16
 800572c:	429a      	cmp	r2, r3
 800572e:	d238      	bcs.n	80057a2 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8005736:	2301      	movs	r3, #1
 8005738:	e042      	b.n	80057c0 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800573a:	89bb      	ldrh	r3, [r7, #12]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d002      	beq.n	8005746 <pbuf_header_impl+0xae>
 8005740:	89bb      	ldrh	r3, [r7, #12]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d124      	bne.n	8005790 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005746:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800574a:	2b00      	cmp	r3, #0
 800574c:	da0d      	bge.n	800576a <pbuf_header_impl+0xd2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	895b      	ldrh	r3, [r3, #10]
 8005752:	89fa      	ldrh	r2, [r7, #14]
 8005754:	429a      	cmp	r2, r3
 8005756:	d808      	bhi.n	800576a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005760:	425b      	negs	r3, r3
 8005762:	441a      	add	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	605a      	str	r2, [r3, #4]
 8005768:	e011      	b.n	800578e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800576a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800576e:	2b00      	cmp	r3, #0
 8005770:	dd0b      	ble.n	800578a <pbuf_header_impl+0xf2>
 8005772:	787b      	ldrb	r3, [r7, #1]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005780:	425b      	negs	r3, r3
 8005782:	441a      	add	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	605a      	str	r2, [r3, #4]
 8005788:	e001      	b.n	800578e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800578a:	2301      	movs	r3, #1
 800578c:	e018      	b.n	80057c0 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800578e:	e008      	b.n	80057a2 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8005790:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <pbuf_header_impl+0x130>)
 8005792:	f240 2277 	movw	r2, #631	; 0x277
 8005796:	4910      	ldr	r1, [pc, #64]	; (80057d8 <pbuf_header_impl+0x140>)
 8005798:	480d      	ldr	r0, [pc, #52]	; (80057d0 <pbuf_header_impl+0x138>)
 800579a:	f007 ffa3 	bl	800d6e4 <iprintf>
    return 1;
 800579e:	2301      	movs	r3, #1
 80057a0:	e00e      	b.n	80057c0 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	895a      	ldrh	r2, [r3, #10]
 80057a6:	887b      	ldrh	r3, [r7, #2]
 80057a8:	4413      	add	r3, r2
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	891a      	ldrh	r2, [r3, #8]
 80057b4:	887b      	ldrh	r3, [r7, #2]
 80057b6:	4413      	add	r3, r2
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	0800ec4c 	.word	0x0800ec4c
 80057cc:	0800ee84 	.word	0x0800ee84
 80057d0:	0800ec98 	.word	0x0800ec98
 80057d4:	0800ee90 	.word	0x0800ee90
 80057d8:	0800eeb0 	.word	0x0800eeb0

080057dc <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80057e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057ec:	2200      	movs	r2, #0
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff ff51 	bl	8005698 <pbuf_header_impl>
 80057f6:	4603      	mov	r3, r0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800580c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005810:	2201      	movs	r2, #1
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff ff3f 	bl	8005698 <pbuf_header_impl>
 800581a:	4603      	mov	r3, r0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <pbuf_free+0x22>
 8005838:	4b3e      	ldr	r3, [pc, #248]	; (8005934 <pbuf_free+0x110>)
 800583a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800583e:	493e      	ldr	r1, [pc, #248]	; (8005938 <pbuf_free+0x114>)
 8005840:	483e      	ldr	r0, [pc, #248]	; (800593c <pbuf_free+0x118>)
 8005842:	f007 ff4f 	bl	800d6e4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005846:	2300      	movs	r3, #0
 8005848:	e070      	b.n	800592c <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	7b1b      	ldrb	r3, [r3, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d012      	beq.n	8005878 <pbuf_free+0x54>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	7b1b      	ldrb	r3, [r3, #12]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d00e      	beq.n	8005878 <pbuf_free+0x54>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	7b1b      	ldrb	r3, [r3, #12]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d00a      	beq.n	8005878 <pbuf_free+0x54>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	7b1b      	ldrb	r3, [r3, #12]
 8005866:	2b03      	cmp	r3, #3
 8005868:	d006      	beq.n	8005878 <pbuf_free+0x54>
 800586a:	4b32      	ldr	r3, [pc, #200]	; (8005934 <pbuf_free+0x110>)
 800586c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005870:	4933      	ldr	r1, [pc, #204]	; (8005940 <pbuf_free+0x11c>)
 8005872:	4832      	ldr	r0, [pc, #200]	; (800593c <pbuf_free+0x118>)
 8005874:	f007 ff36 	bl	800d6e4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800587c:	e052      	b.n	8005924 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	89db      	ldrh	r3, [r3, #14]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <pbuf_free+0x70>
 8005886:	4b2b      	ldr	r3, [pc, #172]	; (8005934 <pbuf_free+0x110>)
 8005888:	f240 22eb 	movw	r2, #747	; 0x2eb
 800588c:	492d      	ldr	r1, [pc, #180]	; (8005944 <pbuf_free+0x120>)
 800588e:	482b      	ldr	r0, [pc, #172]	; (800593c <pbuf_free+0x118>)
 8005890:	f007 ff28 	bl	800d6e4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	89db      	ldrh	r3, [r3, #14]
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	81da      	strh	r2, [r3, #14]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	89db      	ldrh	r3, [r3, #14]
 80058a4:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80058a6:	8abb      	ldrh	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d139      	bne.n	8005920 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7b1b      	ldrb	r3, [r3, #12]
 80058b6:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	7b5b      	ldrb	r3, [r3, #13]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d011      	beq.n	80058e8 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <pbuf_free+0xba>
 80058d0:	4b18      	ldr	r3, [pc, #96]	; (8005934 <pbuf_free+0x110>)
 80058d2:	f240 22f9 	movw	r2, #761	; 0x2f9
 80058d6:	491c      	ldr	r1, [pc, #112]	; (8005948 <pbuf_free+0x124>)
 80058d8:	4818      	ldr	r0, [pc, #96]	; (800593c <pbuf_free+0x118>)
 80058da:	f007 ff03 	bl	800d6e4 <iprintf>
        pc->custom_free_function(p);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	4798      	blx	r3
 80058e6:	e015      	b.n	8005914 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80058e8:	89fb      	ldrh	r3, [r7, #14]
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d104      	bne.n	80058f8 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	2008      	movs	r0, #8
 80058f2:	f7ff fa59 	bl	8004da8 <memp_free>
 80058f6:	e00d      	b.n	8005914 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80058f8:	89fb      	ldrh	r3, [r7, #14]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d002      	beq.n	8005904 <pbuf_free+0xe0>
 80058fe:	89fb      	ldrh	r3, [r7, #14]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d104      	bne.n	800590e <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	2007      	movs	r0, #7
 8005908:	f7ff fa4e 	bl	8004da8 <memp_free>
 800590c:	e002      	b.n	8005914 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fe ff64 	bl	80047dc <mem_free>
        }
      }
      count++;
 8005914:	7dfb      	ldrb	r3, [r7, #23]
 8005916:	3301      	adds	r3, #1
 8005918:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	607b      	str	r3, [r7, #4]
 800591e:	e001      	b.n	8005924 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1a9      	bne.n	800587e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	0800ec4c 	.word	0x0800ec4c
 8005938:	0800ee84 	.word	0x0800ee84
 800593c:	0800ec98 	.word	0x0800ec98
 8005940:	0800eec0 	.word	0x0800eec0
 8005944:	0800eed8 	.word	0x0800eed8
 8005948:	0800eef0 	.word	0x0800eef0

0800594c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005958:	e005      	b.n	8005966 <pbuf_clen+0x1a>
    ++len;
 800595a:	89fb      	ldrh	r3, [r7, #14]
 800595c:	3301      	adds	r3, #1
 800595e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f6      	bne.n	800595a <pbuf_clen+0xe>
  }
  return len;
 800596c:	89fb      	ldrh	r3, [r7, #14]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d010      	beq.n	80059a8 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	89db      	ldrh	r3, [r3, #14]
 800598a:	3301      	adds	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	89db      	ldrh	r3, [r3, #14]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <pbuf_ref+0x30>
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <pbuf_ref+0x38>)
 800599c:	f240 3239 	movw	r2, #825	; 0x339
 80059a0:	4904      	ldr	r1, [pc, #16]	; (80059b4 <pbuf_ref+0x3c>)
 80059a2:	4805      	ldr	r0, [pc, #20]	; (80059b8 <pbuf_ref+0x40>)
 80059a4:	f007 fe9e 	bl	800d6e4 <iprintf>
  }
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	0800ec4c 	.word	0x0800ec4c
 80059b4:	0800ef14 	.word	0x0800ef14
 80059b8:	0800ec98 	.word	0x0800ec98

080059bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <pbuf_cat+0x16>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d107      	bne.n	80059e2 <pbuf_cat+0x26>
 80059d2:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <pbuf_cat+0x98>)
 80059d4:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80059d8:	491f      	ldr	r1, [pc, #124]	; (8005a58 <pbuf_cat+0x9c>)
 80059da:	4820      	ldr	r0, [pc, #128]	; (8005a5c <pbuf_cat+0xa0>)
 80059dc:	f007 fe82 	bl	800d6e4 <iprintf>
 80059e0:	e034      	b.n	8005a4c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e00a      	b.n	80059fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	891a      	ldrh	r2, [r3, #8]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	891b      	ldrh	r3, [r3, #8]
 80059f0:	4413      	add	r3, r2
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	891a      	ldrh	r2, [r3, #8]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	895b      	ldrh	r3, [r3, #10]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d006      	beq.n	8005a20 <pbuf_cat+0x64>
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <pbuf_cat+0x98>)
 8005a14:	f240 3255 	movw	r2, #853	; 0x355
 8005a18:	4911      	ldr	r1, [pc, #68]	; (8005a60 <pbuf_cat+0xa4>)
 8005a1a:	4810      	ldr	r0, [pc, #64]	; (8005a5c <pbuf_cat+0xa0>)
 8005a1c:	f007 fe62 	bl	800d6e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d006      	beq.n	8005a36 <pbuf_cat+0x7a>
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <pbuf_cat+0x98>)
 8005a2a:	f240 3256 	movw	r2, #854	; 0x356
 8005a2e:	490d      	ldr	r1, [pc, #52]	; (8005a64 <pbuf_cat+0xa8>)
 8005a30:	480a      	ldr	r0, [pc, #40]	; (8005a5c <pbuf_cat+0xa0>)
 8005a32:	f007 fe57 	bl	800d6e4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	891a      	ldrh	r2, [r3, #8]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	891b      	ldrh	r3, [r3, #8]
 8005a3e:	4413      	add	r3, r2
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	0800ec4c 	.word	0x0800ec4c
 8005a58:	0800ef28 	.word	0x0800ef28
 8005a5c:	0800ec98 	.word	0x0800ec98
 8005a60:	0800ef60 	.word	0x0800ef60
 8005a64:	0800ef90 	.word	0x0800ef90

08005a68 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff ffa1 	bl	80059bc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005a7a:	6838      	ldr	r0, [r7, #0]
 8005a7c:	f7ff ff7c 	bl	8005978 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8005a92:	2300      	movs	r3, #0
 8005a94:	81fb      	strh	r3, [r7, #14]
 8005a96:	2300      	movs	r3, #0
 8005a98:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <pbuf_copy+0x2a>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <pbuf_copy+0x2a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	891a      	ldrh	r2, [r3, #8]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	891b      	ldrh	r3, [r3, #8]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d209      	bcs.n	8005ac6 <pbuf_copy+0x3e>
 8005ab2:	4b54      	ldr	r3, [pc, #336]	; (8005c04 <pbuf_copy+0x17c>)
 8005ab4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8005ab8:	4953      	ldr	r1, [pc, #332]	; (8005c08 <pbuf_copy+0x180>)
 8005aba:	4854      	ldr	r0, [pc, #336]	; (8005c0c <pbuf_copy+0x184>)
 8005abc:	f007 fe12 	bl	800d6e4 <iprintf>
 8005ac0:	f06f 030f 	mvn.w	r3, #15
 8005ac4:	e099      	b.n	8005bfa <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	895b      	ldrh	r3, [r3, #10]
 8005aca:	461a      	mov	r2, r3
 8005acc:	89fb      	ldrh	r3, [r7, #14]
 8005ace:	1ad2      	subs	r2, r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	895b      	ldrh	r3, [r3, #10]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	89bb      	ldrh	r3, [r7, #12]
 8005ad8:	1acb      	subs	r3, r1, r3
 8005ada:	429a      	cmp	r2, r3
 8005adc:	db05      	blt.n	8005aea <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	895a      	ldrh	r2, [r3, #10]
 8005ae2:	89bb      	ldrh	r3, [r7, #12]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	817b      	strh	r3, [r7, #10]
 8005ae8:	e004      	b.n	8005af4 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	895a      	ldrh	r2, [r3, #10]
 8005aee:	89fb      	ldrh	r3, [r7, #14]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	89fb      	ldrh	r3, [r7, #14]
 8005afa:	18d0      	adds	r0, r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	89bb      	ldrh	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	897a      	ldrh	r2, [r7, #10]
 8005b06:	4619      	mov	r1, r3
 8005b08:	f007 fcfa 	bl	800d500 <memcpy>
    offset_to += len;
 8005b0c:	89fa      	ldrh	r2, [r7, #14]
 8005b0e:	897b      	ldrh	r3, [r7, #10]
 8005b10:	4413      	add	r3, r2
 8005b12:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8005b14:	89ba      	ldrh	r2, [r7, #12]
 8005b16:	897b      	ldrh	r3, [r7, #10]
 8005b18:	4413      	add	r3, r2
 8005b1a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	895b      	ldrh	r3, [r3, #10]
 8005b20:	89fa      	ldrh	r2, [r7, #14]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d906      	bls.n	8005b34 <pbuf_copy+0xac>
 8005b26:	4b37      	ldr	r3, [pc, #220]	; (8005c04 <pbuf_copy+0x17c>)
 8005b28:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005b2c:	4938      	ldr	r1, [pc, #224]	; (8005c10 <pbuf_copy+0x188>)
 8005b2e:	4837      	ldr	r0, [pc, #220]	; (8005c0c <pbuf_copy+0x184>)
 8005b30:	f007 fdd8 	bl	800d6e4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	895b      	ldrh	r3, [r3, #10]
 8005b38:	89ba      	ldrh	r2, [r7, #12]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d906      	bls.n	8005b4c <pbuf_copy+0xc4>
 8005b3e:	4b31      	ldr	r3, [pc, #196]	; (8005c04 <pbuf_copy+0x17c>)
 8005b40:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005b44:	4933      	ldr	r1, [pc, #204]	; (8005c14 <pbuf_copy+0x18c>)
 8005b46:	4831      	ldr	r0, [pc, #196]	; (8005c0c <pbuf_copy+0x184>)
 8005b48:	f007 fdcc 	bl	800d6e4 <iprintf>
    if (offset_from >= p_from->len) {
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	895b      	ldrh	r3, [r3, #10]
 8005b50:	89ba      	ldrh	r2, [r7, #12]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d304      	bcc.n	8005b60 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	895b      	ldrh	r3, [r3, #10]
 8005b64:	89fa      	ldrh	r2, [r7, #14]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d114      	bne.n	8005b94 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10c      	bne.n	8005b94 <pbuf_copy+0x10c>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <pbuf_copy+0x10c>
 8005b80:	4b20      	ldr	r3, [pc, #128]	; (8005c04 <pbuf_copy+0x17c>)
 8005b82:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005b86:	4924      	ldr	r1, [pc, #144]	; (8005c18 <pbuf_copy+0x190>)
 8005b88:	4820      	ldr	r0, [pc, #128]	; (8005c0c <pbuf_copy+0x184>)
 8005b8a:	f007 fdab 	bl	800d6e4 <iprintf>
 8005b8e:	f06f 030f 	mvn.w	r3, #15
 8005b92:	e032      	b.n	8005bfa <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d013      	beq.n	8005bc2 <pbuf_copy+0x13a>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	895a      	ldrh	r2, [r3, #10]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	891b      	ldrh	r3, [r3, #8]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d10d      	bne.n	8005bc2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <pbuf_copy+0x13a>
 8005bae:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <pbuf_copy+0x17c>)
 8005bb0:	f240 32dd 	movw	r2, #989	; 0x3dd
 8005bb4:	4919      	ldr	r1, [pc, #100]	; (8005c1c <pbuf_copy+0x194>)
 8005bb6:	4815      	ldr	r0, [pc, #84]	; (8005c0c <pbuf_copy+0x184>)
 8005bb8:	f007 fd94 	bl	800d6e4 <iprintf>
 8005bbc:	f06f 0305 	mvn.w	r3, #5
 8005bc0:	e01b      	b.n	8005bfa <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d013      	beq.n	8005bf0 <pbuf_copy+0x168>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	895a      	ldrh	r2, [r3, #10]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	891b      	ldrh	r3, [r3, #8]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d10d      	bne.n	8005bf0 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <pbuf_copy+0x168>
 8005bdc:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <pbuf_copy+0x17c>)
 8005bde:	f240 32e2 	movw	r2, #994	; 0x3e2
 8005be2:	490e      	ldr	r1, [pc, #56]	; (8005c1c <pbuf_copy+0x194>)
 8005be4:	4809      	ldr	r0, [pc, #36]	; (8005c0c <pbuf_copy+0x184>)
 8005be6:	f007 fd7d 	bl	800d6e4 <iprintf>
 8005bea:	f06f 0305 	mvn.w	r3, #5
 8005bee:	e004      	b.n	8005bfa <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f47f af67 	bne.w	8005ac6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	0800ec4c 	.word	0x0800ec4c
 8005c08:	0800efdc 	.word	0x0800efdc
 8005c0c:	0800ec98 	.word	0x0800ec98
 8005c10:	0800f00c 	.word	0x0800f00c
 8005c14:	0800f024 	.word	0x0800f024
 8005c18:	0800f040 	.word	0x0800f040
 8005c1c:	0800f050 	.word	0x0800f050

08005c20 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	460b      	mov	r3, r1
 8005c30:	80fb      	strh	r3, [r7, #6]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <pbuf_copy_partial+0x32>
 8005c40:	4b30      	ldr	r3, [pc, #192]	; (8005d04 <pbuf_copy_partial+0xe4>)
 8005c42:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005c46:	4930      	ldr	r1, [pc, #192]	; (8005d08 <pbuf_copy_partial+0xe8>)
 8005c48:	4830      	ldr	r0, [pc, #192]	; (8005d0c <pbuf_copy_partial+0xec>)
 8005c4a:	f007 fd4b 	bl	800d6e4 <iprintf>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e054      	b.n	8005cfc <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d108      	bne.n	8005c6a <pbuf_copy_partial+0x4a>
 8005c58:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <pbuf_copy_partial+0xe4>)
 8005c5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005c5e:	492c      	ldr	r1, [pc, #176]	; (8005d10 <pbuf_copy_partial+0xf0>)
 8005c60:	482a      	ldr	r0, [pc, #168]	; (8005d0c <pbuf_copy_partial+0xec>)
 8005c62:	f007 fd3f 	bl	800d6e4 <iprintf>
 8005c66:	2300      	movs	r3, #0
 8005c68:	e048      	b.n	8005cfc <pbuf_copy_partial+0xdc>

  left = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <pbuf_copy_partial+0x5a>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <pbuf_copy_partial+0x5e>
    return 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e03e      	b.n	8005cfc <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	e034      	b.n	8005cee <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8005c84:	88bb      	ldrh	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <pbuf_copy_partial+0x80>
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	895b      	ldrh	r3, [r3, #10]
 8005c8e:	88ba      	ldrh	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d305      	bcc.n	8005ca0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	895b      	ldrh	r3, [r3, #10]
 8005c98:	88ba      	ldrh	r2, [r7, #4]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	80bb      	strh	r3, [r7, #4]
 8005c9e:	e023      	b.n	8005ce8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	895a      	ldrh	r2, [r3, #10]
 8005ca4:	88bb      	ldrh	r3, [r7, #4]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005caa:	8b3a      	ldrh	r2, [r7, #24]
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d901      	bls.n	8005cb6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005cb6:	8b7b      	ldrh	r3, [r7, #26]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	18d0      	adds	r0, r2, r3
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	88bb      	ldrh	r3, [r7, #4]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	8b3a      	ldrh	r2, [r7, #24]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f007 fc1a 	bl	800d500 <memcpy>
      copied_total += buf_copy_len;
 8005ccc:	8afa      	ldrh	r2, [r7, #22]
 8005cce:	8b3b      	ldrh	r3, [r7, #24]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005cd4:	8b7a      	ldrh	r2, [r7, #26]
 8005cd6:	8b3b      	ldrh	r3, [r7, #24]
 8005cd8:	4413      	add	r3, r2
 8005cda:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	8b3b      	ldrh	r3, [r7, #24]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <pbuf_copy_partial+0xda>
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1c4      	bne.n	8005c84 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8005cfa:	8afb      	ldrh	r3, [r7, #22]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	0800ec4c 	.word	0x0800ec4c
 8005d08:	0800f07c 	.word	0x0800f07c
 8005d0c:	0800ec98 	.word	0x0800ec98
 8005d10:	0800f09c 	.word	0x0800f09c

08005d14 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d109      	bne.n	8005d44 <pbuf_take+0x30>
 8005d30:	4b3a      	ldr	r3, [pc, #232]	; (8005e1c <pbuf_take+0x108>)
 8005d32:	f240 4284 	movw	r2, #1156	; 0x484
 8005d36:	493a      	ldr	r1, [pc, #232]	; (8005e20 <pbuf_take+0x10c>)
 8005d38:	483a      	ldr	r0, [pc, #232]	; (8005e24 <pbuf_take+0x110>)
 8005d3a:	f007 fcd3 	bl	800d6e4 <iprintf>
 8005d3e:	f06f 030f 	mvn.w	r3, #15
 8005d42:	e066      	b.n	8005e12 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d109      	bne.n	8005d5e <pbuf_take+0x4a>
 8005d4a:	4b34      	ldr	r3, [pc, #208]	; (8005e1c <pbuf_take+0x108>)
 8005d4c:	f240 4285 	movw	r2, #1157	; 0x485
 8005d50:	4935      	ldr	r1, [pc, #212]	; (8005e28 <pbuf_take+0x114>)
 8005d52:	4834      	ldr	r0, [pc, #208]	; (8005e24 <pbuf_take+0x110>)
 8005d54:	f007 fcc6 	bl	800d6e4 <iprintf>
 8005d58:	f06f 030f 	mvn.w	r3, #15
 8005d5c:	e059      	b.n	8005e12 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	891b      	ldrh	r3, [r3, #8]
 8005d62:	88fa      	ldrh	r2, [r7, #6]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d909      	bls.n	8005d7c <pbuf_take+0x68>
 8005d68:	4b2c      	ldr	r3, [pc, #176]	; (8005e1c <pbuf_take+0x108>)
 8005d6a:	f240 4286 	movw	r2, #1158	; 0x486
 8005d6e:	492f      	ldr	r1, [pc, #188]	; (8005e2c <pbuf_take+0x118>)
 8005d70:	482c      	ldr	r0, [pc, #176]	; (8005e24 <pbuf_take+0x110>)
 8005d72:	f007 fcb7 	bl	800d6e4 <iprintf>
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d7a:	e04a      	b.n	8005e12 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <pbuf_take+0x7e>
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <pbuf_take+0x7e>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	891b      	ldrh	r3, [r3, #8]
 8005d8c:	88fa      	ldrh	r2, [r7, #6]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d902      	bls.n	8005d98 <pbuf_take+0x84>
    return ERR_ARG;
 8005d92:	f06f 030f 	mvn.w	r3, #15
 8005d96:	e03c      	b.n	8005e12 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	e027      	b.n	8005dee <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <pbuf_take+0x9e>
 8005da4:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <pbuf_take+0x108>)
 8005da6:	f240 428e 	movw	r2, #1166	; 0x48e
 8005daa:	4921      	ldr	r1, [pc, #132]	; (8005e30 <pbuf_take+0x11c>)
 8005dac:	481d      	ldr	r0, [pc, #116]	; (8005e24 <pbuf_take+0x110>)
 8005dae:	f007 fc99 	bl	800d6e4 <iprintf>
    buf_copy_len = total_copy_len;
 8005db2:	8b3b      	ldrh	r3, [r7, #24]
 8005db4:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	895b      	ldrh	r3, [r3, #10]
 8005dba:	8b7a      	ldrh	r2, [r7, #26]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d902      	bls.n	8005dc6 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	895b      	ldrh	r3, [r3, #10]
 8005dc4:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	6858      	ldr	r0, [r3, #4]
 8005dca:	8afb      	ldrh	r3, [r7, #22]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	4413      	add	r3, r2
 8005dd0:	8b7a      	ldrh	r2, [r7, #26]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	f007 fb94 	bl	800d500 <memcpy>
    total_copy_len -= buf_copy_len;
 8005dd8:	8b3a      	ldrh	r2, [r7, #24]
 8005dda:	8b7b      	ldrh	r3, [r7, #26]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8005de0:	8afa      	ldrh	r2, [r7, #22]
 8005de2:	8b7b      	ldrh	r3, [r7, #26]
 8005de4:	4413      	add	r3, r2
 8005de6:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	8b3b      	ldrh	r3, [r7, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1d4      	bne.n	8005d9e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005df4:	8b3b      	ldrh	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <pbuf_take+0xee>
 8005dfa:	8afa      	ldrh	r2, [r7, #22]
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d006      	beq.n	8005e10 <pbuf_take+0xfc>
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <pbuf_take+0x108>)
 8005e04:	f240 4299 	movw	r2, #1177	; 0x499
 8005e08:	490a      	ldr	r1, [pc, #40]	; (8005e34 <pbuf_take+0x120>)
 8005e0a:	4806      	ldr	r0, [pc, #24]	; (8005e24 <pbuf_take+0x110>)
 8005e0c:	f007 fc6a 	bl	800d6e4 <iprintf>
  return ERR_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	0800ec4c 	.word	0x0800ec4c
 8005e20:	0800f0c0 	.word	0x0800f0c0
 8005e24:	0800ec98 	.word	0x0800ec98
 8005e28:	0800f0d8 	.word	0x0800f0d8
 8005e2c:	0800f0f4 	.word	0x0800f0f4
 8005e30:	0800f114 	.word	0x0800f114
 8005e34:	0800f12c 	.word	0x0800f12c

08005e38 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005e3c:	bf00      	nop
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005e48:	f000 fdfa 	bl	8006a40 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005e4c:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <tcp_tmr+0x28>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <tcp_tmr+0x28>)
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	4b04      	ldr	r3, [pc, #16]	; (8005e6c <tcp_tmr+0x28>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005e64:	f000 fb2a 	bl	80064bc <tcp_slowtmr>
  }
}
 8005e68:	bf00      	nop
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2000a149 	.word	0x2000a149

08005e70 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	e00a      	b.n	8005e96 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d102      	bne.n	8005e90 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1f1      	bne.n	8005e80 <tcp_remove_listener+0x10>
      }
   }
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr

08005ea8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d105      	bne.n	8005ec2 <tcp_listen_closed+0x1a>
 8005eb6:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <tcp_listen_closed+0x5c>)
 8005eb8:	22c0      	movs	r2, #192	; 0xc0
 8005eba:	4913      	ldr	r1, [pc, #76]	; (8005f08 <tcp_listen_closed+0x60>)
 8005ebc:	4813      	ldr	r0, [pc, #76]	; (8005f0c <tcp_listen_closed+0x64>)
 8005ebe:	f007 fc11 	bl	800d6e4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	7d1b      	ldrb	r3, [r3, #20]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d005      	beq.n	8005ed6 <tcp_listen_closed+0x2e>
 8005eca:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <tcp_listen_closed+0x5c>)
 8005ecc:	22c1      	movs	r2, #193	; 0xc1
 8005ece:	4910      	ldr	r1, [pc, #64]	; (8005f10 <tcp_listen_closed+0x68>)
 8005ed0:	480e      	ldr	r0, [pc, #56]	; (8005f0c <tcp_listen_closed+0x64>)
 8005ed2:	f007 fc07 	bl	800d6e4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e00b      	b.n	8005ef4 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005edc:	4a0d      	ldr	r2, [pc, #52]	; (8005f14 <tcp_listen_closed+0x6c>)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff ffc1 	bl	8005e70 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d9f0      	bls.n	8005edc <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	0800f1d0 	.word	0x0800f1d0
 8005f08:	0800f200 	.word	0x0800f200
 8005f0c:	0800f20c 	.word	0x0800f20c
 8005f10:	0800f234 	.word	0x0800f234
 8005f14:	08010614 	.word	0x08010614

08005f18 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005f18:	b5b0      	push	{r4, r5, r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d075      	beq.n	8006016 <tcp_close_shutdown+0xfe>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	7d1b      	ldrb	r3, [r3, #20]
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d003      	beq.n	8005f3a <tcp_close_shutdown+0x22>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	7d1b      	ldrb	r3, [r3, #20]
 8005f36:	2b07      	cmp	r3, #7
 8005f38:	d16d      	bne.n	8006016 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d104      	bne.n	8005f4c <tcp_close_shutdown+0x34>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005f4a:	d064      	beq.n	8006016 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	7e9b      	ldrb	r3, [r3, #26]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d106      	bne.n	8005f66 <tcp_close_shutdown+0x4e>
 8005f58:	4b5b      	ldr	r3, [pc, #364]	; (80060c8 <tcp_close_shutdown+0x1b0>)
 8005f5a:	f240 120f 	movw	r2, #271	; 0x10f
 8005f5e:	495b      	ldr	r1, [pc, #364]	; (80060cc <tcp_close_shutdown+0x1b4>)
 8005f60:	485b      	ldr	r0, [pc, #364]	; (80060d0 <tcp_close_shutdown+0x1b8>)
 8005f62:	f007 fbbf 	bl	800d6e4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f6e:	687c      	ldr	r4, [r7, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	1d1d      	adds	r5, r3, #4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8adb      	ldrh	r3, [r3, #22]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	8b12      	ldrh	r2, [r2, #24]
 8005f7c:	9201      	str	r2, [sp, #4]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	462b      	mov	r3, r5
 8005f82:	4622      	mov	r2, r4
 8005f84:	f004 f860 	bl	800a048 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 ffcf 	bl	8006f2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005f8e:	4b51      	ldr	r3, [pc, #324]	; (80060d4 <tcp_close_shutdown+0x1bc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d105      	bne.n	8005fa4 <tcp_close_shutdown+0x8c>
 8005f98:	4b4e      	ldr	r3, [pc, #312]	; (80060d4 <tcp_close_shutdown+0x1bc>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	4a4d      	ldr	r2, [pc, #308]	; (80060d4 <tcp_close_shutdown+0x1bc>)
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	e013      	b.n	8005fcc <tcp_close_shutdown+0xb4>
 8005fa4:	4b4b      	ldr	r3, [pc, #300]	; (80060d4 <tcp_close_shutdown+0x1bc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e00c      	b.n	8005fc6 <tcp_close_shutdown+0xae>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d104      	bne.n	8005fc0 <tcp_close_shutdown+0xa8>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	e005      	b.n	8005fcc <tcp_close_shutdown+0xb4>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1ef      	bne.n	8005fac <tcp_close_shutdown+0x94>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	4b41      	ldr	r3, [pc, #260]	; (80060d8 <tcp_close_shutdown+0x1c0>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	7d1b      	ldrb	r3, [r3, #20]
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d10c      	bne.n	8005ffa <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	220a      	movs	r2, #10
 8005fe4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005fe6:	4b3d      	ldr	r3, [pc, #244]	; (80060dc <tcp_close_shutdown+0x1c4>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60da      	str	r2, [r3, #12]
 8005fee:	4a3b      	ldr	r2, [pc, #236]	; (80060dc <tcp_close_shutdown+0x1c4>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	f004 fa70 	bl	800a4d8 <tcp_timer_needed>
 8005ff8:	e00b      	b.n	8006012 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8005ffa:	4b39      	ldr	r3, [pc, #228]	; (80060e0 <tcp_close_shutdown+0x1c8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d102      	bne.n	800600a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8006004:	f003 faf2 	bl	80095ec <tcp_trigger_input_pcb_close>
 8006008:	e003      	b.n	8006012 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	2001      	movs	r0, #1
 800600e:	f7fe fecb 	bl	8004da8 <memp_free>
        }
      }
      return ERR_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e053      	b.n	80060be <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	7d1b      	ldrb	r3, [r3, #20]
 800601a:	2b02      	cmp	r3, #2
 800601c:	d03d      	beq.n	800609a <tcp_close_shutdown+0x182>
 800601e:	2b02      	cmp	r3, #2
 8006020:	dc47      	bgt.n	80060b2 <tcp_close_shutdown+0x19a>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <tcp_close_shutdown+0x114>
 8006026:	2b01      	cmp	r3, #1
 8006028:	d02b      	beq.n	8006082 <tcp_close_shutdown+0x16a>
 800602a:	e042      	b.n	80060b2 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8adb      	ldrh	r3, [r3, #22]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d021      	beq.n	8006078 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006034:	4b2b      	ldr	r3, [pc, #172]	; (80060e4 <tcp_close_shutdown+0x1cc>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d105      	bne.n	800604a <tcp_close_shutdown+0x132>
 800603e:	4b29      	ldr	r3, [pc, #164]	; (80060e4 <tcp_close_shutdown+0x1cc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	4a27      	ldr	r2, [pc, #156]	; (80060e4 <tcp_close_shutdown+0x1cc>)
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	e013      	b.n	8006072 <tcp_close_shutdown+0x15a>
 800604a:	4b26      	ldr	r3, [pc, #152]	; (80060e4 <tcp_close_shutdown+0x1cc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60bb      	str	r3, [r7, #8]
 8006050:	e00c      	b.n	800606c <tcp_close_shutdown+0x154>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d104      	bne.n	8006066 <tcp_close_shutdown+0x14e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	60da      	str	r2, [r3, #12]
 8006064:	e005      	b.n	8006072 <tcp_close_shutdown+0x15a>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1ef      	bne.n	8006052 <tcp_close_shutdown+0x13a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	2001      	movs	r0, #1
 800607c:	f7fe fe94 	bl	8004da8 <memp_free>
    break;
 8006080:	e01c      	b.n	80060bc <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff ff10 	bl	8005ea8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4817      	ldr	r0, [pc, #92]	; (80060e8 <tcp_close_shutdown+0x1d0>)
 800608c:	f000 ff90 	bl	8006fb0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	2002      	movs	r0, #2
 8006094:	f7fe fe88 	bl	8004da8 <memp_free>
    break;
 8006098:	e010      	b.n	80060bc <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	480d      	ldr	r0, [pc, #52]	; (80060d4 <tcp_close_shutdown+0x1bc>)
 800609e:	f000 ff87 	bl	8006fb0 <tcp_pcb_remove>
 80060a2:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <tcp_close_shutdown+0x1c0>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	2001      	movs	r0, #1
 80060ac:	f7fe fe7c 	bl	8004da8 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80060b0:	e004      	b.n	80060bc <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f81a 	bl	80060ec <tcp_close_shutdown_fin>
 80060b8:	4603      	mov	r3, r0
 80060ba:	e000      	b.n	80060be <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bdb0      	pop	{r4, r5, r7, pc}
 80060c6:	bf00      	nop
 80060c8:	0800f1d0 	.word	0x0800f1d0
 80060cc:	0800f24c 	.word	0x0800f24c
 80060d0:	0800f20c 	.word	0x0800f20c
 80060d4:	2000a140 	.word	0x2000a140
 80060d8:	2000a148 	.word	0x2000a148
 80060dc:	2000a144 	.word	0x2000a144
 80060e0:	2000a180 	.word	0x2000a180
 80060e4:	2000a138 	.word	0x2000a138
 80060e8:	2000a13c 	.word	0x2000a13c

080060ec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <tcp_close_shutdown_fin+0x1c>
 80060fa:	4b2e      	ldr	r3, [pc, #184]	; (80061b4 <tcp_close_shutdown_fin+0xc8>)
 80060fc:	f240 124d 	movw	r2, #333	; 0x14d
 8006100:	492d      	ldr	r1, [pc, #180]	; (80061b8 <tcp_close_shutdown_fin+0xcc>)
 8006102:	482e      	ldr	r0, [pc, #184]	; (80061bc <tcp_close_shutdown_fin+0xd0>)
 8006104:	f007 faee 	bl	800d6e4 <iprintf>

  switch (pcb->state) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	7d1b      	ldrb	r3, [r3, #20]
 800610c:	2b07      	cmp	r3, #7
 800610e:	d020      	beq.n	8006152 <tcp_close_shutdown_fin+0x66>
 8006110:	2b07      	cmp	r3, #7
 8006112:	dc2b      	bgt.n	800616c <tcp_close_shutdown_fin+0x80>
 8006114:	2b03      	cmp	r3, #3
 8006116:	d002      	beq.n	800611e <tcp_close_shutdown_fin+0x32>
 8006118:	2b04      	cmp	r3, #4
 800611a:	d00d      	beq.n	8006138 <tcp_close_shutdown_fin+0x4c>
 800611c:	e026      	b.n	800616c <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f003 faee 	bl	8009700 <tcp_send_fin>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d11f      	bne.n	8006170 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2205      	movs	r2, #5
 8006134:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006136:	e01b      	b.n	8006170 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f003 fae1 	bl	8009700 <tcp_send_fin>
 800613e:	4603      	mov	r3, r0
 8006140:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d114      	bne.n	8006174 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2205      	movs	r2, #5
 800614e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006150:	e010      	b.n	8006174 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f003 fad4 	bl	8009700 <tcp_send_fin>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800615c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2209      	movs	r2, #9
 8006168:	751a      	strb	r2, [r3, #20]
    }
    break;
 800616a:	e005      	b.n	8006178 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	e01c      	b.n	80061aa <tcp_close_shutdown_fin+0xbe>
    break;
 8006170:	bf00      	nop
 8006172:	e002      	b.n	800617a <tcp_close_shutdown_fin+0x8e>
    break;
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <tcp_close_shutdown_fin+0x8e>
    break;
 8006178:	bf00      	nop
  }

  if (err == ERR_OK) {
 800617a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f003 fcdc 	bl	8009b40 <tcp_output>
 8006188:	e00d      	b.n	80061a6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800618a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006192:	d108      	bne.n	80061a6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	7e9b      	ldrb	r3, [r3, #26]
 8006198:	f043 0308 	orr.w	r3, r3, #8
 800619c:	b2da      	uxtb	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e001      	b.n	80061aa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80061a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	0800f1d0 	.word	0x0800f1d0
 80061b8:	0800f200 	.word	0x0800f200
 80061bc:	0800f20c 	.word	0x0800f20c

080061c0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7d1b      	ldrb	r3, [r3, #20]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d006      	beq.n	80061de <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	7e9b      	ldrb	r3, [r3, #26]
 80061d4:	f043 0310 	orr.w	r3, r3, #16
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80061de:	2101      	movs	r1, #1
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff fe99 	bl	8005f18 <tcp_close_shutdown>
 80061e6:	4603      	mov	r3, r0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	; 0x30
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	7d1b      	ldrb	r3, [r3, #20]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d106      	bne.n	8006210 <tcp_abandon+0x20>
 8006202:	4b4d      	ldr	r3, [pc, #308]	; (8006338 <tcp_abandon+0x148>)
 8006204:	f240 12df 	movw	r2, #479	; 0x1df
 8006208:	494c      	ldr	r1, [pc, #304]	; (800633c <tcp_abandon+0x14c>)
 800620a:	484d      	ldr	r0, [pc, #308]	; (8006340 <tcp_abandon+0x150>)
 800620c:	f007 fa6a 	bl	800d6e4 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7d1b      	ldrb	r3, [r3, #20]
 8006214:	2b0a      	cmp	r3, #10
 8006216:	d108      	bne.n	800622a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	484a      	ldr	r0, [pc, #296]	; (8006344 <tcp_abandon+0x154>)
 800621c:	f000 fec8 	bl	8006fb0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	2001      	movs	r0, #1
 8006224:	f7fe fdc0 	bl	8004da8 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8006228:	e081      	b.n	800632e <tcp_abandon+0x13e>
    int send_rst = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006236:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006244:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7d1b      	ldrb	r3, [r3, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d126      	bne.n	80062a2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8adb      	ldrh	r3, [r3, #22]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d02e      	beq.n	80062ba <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800625c:	4b3a      	ldr	r3, [pc, #232]	; (8006348 <tcp_abandon+0x158>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d105      	bne.n	8006272 <tcp_abandon+0x82>
 8006266:	4b38      	ldr	r3, [pc, #224]	; (8006348 <tcp_abandon+0x158>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4a36      	ldr	r2, [pc, #216]	; (8006348 <tcp_abandon+0x158>)
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e013      	b.n	800629a <tcp_abandon+0xaa>
 8006272:	4b35      	ldr	r3, [pc, #212]	; (8006348 <tcp_abandon+0x158>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	e00c      	b.n	8006294 <tcp_abandon+0xa4>
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d104      	bne.n	800628e <tcp_abandon+0x9e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	60da      	str	r2, [r3, #12]
 800628c:	e005      	b.n	800629a <tcp_abandon+0xaa>
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1ef      	bne.n	800627a <tcp_abandon+0x8a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	60da      	str	r2, [r3, #12]
 80062a0:	e00b      	b.n	80062ba <tcp_abandon+0xca>
      send_rst = reset;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8adb      	ldrh	r3, [r3, #22]
 80062aa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	4827      	ldr	r0, [pc, #156]	; (800634c <tcp_abandon+0x15c>)
 80062b0:	f000 fe7e 	bl	8006fb0 <tcp_pcb_remove>
 80062b4:	4b26      	ldr	r3, [pc, #152]	; (8006350 <tcp_abandon+0x160>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fc87 	bl	8006bda <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fc7e 	bl	8006bda <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fc75 	bl	8006bda <tcp_segs_free>
    if (send_rst) {
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00c      	beq.n	8006310 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	1d19      	adds	r1, r3, #4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8b1b      	ldrh	r3, [r3, #24]
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	460b      	mov	r3, r1
 8006308:	6979      	ldr	r1, [r7, #20]
 800630a:	69b8      	ldr	r0, [r7, #24]
 800630c:	f003 fe9c 	bl	800a048 <tcp_rst>
    last_state = pcb->state;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	7d1b      	ldrb	r3, [r3, #20]
 8006314:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	2001      	movs	r0, #1
 800631a:	f7fe fd45 	bl	8004da8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <tcp_abandon+0x13e>
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f06f 010c 	mvn.w	r1, #12
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	4798      	blx	r3
}
 800632e:	bf00      	nop
 8006330:	3728      	adds	r7, #40	; 0x28
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	0800f1d0 	.word	0x0800f1d0
 800633c:	0800f268 	.word	0x0800f268
 8006340:	0800f20c 	.word	0x0800f20c
 8006344:	2000a144 	.word	0x2000a144
 8006348:	2000a138 	.word	0x2000a138
 800634c:	2000a140 	.word	0x2000a140
 8006350:	2000a148 	.word	0x2000a148

08006354 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800635c:	2101      	movs	r1, #1
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff ff46 	bl	80061f0 <tcp_abandon>
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800637c:	4413      	add	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006388:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800638c:	bf28      	it	cs
 800638e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006392:	b292      	uxth	r2, r2
 8006394:	4413      	add	r3, r2
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	db08      	blt.n	80063b0 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	e020      	b.n	80063f2 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	dd03      	ble.n	80063c6 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063c4:	e014      	b.n	80063f0 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d8:	d306      	bcc.n	80063e8 <tcp_update_rcv_ann_wnd+0x7c>
 80063da:	4b08      	ldr	r3, [pc, #32]	; (80063fc <tcp_update_rcv_ann_wnd+0x90>)
 80063dc:	f44f 7242 	mov.w	r2, #776	; 0x308
 80063e0:	4907      	ldr	r1, [pc, #28]	; (8006400 <tcp_update_rcv_ann_wnd+0x94>)
 80063e2:	4808      	ldr	r0, [pc, #32]	; (8006404 <tcp_update_rcv_ann_wnd+0x98>)
 80063e4:	f007 f97e 	bl	800d6e4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80063f0:	2300      	movs	r3, #0
  }
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	0800f1d0 	.word	0x0800f1d0
 8006400:	0800f2e8 	.word	0x0800f2e8
 8006404:	0800f20c 	.word	0x0800f20c

08006408 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	7d1b      	ldrb	r3, [r3, #20]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d106      	bne.n	800642a <tcp_recved+0x22>
 800641c:	4b23      	ldr	r3, [pc, #140]	; (80064ac <tcp_recved+0xa4>)
 800641e:	f240 321f 	movw	r2, #799	; 0x31f
 8006422:	4923      	ldr	r1, [pc, #140]	; (80064b0 <tcp_recved+0xa8>)
 8006424:	4823      	ldr	r0, [pc, #140]	; (80064b4 <tcp_recved+0xac>)
 8006426:	f007 f95d 	bl	800d6e4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800642e:	887b      	ldrh	r3, [r7, #2]
 8006430:	4413      	add	r3, r2
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006440:	d904      	bls.n	800644c <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006448:	851a      	strh	r2, [r3, #40]	; 0x28
 800644a:	e017      	b.n	800647c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006450:	2b00      	cmp	r3, #0
 8006452:	d113      	bne.n	800647c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	7d1b      	ldrb	r3, [r3, #20]
 8006458:	2b07      	cmp	r3, #7
 800645a:	d003      	beq.n	8006464 <tcp_recved+0x5c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	7d1b      	ldrb	r3, [r3, #20]
 8006460:	2b09      	cmp	r3, #9
 8006462:	d104      	bne.n	800646e <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800646a:	851a      	strh	r2, [r3, #40]	; 0x28
 800646c:	e006      	b.n	800647c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800646e:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <tcp_recved+0xa4>)
 8006470:	f240 322d 	movw	r2, #813	; 0x32d
 8006474:	4910      	ldr	r1, [pc, #64]	; (80064b8 <tcp_recved+0xb0>)
 8006476:	480f      	ldr	r0, [pc, #60]	; (80064b4 <tcp_recved+0xac>)
 8006478:	f007 f934 	bl	800d6e4 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff ff75 	bl	800636c <tcp_update_rcv_ann_wnd>
 8006482:	4603      	mov	r3, r0
 8006484:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800648c:	db09      	blt.n	80064a2 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	7e9b      	ldrb	r3, [r3, #26]
 8006492:	f043 0302 	orr.w	r3, r3, #2
 8006496:	b2da      	uxtb	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f003 fb4f 	bl	8009b40 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	0800f1d0 	.word	0x0800f1d0
 80064b0:	0800f304 	.word	0x0800f304
 80064b4:	0800f20c 	.word	0x0800f20c
 80064b8:	0800f32c 	.word	0x0800f32c

080064bc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80064bc:	b5b0      	push	{r4, r5, r7, lr}
 80064be:	b08c      	sub	sp, #48	; 0x30
 80064c0:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80064c6:	4b97      	ldr	r3, [pc, #604]	; (8006724 <tcp_slowtmr+0x268>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	4a95      	ldr	r2, [pc, #596]	; (8006724 <tcp_slowtmr+0x268>)
 80064ce:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80064d0:	4b95      	ldr	r3, [pc, #596]	; (8006728 <tcp_slowtmr+0x26c>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	4b93      	ldr	r3, [pc, #588]	; (8006728 <tcp_slowtmr+0x26c>)
 80064da:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80064e0:	4b92      	ldr	r3, [pc, #584]	; (800672c <tcp_slowtmr+0x270>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80064e6:	e227      	b.n	8006938 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	7d1b      	ldrb	r3, [r3, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d106      	bne.n	80064fe <tcp_slowtmr+0x42>
 80064f0:	4b8f      	ldr	r3, [pc, #572]	; (8006730 <tcp_slowtmr+0x274>)
 80064f2:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80064f6:	498f      	ldr	r1, [pc, #572]	; (8006734 <tcp_slowtmr+0x278>)
 80064f8:	488f      	ldr	r0, [pc, #572]	; (8006738 <tcp_slowtmr+0x27c>)
 80064fa:	f007 f8f3 	bl	800d6e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	7d1b      	ldrb	r3, [r3, #20]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d106      	bne.n	8006514 <tcp_slowtmr+0x58>
 8006506:	4b8a      	ldr	r3, [pc, #552]	; (8006730 <tcp_slowtmr+0x274>)
 8006508:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800650c:	498b      	ldr	r1, [pc, #556]	; (800673c <tcp_slowtmr+0x280>)
 800650e:	488a      	ldr	r0, [pc, #552]	; (8006738 <tcp_slowtmr+0x27c>)
 8006510:	f007 f8e8 	bl	800d6e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	7d1b      	ldrb	r3, [r3, #20]
 8006518:	2b0a      	cmp	r3, #10
 800651a:	d106      	bne.n	800652a <tcp_slowtmr+0x6e>
 800651c:	4b84      	ldr	r3, [pc, #528]	; (8006730 <tcp_slowtmr+0x274>)
 800651e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006522:	4987      	ldr	r1, [pc, #540]	; (8006740 <tcp_slowtmr+0x284>)
 8006524:	4884      	ldr	r0, [pc, #528]	; (8006738 <tcp_slowtmr+0x27c>)
 8006526:	f007 f8dd 	bl	800d6e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	7f5a      	ldrb	r2, [r3, #29]
 800652e:	4b7e      	ldr	r3, [pc, #504]	; (8006728 <tcp_slowtmr+0x26c>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d103      	bne.n	800653e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800653c:	e1fc      	b.n	8006938 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800653e:	4b7a      	ldr	r3, [pc, #488]	; (8006728 <tcp_slowtmr+0x26c>)
 8006540:	781a      	ldrb	r2, [r3, #0]
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	7d1b      	ldrb	r3, [r3, #20]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d108      	bne.n	8006568 <tcp_slowtmr+0xac>
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800655c:	2b05      	cmp	r3, #5
 800655e:	d903      	bls.n	8006568 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8006560:	7ffb      	ldrb	r3, [r7, #31]
 8006562:	3301      	adds	r3, #1
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e0a2      	b.n	80066ae <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800656e:	2b0b      	cmp	r3, #11
 8006570:	d903      	bls.n	800657a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8006572:	7ffb      	ldrb	r3, [r7, #31]
 8006574:	3301      	adds	r3, #1
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e099      	b.n	80066ae <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006580:	2b00      	cmp	r3, #0
 8006582:	d032      	beq.n	80065ea <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800658a:	3b01      	subs	r3, #1
 800658c:	4a6d      	ldr	r2, [pc, #436]	; (8006744 <tcp_slowtmr+0x288>)
 800658e:	5cd3      	ldrb	r3, [r2, r3]
 8006590:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006598:	7cfa      	ldrb	r2, [r7, #19]
 800659a:	429a      	cmp	r2, r3
 800659c:	d907      	bls.n	80065ae <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80065a4:	3301      	adds	r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80065b4:	7cfa      	ldrb	r2, [r7, #19]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d879      	bhi.n	80066ae <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80065ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065bc:	f003 fecb 	bl	800a356 <tcp_zero_window_probe>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d173      	bne.n	80066ae <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80065d4:	2b06      	cmp	r3, #6
 80065d6:	d86a      	bhi.n	80066ae <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80065de:	3301      	adds	r3, #1
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80065e8:	e061      	b.n	80066ae <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	db08      	blt.n	8006606 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3301      	adds	r3, #1
 80065fe:	b29b      	uxth	r3, r3
 8006600:	b21a      	sxth	r2, r3
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d04f      	beq.n	80066ae <tcp_slowtmr+0x1f2>
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800661a:	429a      	cmp	r2, r3
 800661c:	db47      	blt.n	80066ae <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	7d1b      	ldrb	r3, [r3, #20]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d018      	beq.n	8006658 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800662c:	2b0c      	cmp	r3, #12
 800662e:	bf28      	it	cs
 8006630:	230c      	movcs	r3, #12
 8006632:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800663a:	10db      	asrs	r3, r3, #3
 800663c:	b21b      	sxth	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006646:	4413      	add	r3, r2
 8006648:	7dfa      	ldrb	r2, [r7, #23]
 800664a:	493f      	ldr	r1, [pc, #252]	; (8006748 <tcp_slowtmr+0x28c>)
 800664c:	5c8a      	ldrb	r2, [r1, r2]
 800664e:	4093      	lsls	r3, r2
 8006650:	b21a      	sxth	r2, r3
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	2200      	movs	r2, #0
 800665c:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800666a:	4293      	cmp	r3, r2
 800666c:	bf28      	it	cs
 800666e:	4613      	movcs	r3, r2
 8006670:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8006672:	8abb      	ldrh	r3, [r7, #20]
 8006674:	085b      	lsrs	r3, r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	b29b      	uxth	r3, r3
 800668c:	429a      	cmp	r2, r3
 800668e:	d206      	bcs.n	800669e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 80066a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066aa:	f003 fd43 	bl	800a134 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	7d1b      	ldrb	r3, [r3, #20]
 80066b2:	2b06      	cmp	r3, #6
 80066b4:	d10f      	bne.n	80066d6 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	7e9b      	ldrb	r3, [r3, #26]
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066c2:	4b18      	ldr	r3, [pc, #96]	; (8006724 <tcp_slowtmr+0x268>)
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b28      	cmp	r3, #40	; 0x28
 80066ce:	d902      	bls.n	80066d6 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80066d0:	7ffb      	ldrb	r3, [r7, #31]
 80066d2:	3301      	adds	r3, #1
 80066d4:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	7a1b      	ldrb	r3, [r3, #8]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d05d      	beq.n	800679e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d003      	beq.n	80066f2 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80066ee:	2b07      	cmp	r3, #7
 80066f0:	d155      	bne.n	800679e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066f2:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <tcp_slowtmr+0x268>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006702:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006706:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800670a:	4910      	ldr	r1, [pc, #64]	; (800674c <tcp_slowtmr+0x290>)
 800670c:	fba1 1303 	umull	r1, r3, r1, r3
 8006710:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006712:	429a      	cmp	r2, r3
 8006714:	d91c      	bls.n	8006750 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006716:	7ffb      	ldrb	r3, [r7, #31]
 8006718:	3301      	adds	r3, #1
 800671a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800671c:	7fbb      	ldrb	r3, [r7, #30]
 800671e:	3301      	adds	r3, #1
 8006720:	77bb      	strb	r3, [r7, #30]
 8006722:	e03c      	b.n	800679e <tcp_slowtmr+0x2e2>
 8006724:	2000a134 	.word	0x2000a134
 8006728:	2000a14a 	.word	0x2000a14a
 800672c:	2000a140 	.word	0x2000a140
 8006730:	0800f1d0 	.word	0x0800f1d0
 8006734:	0800f380 	.word	0x0800f380
 8006738:	0800f20c 	.word	0x0800f20c
 800673c:	0800f3ac 	.word	0x0800f3ac
 8006740:	0800f3d8 	.word	0x0800f3d8
 8006744:	0801060c 	.word	0x0801060c
 8006748:	080105fc 	.word	0x080105fc
 800674c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006750:	4b97      	ldr	r3, [pc, #604]	; (80069b0 <tcp_slowtmr+0x4f4>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006766:	4618      	mov	r0, r3
 8006768:	4b92      	ldr	r3, [pc, #584]	; (80069b4 <tcp_slowtmr+0x4f8>)
 800676a:	fb00 f303 	mul.w	r3, r0, r3
 800676e:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8006770:	4991      	ldr	r1, [pc, #580]	; (80069b8 <tcp_slowtmr+0x4fc>)
 8006772:	fba1 1303 	umull	r1, r3, r1, r3
 8006776:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006778:	429a      	cmp	r2, r3
 800677a:	d910      	bls.n	800679e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800677c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800677e:	f003 fdad 	bl	800a2dc <tcp_keepalive>
 8006782:	4603      	mov	r3, r0
 8006784:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8006786:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d107      	bne.n	800679e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006794:	3301      	adds	r3, #1
 8006796:	b2da      	uxtb	r2, r3
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d016      	beq.n	80067d4 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80067a6:	4b82      	ldr	r3, [pc, #520]	; (80069b0 <tcp_slowtmr+0x4f4>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80067b6:	4619      	mov	r1, r3
 80067b8:	460b      	mov	r3, r1
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	440b      	add	r3, r1
 80067be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d307      	bcc.n	80067d4 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fa06 	bl	8006bda <tcp_segs_free>
      pcb->ooseq = NULL;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	2200      	movs	r2, #0
 80067d2:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	7d1b      	ldrb	r3, [r3, #20]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d109      	bne.n	80067f0 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80067dc:	4b74      	ldr	r3, [pc, #464]	; (80069b0 <tcp_slowtmr+0x4f4>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b28      	cmp	r3, #40	; 0x28
 80067e8:	d902      	bls.n	80067f0 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80067ea:	7ffb      	ldrb	r3, [r7, #31]
 80067ec:	3301      	adds	r3, #1
 80067ee:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	7d1b      	ldrb	r3, [r3, #20]
 80067f4:	2b09      	cmp	r3, #9
 80067f6:	d109      	bne.n	800680c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80067f8:	4b6d      	ldr	r3, [pc, #436]	; (80069b0 <tcp_slowtmr+0x4f4>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2bf0      	cmp	r3, #240	; 0xf0
 8006804:	d902      	bls.n	800680c <tcp_slowtmr+0x350>
        ++pcb_remove;
 8006806:	7ffb      	ldrb	r3, [r7, #31]
 8006808:	3301      	adds	r3, #1
 800680a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800680c:	7ffb      	ldrb	r3, [r7, #31]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d05d      	beq.n	80068ce <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006818:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800681a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800681c:	f000 fb86 	bl	8006f2c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d010      	beq.n	8006848 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006826:	4b65      	ldr	r3, [pc, #404]	; (80069bc <tcp_slowtmr+0x500>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682c:	429a      	cmp	r2, r3
 800682e:	d106      	bne.n	800683e <tcp_slowtmr+0x382>
 8006830:	4b63      	ldr	r3, [pc, #396]	; (80069c0 <tcp_slowtmr+0x504>)
 8006832:	f240 4289 	movw	r2, #1161	; 0x489
 8006836:	4963      	ldr	r1, [pc, #396]	; (80069c4 <tcp_slowtmr+0x508>)
 8006838:	4863      	ldr	r0, [pc, #396]	; (80069c8 <tcp_slowtmr+0x50c>)
 800683a:	f006 ff53 	bl	800d6e4 <iprintf>
        prev->next = pcb->next;
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	e00f      	b.n	8006868 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006848:	4b5c      	ldr	r3, [pc, #368]	; (80069bc <tcp_slowtmr+0x500>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684e:	429a      	cmp	r2, r3
 8006850:	d006      	beq.n	8006860 <tcp_slowtmr+0x3a4>
 8006852:	4b5b      	ldr	r3, [pc, #364]	; (80069c0 <tcp_slowtmr+0x504>)
 8006854:	f240 428d 	movw	r2, #1165	; 0x48d
 8006858:	495c      	ldr	r1, [pc, #368]	; (80069cc <tcp_slowtmr+0x510>)
 800685a:	485b      	ldr	r0, [pc, #364]	; (80069c8 <tcp_slowtmr+0x50c>)
 800685c:	f006 ff42 	bl	800d6e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	4a55      	ldr	r2, [pc, #340]	; (80069bc <tcp_slowtmr+0x500>)
 8006866:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006868:	7fbb      	ldrb	r3, [r7, #30]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d010      	beq.n	8006890 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006876:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	1d1d      	adds	r5, r3, #4
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	8adb      	ldrh	r3, [r3, #22]
 8006880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006882:	8b12      	ldrh	r2, [r2, #24]
 8006884:	9201      	str	r2, [sp, #4]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	462b      	mov	r3, r5
 800688a:	4622      	mov	r2, r4
 800688c:	f003 fbdc 	bl	800a048 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	7d1b      	ldrb	r3, [r3, #20]
 800689a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	2001      	movs	r0, #1
 80068aa:	f7fe fa7d 	bl	8004da8 <memp_free>

      tcp_active_pcbs_changed = 0;
 80068ae:	4b48      	ldr	r3, [pc, #288]	; (80069d0 <tcp_slowtmr+0x514>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <tcp_slowtmr+0x408>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f06f 010c 	mvn.w	r1, #12
 80068c0:	68b8      	ldr	r0, [r7, #8]
 80068c2:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80068c4:	4b42      	ldr	r3, [pc, #264]	; (80069d0 <tcp_slowtmr+0x514>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d035      	beq.n	8006938 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 80068cc:	e606      	b.n	80064dc <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	7edb      	ldrb	r3, [r3, #27]
 80068dc:	3301      	adds	r3, #1
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	7eda      	ldrb	r2, [r3, #27]
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	7f1b      	ldrb	r3, [r3, #28]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d323      	bcc.n	8006938 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	2200      	movs	r2, #0
 80068f4:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80068f6:	4b36      	ldr	r3, [pc, #216]	; (80069d0 <tcp_slowtmr+0x514>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <tcp_slowtmr+0x460>
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	6912      	ldr	r2, [r2, #16]
 8006910:	6a39      	ldr	r1, [r7, #32]
 8006912:	4610      	mov	r0, r2
 8006914:	4798      	blx	r3
 8006916:	4603      	mov	r3, r0
 8006918:	777b      	strb	r3, [r7, #29]
 800691a:	e001      	b.n	8006920 <tcp_slowtmr+0x464>
 800691c:	2300      	movs	r3, #0
 800691e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006920:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <tcp_slowtmr+0x514>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d000      	beq.n	800692a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8006928:	e5d8      	b.n	80064dc <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800692a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d102      	bne.n	8006938 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8006932:	6a38      	ldr	r0, [r7, #32]
 8006934:	f003 f904 	bl	8009b40 <tcp_output>
  while (pcb != NULL) {
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	2b00      	cmp	r3, #0
 800693c:	f47f add4 	bne.w	80064e8 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006940:	2300      	movs	r3, #0
 8006942:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8006944:	4b23      	ldr	r3, [pc, #140]	; (80069d4 <tcp_slowtmr+0x518>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800694a:	e068      	b.n	8006a1e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	7d1b      	ldrb	r3, [r3, #20]
 8006950:	2b0a      	cmp	r3, #10
 8006952:	d006      	beq.n	8006962 <tcp_slowtmr+0x4a6>
 8006954:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <tcp_slowtmr+0x504>)
 8006956:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800695a:	491f      	ldr	r1, [pc, #124]	; (80069d8 <tcp_slowtmr+0x51c>)
 800695c:	481a      	ldr	r0, [pc, #104]	; (80069c8 <tcp_slowtmr+0x50c>)
 800695e:	f006 fec1 	bl	800d6e4 <iprintf>
    pcb_remove = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006966:	4b12      	ldr	r3, [pc, #72]	; (80069b0 <tcp_slowtmr+0x4f4>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2bf0      	cmp	r3, #240	; 0xf0
 8006972:	d902      	bls.n	800697a <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8006974:	7ffb      	ldrb	r3, [r7, #31]
 8006976:	3301      	adds	r3, #1
 8006978:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800697a:	7ffb      	ldrb	r3, [r7, #31]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d049      	beq.n	8006a14 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006982:	f000 fad3 	bl	8006f2c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d029      	beq.n	80069e0 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800698c:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <tcp_slowtmr+0x518>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006992:	429a      	cmp	r2, r3
 8006994:	d106      	bne.n	80069a4 <tcp_slowtmr+0x4e8>
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <tcp_slowtmr+0x504>)
 8006998:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800699c:	490f      	ldr	r1, [pc, #60]	; (80069dc <tcp_slowtmr+0x520>)
 800699e:	480a      	ldr	r0, [pc, #40]	; (80069c8 <tcp_slowtmr+0x50c>)
 80069a0:	f006 fea0 	bl	800d6e4 <iprintf>
        prev->next = pcb->next;
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	60da      	str	r2, [r3, #12]
 80069ac:	e028      	b.n	8006a00 <tcp_slowtmr+0x544>
 80069ae:	bf00      	nop
 80069b0:	2000a134 	.word	0x2000a134
 80069b4:	000124f8 	.word	0x000124f8
 80069b8:	10624dd3 	.word	0x10624dd3
 80069bc:	2000a140 	.word	0x2000a140
 80069c0:	0800f1d0 	.word	0x0800f1d0
 80069c4:	0800f408 	.word	0x0800f408
 80069c8:	0800f20c 	.word	0x0800f20c
 80069cc:	0800f434 	.word	0x0800f434
 80069d0:	2000a148 	.word	0x2000a148
 80069d4:	2000a144 	.word	0x2000a144
 80069d8:	0800f460 	.word	0x0800f460
 80069dc:	0800f490 	.word	0x0800f490
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80069e0:	4b13      	ldr	r3, [pc, #76]	; (8006a30 <tcp_slowtmr+0x574>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d006      	beq.n	80069f8 <tcp_slowtmr+0x53c>
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <tcp_slowtmr+0x578>)
 80069ec:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80069f0:	4911      	ldr	r1, [pc, #68]	; (8006a38 <tcp_slowtmr+0x57c>)
 80069f2:	4812      	ldr	r0, [pc, #72]	; (8006a3c <tcp_slowtmr+0x580>)
 80069f4:	f006 fe76 	bl	800d6e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4a0c      	ldr	r2, [pc, #48]	; (8006a30 <tcp_slowtmr+0x574>)
 80069fe:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006a0a:	69b9      	ldr	r1, [r7, #24]
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f7fe f9cb 	bl	8004da8 <memp_free>
 8006a12:	e004      	b.n	8006a1e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d193      	bne.n	800694c <tcp_slowtmr+0x490>
    }
  }
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	3728      	adds	r7, #40	; 0x28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	2000a144 	.word	0x2000a144
 8006a34:	0800f1d0 	.word	0x0800f1d0
 8006a38:	0800f4b8 	.word	0x0800f4b8
 8006a3c:	0800f20c 	.word	0x0800f20c

08006a40 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006a46:	4b2d      	ldr	r3, [pc, #180]	; (8006afc <tcp_fasttmr+0xbc>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	4b2b      	ldr	r3, [pc, #172]	; (8006afc <tcp_fasttmr+0xbc>)
 8006a50:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006a52:	4b2b      	ldr	r3, [pc, #172]	; (8006b00 <tcp_fasttmr+0xc0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006a58:	e048      	b.n	8006aec <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	7f5a      	ldrb	r2, [r3, #29]
 8006a5e:	4b27      	ldr	r3, [pc, #156]	; (8006afc <tcp_fasttmr+0xbc>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d03f      	beq.n	8006ae6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006a66:	4b25      	ldr	r3, [pc, #148]	; (8006afc <tcp_fasttmr+0xbc>)
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7e9b      	ldrb	r3, [r3, #26]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d010      	beq.n	8006a9c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7e9b      	ldrb	r3, [r3, #26]
 8006a7e:	f043 0302 	orr.w	r3, r3, #2
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f003 f859 	bl	8009b40 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	7e9b      	ldrb	r3, [r3, #26]
 8006a92:	f023 0303 	bic.w	r3, r3, #3
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	7e9b      	ldrb	r3, [r3, #26]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	7e9b      	ldrb	r3, [r3, #26]
 8006aac:	f023 0308 	bic.w	r3, r3, #8
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fb18 	bl	80060ec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006aca:	4b0e      	ldr	r3, [pc, #56]	; (8006b04 <tcp_fasttmr+0xc4>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f819 	bl	8006b08 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <tcp_fasttmr+0xc4>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d000      	beq.n	8006ae0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006ade:	e7b8      	b.n	8006a52 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	607b      	str	r3, [r7, #4]
 8006ae4:	e002      	b.n	8006aec <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1b3      	bne.n	8006a5a <tcp_fasttmr+0x1a>
    }
  }
}
 8006af2:	bf00      	nop
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	2000a14a 	.word	0x2000a14a
 8006b00:	2000a140 	.word	0x2000a140
 8006b04:	2000a148 	.word	0x2000a148

08006b08 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006b08:	b590      	push	{r4, r7, lr}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b14:	7b5b      	ldrb	r3, [r3, #13]
 8006b16:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b1c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00b      	beq.n	8006b46 <tcp_process_refused_data+0x3e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6918      	ldr	r0, [r3, #16]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	47a0      	blx	r4
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
 8006b44:	e007      	b.n	8006b56 <tcp_process_refused_data+0x4e>
 8006b46:	2300      	movs	r3, #0
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	f000 f88d 	bl	8006c6c <tcp_recv_null>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d12a      	bne.n	8006bb4 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d033      	beq.n	8006bd0 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006b70:	d005      	beq.n	8006b7e <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b76:	3301      	adds	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00b      	beq.n	8006ba0 <tcp_process_refused_data+0x98>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6918      	ldr	r0, [r3, #16]
 8006b92:	2300      	movs	r3, #0
 8006b94:	2200      	movs	r2, #0
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	47a0      	blx	r4
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]
 8006b9e:	e001      	b.n	8006ba4 <tcp_process_refused_data+0x9c>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ba8:	f113 0f0d 	cmn.w	r3, #13
 8006bac:	d110      	bne.n	8006bd0 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8006bae:	f06f 030c 	mvn.w	r3, #12
 8006bb2:	e00e      	b.n	8006bd2 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8006bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bb8:	f113 0f0d 	cmn.w	r3, #13
 8006bbc:	d102      	bne.n	8006bc4 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006bbe:	f06f 030c 	mvn.w	r3, #12
 8006bc2:	e006      	b.n	8006bd2 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8006bca:	f06f 0304 	mvn.w	r3, #4
 8006bce:	e000      	b.n	8006bd2 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd90      	pop	{r4, r7, pc}

08006bda <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006be2:	e007      	b.n	8006bf4 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f80a 	bl	8006c04 <tcp_seg_free>
    seg = next;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1f4      	bne.n	8006be4 <tcp_segs_free+0xa>
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00c      	beq.n	8006c2c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fe00 	bl	8005824 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	2003      	movs	r0, #3
 8006c28:	f7fe f8be 	bl	8004da8 <memp_free>
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006c3c:	2003      	movs	r0, #3
 8006c3e:	f7fe f867 	bl	8004d10 <memp_malloc>
 8006c42:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <tcp_seg_copy+0x1a>
    return NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e00a      	b.n	8006c64 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006c4e:	2210      	movs	r2, #16
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f006 fc54 	bl	800d500 <memcpy>
  pbuf_ref(cseg->p);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fe8b 	bl	8005978 <pbuf_ref>
  return cseg;
 8006c62:	68fb      	ldr	r3, [r7, #12]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d009      	beq.n	8006c94 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	891b      	ldrh	r3, [r3, #8]
 8006c84:	4619      	mov	r1, r3
 8006c86:	68b8      	ldr	r0, [r7, #8]
 8006c88:	f7ff fbbe 	bl	8006408 <tcp_recved>
    pbuf_free(p);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fe fdc9 	bl	8005824 <pbuf_free>
 8006c92:	e008      	b.n	8006ca6 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8006c9c:	68b8      	ldr	r0, [r7, #8]
 8006c9e:	f7ff fa8f 	bl	80061c0 <tcp_close>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	e000      	b.n	8006ca8 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	db01      	blt.n	8006cc6 <tcp_kill_prio+0x16>
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	e000      	b.n	8006cc8 <tcp_kill_prio+0x18>
 8006cc6:	237f      	movs	r3, #127	; 0x7f
 8006cc8:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cd2:	4b16      	ldr	r3, [pc, #88]	; (8006d2c <tcp_kill_prio+0x7c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e01a      	b.n	8006d10 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	7d5b      	ldrb	r3, [r3, #21]
 8006cde:	7afa      	ldrb	r2, [r7, #11]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d312      	bcc.n	8006d0a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006ce4:	4b12      	ldr	r3, [pc, #72]	; (8006d30 <tcp_kill_prio+0x80>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d80a      	bhi.n	8006d0a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <tcp_kill_prio+0x80>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	7d5b      	ldrb	r3, [r3, #21]
 8006d08:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e1      	bne.n	8006cda <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006d1c:	6938      	ldr	r0, [r7, #16]
 8006d1e:	f7ff fb19 	bl	8006354 <tcp_abort>
  }
}
 8006d22:	bf00      	nop
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	2000a140 	.word	0x2000a140
 8006d30:	2000a134 	.word	0x2000a134

08006d34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d009      	beq.n	8006d58 <tcp_kill_state+0x24>
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b09      	cmp	r3, #9
 8006d48:	d006      	beq.n	8006d58 <tcp_kill_state+0x24>
 8006d4a:	4b1a      	ldr	r3, [pc, #104]	; (8006db4 <tcp_kill_state+0x80>)
 8006d4c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d50:	4919      	ldr	r1, [pc, #100]	; (8006db8 <tcp_kill_state+0x84>)
 8006d52:	481a      	ldr	r0, [pc, #104]	; (8006dbc <tcp_kill_state+0x88>)
 8006d54:	f006 fcc6 	bl	800d6e4 <iprintf>

  inactivity = 0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d60:	4b17      	ldr	r3, [pc, #92]	; (8006dc0 <tcp_kill_state+0x8c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e017      	b.n	8006d98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	7d1b      	ldrb	r3, [r3, #20]
 8006d6c:	79fa      	ldrb	r2, [r7, #7]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d10f      	bne.n	8006d92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006d72:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <tcp_kill_state+0x90>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d807      	bhi.n	8006d92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006d82:	4b10      	ldr	r3, [pc, #64]	; (8006dc4 <tcp_kill_state+0x90>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e4      	bne.n	8006d68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006da4:	2100      	movs	r1, #0
 8006da6:	6938      	ldr	r0, [r7, #16]
 8006da8:	f7ff fa22 	bl	80061f0 <tcp_abandon>
  }
}
 8006dac:	bf00      	nop
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	0800f1d0 	.word	0x0800f1d0
 8006db8:	0800f4e0 	.word	0x0800f4e0
 8006dbc:	0800f20c 	.word	0x0800f20c
 8006dc0:	2000a140 	.word	0x2000a140
 8006dc4:	2000a134 	.word	0x2000a134

08006dc8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dd6:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <tcp_kill_timewait+0x58>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	e012      	b.n	8006e04 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006dde:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <tcp_kill_timewait+0x5c>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d807      	bhi.n	8006dfe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006dee:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <tcp_kill_timewait+0x5c>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e9      	bne.n	8006dde <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006e10:	68b8      	ldr	r0, [r7, #8]
 8006e12:	f7ff fa9f 	bl	8006354 <tcp_abort>
  }
}
 8006e16:	bf00      	nop
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	2000a144 	.word	0x2000a144
 8006e24:	2000a134 	.word	0x2000a134

08006e28 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006e32:	2001      	movs	r0, #1
 8006e34:	f7fd ff6c 	bl	8004d10 <memp_malloc>
 8006e38:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d124      	bne.n	8006e8a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006e40:	f7ff ffc2 	bl	8006dc8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006e44:	2001      	movs	r0, #1
 8006e46:	f7fd ff63 	bl	8004d10 <memp_malloc>
 8006e4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d11b      	bne.n	8006e8a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006e52:	2009      	movs	r0, #9
 8006e54:	f7ff ff6e 	bl	8006d34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006e58:	2001      	movs	r0, #1
 8006e5a:	f7fd ff59 	bl	8004d10 <memp_malloc>
 8006e5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d111      	bne.n	8006e8a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006e66:	2008      	movs	r0, #8
 8006e68:	f7ff ff64 	bl	8006d34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	f7fd ff4f 	bl	8004d10 <memp_malloc>
 8006e72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d107      	bne.n	8006e8a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff ff17 	bl	8006cb0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006e82:	2001      	movs	r0, #1
 8006e84:	f7fd ff44 	bl	8004d10 <memp_malloc>
 8006e88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d03f      	beq.n	8006f10 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006e90:	2298      	movs	r2, #152	; 0x98
 8006e92:	2100      	movs	r1, #0
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f006 fb41 	bl	800d51c <memset>
    pcb->prio = prio;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	79fa      	ldrb	r2, [r7, #7]
 8006e9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006ea6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	22ff      	movs	r2, #255	; 0xff
 8006ebe:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006ec6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2206      	movs	r2, #6
 8006ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2206      	movs	r2, #6
 8006ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006edc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <tcp_alloc+0xf4>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006eee:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <tcp_alloc+0xf8>)
 8006ef0:	781a      	ldrb	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006efc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4a08      	ldr	r2, [pc, #32]	; (8006f24 <tcp_alloc+0xfc>)
 8006f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4a07      	ldr	r2, [pc, #28]	; (8006f28 <tcp_alloc+0x100>)
 8006f0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006f10:	68fb      	ldr	r3, [r7, #12]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	2000a134 	.word	0x2000a134
 8006f20:	2000a14a 	.word	0x2000a14a
 8006f24:	08006c6d 	.word	0x08006c6d
 8006f28:	006ddd00 	.word	0x006ddd00

08006f2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	7d1b      	ldrb	r3, [r3, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d034      	beq.n	8006fa6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006f40:	2b0a      	cmp	r3, #10
 8006f42:	d030      	beq.n	8006fa6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d02c      	beq.n	8006fa6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fc63 	bl	8005824 <pbuf_free>
      pcb->refused_data = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fe36 	bl	8006bda <tcp_segs_free>
    pcb->ooseq = NULL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f7a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff fe2a 	bl	8006bda <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff fe25 	bl	8006bda <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	669a      	str	r2, [r3, #104]	; 0x68
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d105      	bne.n	8006fd0 <tcp_pcb_remove+0x20>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	e013      	b.n	8006ff8 <tcp_pcb_remove+0x48>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	e00c      	b.n	8006ff2 <tcp_pcb_remove+0x42>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d104      	bne.n	8006fec <tcp_pcb_remove+0x3c>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	60da      	str	r2, [r3, #12]
 8006fea:	e005      	b.n	8006ff8 <tcp_pcb_remove+0x48>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1ef      	bne.n	8006fd8 <tcp_pcb_remove+0x28>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006ffe:	6838      	ldr	r0, [r7, #0]
 8007000:	f7ff ff94 	bl	8006f2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	7d1b      	ldrb	r3, [r3, #20]
 8007008:	2b0a      	cmp	r3, #10
 800700a:	d013      	beq.n	8007034 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8007010:	2b01      	cmp	r3, #1
 8007012:	d00f      	beq.n	8007034 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	7e9b      	ldrb	r3, [r3, #26]
 8007018:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	7e9b      	ldrb	r3, [r3, #26]
 8007024:	f043 0302 	orr.w	r3, r3, #2
 8007028:	b2da      	uxtb	r2, r3
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800702e:	6838      	ldr	r0, [r7, #0]
 8007030:	f002 fd86 	bl	8009b40 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	7d1b      	ldrb	r3, [r3, #20]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d020      	beq.n	800707e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007040:	2b00      	cmp	r3, #0
 8007042:	d006      	beq.n	8007052 <tcp_pcb_remove+0xa2>
 8007044:	4b13      	ldr	r3, [pc, #76]	; (8007094 <tcp_pcb_remove+0xe4>)
 8007046:	f240 7253 	movw	r2, #1875	; 0x753
 800704a:	4913      	ldr	r1, [pc, #76]	; (8007098 <tcp_pcb_remove+0xe8>)
 800704c:	4813      	ldr	r0, [pc, #76]	; (800709c <tcp_pcb_remove+0xec>)
 800704e:	f006 fb49 	bl	800d6e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d006      	beq.n	8007068 <tcp_pcb_remove+0xb8>
 800705a:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <tcp_pcb_remove+0xe4>)
 800705c:	f240 7254 	movw	r2, #1876	; 0x754
 8007060:	490f      	ldr	r1, [pc, #60]	; (80070a0 <tcp_pcb_remove+0xf0>)
 8007062:	480e      	ldr	r0, [pc, #56]	; (800709c <tcp_pcb_remove+0xec>)
 8007064:	f006 fb3e 	bl	800d6e4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706c:	2b00      	cmp	r3, #0
 800706e:	d006      	beq.n	800707e <tcp_pcb_remove+0xce>
 8007070:	4b08      	ldr	r3, [pc, #32]	; (8007094 <tcp_pcb_remove+0xe4>)
 8007072:	f240 7256 	movw	r2, #1878	; 0x756
 8007076:	490b      	ldr	r1, [pc, #44]	; (80070a4 <tcp_pcb_remove+0xf4>)
 8007078:	4808      	ldr	r0, [pc, #32]	; (800709c <tcp_pcb_remove+0xec>)
 800707a:	f006 fb33 	bl	800d6e4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2200      	movs	r2, #0
 8007082:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	0800f1d0 	.word	0x0800f1d0
 8007098:	0800f588 	.word	0x0800f588
 800709c:	0800f20c 	.word	0x0800f20c
 80070a0:	0800f5a0 	.word	0x0800f5a0
 80070a4:	0800f5bc 	.word	0x0800f5bc

080070a8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80070b0:	4b06      	ldr	r3, [pc, #24]	; (80070cc <tcp_next_iss+0x24>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <tcp_next_iss+0x28>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4413      	add	r3, r2
 80070ba:	4a04      	ldr	r2, [pc, #16]	; (80070cc <tcp_next_iss+0x24>)
 80070bc:	6013      	str	r3, [r2, #0]
  return iss;
 80070be:	4b03      	ldr	r3, [pc, #12]	; (80070cc <tcp_next_iss+0x24>)
 80070c0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr
 80070cc:	20000010 	.word	0x20000010
 80070d0:	2000a134 	.word	0x2000a134

080070d4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	6039      	str	r1, [r7, #0]
 80070de:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80070e0:	6838      	ldr	r0, [r7, #0]
 80070e2:	f004 ffcf 	bl	800c084 <ip4_route>
 80070e6:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80070ee:	88fb      	ldrh	r3, [r7, #6]
 80070f0:	e010      	b.n	8007114 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070f6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80070f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007100:	897b      	ldrh	r3, [r7, #10]
 8007102:	3b28      	subs	r3, #40	; 0x28
 8007104:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007106:	893a      	ldrh	r2, [r7, #8]
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	4293      	cmp	r3, r2
 800710c:	bf28      	it	cs
 800710e:	4613      	movcs	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8007112:	88fb      	ldrh	r3, [r7, #6]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800712a:	e011      	b.n	8007150 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d108      	bne.n	800714a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff f908 	bl	8006354 <tcp_abort>
      pcb = next;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	e002      	b.n	8007150 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1ea      	bne.n	800712c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8007156:	bf00      	nop
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d02c      	beq.n	80071ca <tcp_netif_ip_addr_changed+0x6a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d028      	beq.n	80071ca <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007178:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <tcp_netif_ip_addr_changed+0x74>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff ffcc 	bl	800711c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007184:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <tcp_netif_ip_addr_changed+0x78>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff ffc6 	bl	800711c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d019      	beq.n	80071ca <tcp_netif_ip_addr_changed+0x6a>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d015      	beq.n	80071ca <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800719e:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <tcp_netif_ip_addr_changed+0x7c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e00e      	b.n	80071c4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d103      	bne.n	80071c0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1ed      	bne.n	80071a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	2000a140 	.word	0x2000a140
 80071d8:	2000a138 	.word	0x2000a138
 80071dc:	2000a13c 	.word	0x2000a13c

080071e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b08b      	sub	sp, #44	; 0x2c
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	4a82      	ldr	r2, [pc, #520]	; (80073f8 <tcp_input+0x218>)
 80071f0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	895b      	ldrh	r3, [r3, #10]
 80071f6:	2b13      	cmp	r3, #19
 80071f8:	f240 8398 	bls.w	800792c <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80071fc:	4b7f      	ldr	r3, [pc, #508]	; (80073fc <tcp_input+0x21c>)
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	4a7e      	ldr	r2, [pc, #504]	; (80073fc <tcp_input+0x21c>)
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	4611      	mov	r1, r2
 8007206:	4618      	mov	r0, r3
 8007208:	f005 f9b8 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	f040 838e 	bne.w	8007930 <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007214:	4b79      	ldr	r3, [pc, #484]	; (80073fc <tcp_input+0x21c>)
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800721c:	2be0      	cmp	r3, #224	; 0xe0
 800721e:	f000 8387 	beq.w	8007930 <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8007222:	4b75      	ldr	r3, [pc, #468]	; (80073f8 <tcp_input+0x218>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	899b      	ldrh	r3, [r3, #12]
 8007228:	b29b      	uxth	r3, r3
 800722a:	4618      	mov	r0, r3
 800722c:	f7fd f9c7 	bl	80045be <lwip_htons>
 8007230:	4603      	mov	r3, r0
 8007232:	0b1b      	lsrs	r3, r3, #12
 8007234:	b29b      	uxth	r3, r3
 8007236:	b2db      	uxtb	r3, r3
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800723c:	7cbb      	ldrb	r3, [r7, #18]
 800723e:	2b13      	cmp	r3, #19
 8007240:	f240 8378 	bls.w	8007934 <tcp_input+0x754>
 8007244:	7cbb      	ldrb	r3, [r7, #18]
 8007246:	b29a      	uxth	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	891b      	ldrh	r3, [r3, #8]
 800724c:	429a      	cmp	r2, r3
 800724e:	f200 8371 	bhi.w	8007934 <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007252:	7cbb      	ldrb	r3, [r7, #18]
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b14      	subs	r3, #20
 8007258:	b29a      	uxth	r2, r3
 800725a:	4b69      	ldr	r3, [pc, #420]	; (8007400 <tcp_input+0x220>)
 800725c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800725e:	4b69      	ldr	r3, [pc, #420]	; (8007404 <tcp_input+0x224>)
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	895a      	ldrh	r2, [r3, #10]
 8007268:	7cbb      	ldrb	r3, [r7, #18]
 800726a:	b29b      	uxth	r3, r3
 800726c:	429a      	cmp	r2, r3
 800726e:	d30d      	bcc.n	800728c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007270:	4b63      	ldr	r3, [pc, #396]	; (8007400 <tcp_input+0x220>)
 8007272:	881a      	ldrh	r2, [r3, #0]
 8007274:	4b64      	ldr	r3, [pc, #400]	; (8007408 <tcp_input+0x228>)
 8007276:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007278:	7cbb      	ldrb	r3, [r7, #18]
 800727a:	b29b      	uxth	r3, r3
 800727c:	425b      	negs	r3, r3
 800727e:	b29b      	uxth	r3, r3
 8007280:	b21b      	sxth	r3, r3
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fe faa9 	bl	80057dc <pbuf_header>
 800728a:	e055      	b.n	8007338 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d105      	bne.n	80072a0 <tcp_input+0xc0>
 8007294:	4b5d      	ldr	r3, [pc, #372]	; (800740c <tcp_input+0x22c>)
 8007296:	22b2      	movs	r2, #178	; 0xb2
 8007298:	495d      	ldr	r1, [pc, #372]	; (8007410 <tcp_input+0x230>)
 800729a:	485e      	ldr	r0, [pc, #376]	; (8007414 <tcp_input+0x234>)
 800729c:	f006 fa22 	bl	800d6e4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 80072a0:	f06f 0113 	mvn.w	r1, #19
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7fe fa99 	bl	80057dc <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	895a      	ldrh	r2, [r3, #10]
 80072ae:	4b56      	ldr	r3, [pc, #344]	; (8007408 <tcp_input+0x228>)
 80072b0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80072b2:	4b53      	ldr	r3, [pc, #332]	; (8007400 <tcp_input+0x220>)
 80072b4:	881a      	ldrh	r2, [r3, #0]
 80072b6:	4b54      	ldr	r3, [pc, #336]	; (8007408 <tcp_input+0x228>)
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80072be:	4b52      	ldr	r3, [pc, #328]	; (8007408 <tcp_input+0x228>)
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	425b      	negs	r3, r3
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	b21b      	sxth	r3, r3
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fe fa86 	bl	80057dc <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	895b      	ldrh	r3, [r3, #10]
 80072d6:	8a3a      	ldrh	r2, [r7, #16]
 80072d8:	429a      	cmp	r2, r3
 80072da:	f200 832d 	bhi.w	8007938 <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4a47      	ldr	r2, [pc, #284]	; (8007404 <tcp_input+0x224>)
 80072e6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	8a3b      	ldrh	r3, [r7, #16]
 80072ee:	425b      	negs	r3, r3
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	b21b      	sxth	r3, r3
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f7fe fa70 	bl	80057dc <pbuf_header>
    p->tot_len -= opt2len;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	891a      	ldrh	r2, [r3, #8]
 8007300:	8a3b      	ldrh	r3, [r7, #16]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	b29a      	uxth	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	895b      	ldrh	r3, [r3, #10]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d005      	beq.n	800731e <tcp_input+0x13e>
 8007312:	4b3e      	ldr	r3, [pc, #248]	; (800740c <tcp_input+0x22c>)
 8007314:	22cf      	movs	r2, #207	; 0xcf
 8007316:	4940      	ldr	r1, [pc, #256]	; (8007418 <tcp_input+0x238>)
 8007318:	483e      	ldr	r0, [pc, #248]	; (8007414 <tcp_input+0x234>)
 800731a:	f006 f9e3 	bl	800d6e4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	891a      	ldrh	r2, [r3, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	891b      	ldrh	r3, [r3, #8]
 8007328:	429a      	cmp	r2, r3
 800732a:	d005      	beq.n	8007338 <tcp_input+0x158>
 800732c:	4b37      	ldr	r3, [pc, #220]	; (800740c <tcp_input+0x22c>)
 800732e:	22d0      	movs	r2, #208	; 0xd0
 8007330:	493a      	ldr	r1, [pc, #232]	; (800741c <tcp_input+0x23c>)
 8007332:	4838      	ldr	r0, [pc, #224]	; (8007414 <tcp_input+0x234>)
 8007334:	f006 f9d6 	bl	800d6e4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007338:	4b2f      	ldr	r3, [pc, #188]	; (80073f8 <tcp_input+0x218>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	b29b      	uxth	r3, r3
 8007340:	4a2d      	ldr	r2, [pc, #180]	; (80073f8 <tcp_input+0x218>)
 8007342:	6814      	ldr	r4, [r2, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	f7fd f93a 	bl	80045be <lwip_htons>
 800734a:	4603      	mov	r3, r0
 800734c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800734e:	4b2a      	ldr	r3, [pc, #168]	; (80073f8 <tcp_input+0x218>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	885b      	ldrh	r3, [r3, #2]
 8007354:	b29b      	uxth	r3, r3
 8007356:	4a28      	ldr	r2, [pc, #160]	; (80073f8 <tcp_input+0x218>)
 8007358:	6814      	ldr	r4, [r2, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f7fd f92f 	bl	80045be <lwip_htons>
 8007360:	4603      	mov	r3, r0
 8007362:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007364:	4b24      	ldr	r3, [pc, #144]	; (80073f8 <tcp_input+0x218>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	4a23      	ldr	r2, [pc, #140]	; (80073f8 <tcp_input+0x218>)
 800736c:	6814      	ldr	r4, [r2, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f7fd f932 	bl	80045d8 <lwip_htonl>
 8007374:	4603      	mov	r3, r0
 8007376:	6063      	str	r3, [r4, #4]
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	4a29      	ldr	r2, [pc, #164]	; (8007420 <tcp_input+0x240>)
 800737c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800737e:	4b1e      	ldr	r3, [pc, #120]	; (80073f8 <tcp_input+0x218>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4a1c      	ldr	r2, [pc, #112]	; (80073f8 <tcp_input+0x218>)
 8007386:	6814      	ldr	r4, [r2, #0]
 8007388:	4618      	mov	r0, r3
 800738a:	f7fd f925 	bl	80045d8 <lwip_htonl>
 800738e:	4603      	mov	r3, r0
 8007390:	60a3      	str	r3, [r4, #8]
 8007392:	68a3      	ldr	r3, [r4, #8]
 8007394:	4a23      	ldr	r2, [pc, #140]	; (8007424 <tcp_input+0x244>)
 8007396:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007398:	4b17      	ldr	r3, [pc, #92]	; (80073f8 <tcp_input+0x218>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	89db      	ldrh	r3, [r3, #14]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4a15      	ldr	r2, [pc, #84]	; (80073f8 <tcp_input+0x218>)
 80073a2:	6814      	ldr	r4, [r2, #0]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fd f90a 	bl	80045be <lwip_htons>
 80073aa:	4603      	mov	r3, r0
 80073ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80073ae:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <tcp_input+0x218>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	899b      	ldrh	r3, [r3, #12]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fd f901 	bl	80045be <lwip_htons>
 80073bc:	4603      	mov	r3, r0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	4b18      	ldr	r3, [pc, #96]	; (8007428 <tcp_input+0x248>)
 80073c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	891a      	ldrh	r2, [r3, #8]
 80073ce:	4b16      	ldr	r3, [pc, #88]	; (8007428 <tcp_input+0x248>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	bf14      	ite	ne
 80073da:	2301      	movne	r3, #1
 80073dc:	2300      	moveq	r3, #0
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	4413      	add	r3, r2
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	4b11      	ldr	r3, [pc, #68]	; (800742c <tcp_input+0x24c>)
 80073e8:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073ee:	4b10      	ldr	r3, [pc, #64]	; (8007430 <tcp_input+0x250>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	61fb      	str	r3, [r7, #28]
 80073f4:	e082      	b.n	80074fc <tcp_input+0x31c>
 80073f6:	bf00      	nop
 80073f8:	2000a15c 	.word	0x2000a15c
 80073fc:	20004a18 	.word	0x20004a18
 8007400:	2000a160 	.word	0x2000a160
 8007404:	2000a164 	.word	0x2000a164
 8007408:	2000a162 	.word	0x2000a162
 800740c:	0800f5d4 	.word	0x0800f5d4
 8007410:	0800f608 	.word	0x0800f608
 8007414:	0800f618 	.word	0x0800f618
 8007418:	0800f640 	.word	0x0800f640
 800741c:	0800f64c 	.word	0x0800f64c
 8007420:	2000a16c 	.word	0x2000a16c
 8007424:	2000a170 	.word	0x2000a170
 8007428:	2000a178 	.word	0x2000a178
 800742c:	2000a176 	.word	0x2000a176
 8007430:	2000a140 	.word	0x2000a140
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	7d1b      	ldrb	r3, [r3, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d105      	bne.n	8007448 <tcp_input+0x268>
 800743c:	4b6e      	ldr	r3, [pc, #440]	; (80075f8 <tcp_input+0x418>)
 800743e:	22e2      	movs	r2, #226	; 0xe2
 8007440:	496e      	ldr	r1, [pc, #440]	; (80075fc <tcp_input+0x41c>)
 8007442:	486f      	ldr	r0, [pc, #444]	; (8007600 <tcp_input+0x420>)
 8007444:	f006 f94e 	bl	800d6e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	7d1b      	ldrb	r3, [r3, #20]
 800744c:	2b0a      	cmp	r3, #10
 800744e:	d105      	bne.n	800745c <tcp_input+0x27c>
 8007450:	4b69      	ldr	r3, [pc, #420]	; (80075f8 <tcp_input+0x418>)
 8007452:	22e3      	movs	r2, #227	; 0xe3
 8007454:	496b      	ldr	r1, [pc, #428]	; (8007604 <tcp_input+0x424>)
 8007456:	486a      	ldr	r0, [pc, #424]	; (8007600 <tcp_input+0x420>)
 8007458:	f006 f944 	bl	800d6e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	7d1b      	ldrb	r3, [r3, #20]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d105      	bne.n	8007470 <tcp_input+0x290>
 8007464:	4b64      	ldr	r3, [pc, #400]	; (80075f8 <tcp_input+0x418>)
 8007466:	22e4      	movs	r2, #228	; 0xe4
 8007468:	4967      	ldr	r1, [pc, #412]	; (8007608 <tcp_input+0x428>)
 800746a:	4865      	ldr	r0, [pc, #404]	; (8007600 <tcp_input+0x420>)
 800746c:	f006 f93a 	bl	800d6e4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	8b1a      	ldrh	r2, [r3, #24]
 8007474:	4b65      	ldr	r3, [pc, #404]	; (800760c <tcp_input+0x42c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	429a      	cmp	r2, r3
 800747e:	d138      	bne.n	80074f2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	8ada      	ldrh	r2, [r3, #22]
 8007484:	4b61      	ldr	r3, [pc, #388]	; (800760c <tcp_input+0x42c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	885b      	ldrh	r3, [r3, #2]
 800748a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800748c:	429a      	cmp	r2, r3
 800748e:	d130      	bne.n	80074f2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	4b5e      	ldr	r3, [pc, #376]	; (8007610 <tcp_input+0x430>)
 8007496:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007498:	429a      	cmp	r2, r3
 800749a:	d12a      	bne.n	80074f2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	4b5b      	ldr	r3, [pc, #364]	; (8007610 <tcp_input+0x430>)
 80074a2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d124      	bne.n	80074f2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d105      	bne.n	80074be <tcp_input+0x2de>
 80074b2:	4b51      	ldr	r3, [pc, #324]	; (80075f8 <tcp_input+0x418>)
 80074b4:	22ec      	movs	r2, #236	; 0xec
 80074b6:	4957      	ldr	r1, [pc, #348]	; (8007614 <tcp_input+0x434>)
 80074b8:	4851      	ldr	r0, [pc, #324]	; (8007600 <tcp_input+0x420>)
 80074ba:	f006 f913 	bl	800d6e4 <iprintf>
      if (prev != NULL) {
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <tcp_input+0x2fa>
        prev->next = pcb->next;
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80074cc:	4b52      	ldr	r3, [pc, #328]	; (8007618 <tcp_input+0x438>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80074d4:	4a50      	ldr	r2, [pc, #320]	; (8007618 <tcp_input+0x438>)
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d10f      	bne.n	8007504 <tcp_input+0x324>
 80074e4:	4b44      	ldr	r3, [pc, #272]	; (80075f8 <tcp_input+0x418>)
 80074e6:	22f4      	movs	r2, #244	; 0xf4
 80074e8:	494c      	ldr	r1, [pc, #304]	; (800761c <tcp_input+0x43c>)
 80074ea:	4845      	ldr	r0, [pc, #276]	; (8007600 <tcp_input+0x420>)
 80074ec:	f006 f8fa 	bl	800d6e4 <iprintf>
      break;
 80074f0:	e008      	b.n	8007504 <tcp_input+0x324>
    }
    prev = pcb;
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	61fb      	str	r3, [r7, #28]
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d198      	bne.n	8007434 <tcp_input+0x254>
 8007502:	e000      	b.n	8007506 <tcp_input+0x326>
      break;
 8007504:	bf00      	nop
  }

  if (pcb == NULL) {
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f040 808f 	bne.w	800762c <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800750e:	4b44      	ldr	r3, [pc, #272]	; (8007620 <tcp_input+0x440>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	e02f      	b.n	8007576 <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	7d1b      	ldrb	r3, [r3, #20]
 800751a:	2b0a      	cmp	r3, #10
 800751c:	d005      	beq.n	800752a <tcp_input+0x34a>
 800751e:	4b36      	ldr	r3, [pc, #216]	; (80075f8 <tcp_input+0x418>)
 8007520:	22fe      	movs	r2, #254	; 0xfe
 8007522:	4940      	ldr	r1, [pc, #256]	; (8007624 <tcp_input+0x444>)
 8007524:	4836      	ldr	r0, [pc, #216]	; (8007600 <tcp_input+0x420>)
 8007526:	f006 f8dd 	bl	800d6e4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	8b1a      	ldrh	r2, [r3, #24]
 800752e:	4b37      	ldr	r3, [pc, #220]	; (800760c <tcp_input+0x42c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	b29b      	uxth	r3, r3
 8007536:	429a      	cmp	r2, r3
 8007538:	d11a      	bne.n	8007570 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	8ada      	ldrh	r2, [r3, #22]
 800753e:	4b33      	ldr	r3, [pc, #204]	; (800760c <tcp_input+0x42c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	885b      	ldrh	r3, [r3, #2]
 8007544:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007546:	429a      	cmp	r2, r3
 8007548:	d112      	bne.n	8007570 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	4b30      	ldr	r3, [pc, #192]	; (8007610 <tcp_input+0x430>)
 8007550:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007552:	429a      	cmp	r2, r3
 8007554:	d10c      	bne.n	8007570 <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4b2d      	ldr	r3, [pc, #180]	; (8007610 <tcp_input+0x430>)
 800755c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800755e:	429a      	cmp	r2, r3
 8007560:	d106      	bne.n	8007570 <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8007562:	69f8      	ldr	r0, [r7, #28]
 8007564:	f000 fb16 	bl	8007b94 <tcp_timewait_input>
        pbuf_free(p);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7fe f95b 	bl	8005824 <pbuf_free>
        return;
 800756e:	e1e9      	b.n	8007944 <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1cc      	bne.n	8007516 <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800757c:	2300      	movs	r3, #0
 800757e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007580:	4b29      	ldr	r3, [pc, #164]	; (8007628 <tcp_input+0x448>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	e019      	b.n	80075bc <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	8ada      	ldrh	r2, [r3, #22]
 800758c:	4b1f      	ldr	r3, [pc, #124]	; (800760c <tcp_input+0x42c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	885b      	ldrh	r3, [r3, #2]
 8007592:	b29b      	uxth	r3, r3
 8007594:	429a      	cmp	r2, r3
 8007596:	d10c      	bne.n	80075b2 <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	4b1c      	ldr	r3, [pc, #112]	; (8007610 <tcp_input+0x430>)
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d00f      	beq.n	80075c4 <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00d      	beq.n	80075c6 <tcp_input+0x3e6>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d009      	beq.n	80075c6 <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e2      	bne.n	8007588 <tcp_input+0x3a8>
 80075c2:	e000      	b.n	80075c6 <tcp_input+0x3e6>
            break;
 80075c4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d02f      	beq.n	800762c <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80075da:	4b13      	ldr	r3, [pc, #76]	; (8007628 <tcp_input+0x448>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80075e2:	4a11      	ldr	r2, [pc, #68]	; (8007628 <tcp_input+0x448>)
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80075e8:	6978      	ldr	r0, [r7, #20]
 80075ea:	f000 f9f3 	bl	80079d4 <tcp_listen_input>
      pbuf_free(p);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fe f918 	bl	8005824 <pbuf_free>
      return;
 80075f4:	e1a6      	b.n	8007944 <tcp_input+0x764>
 80075f6:	bf00      	nop
 80075f8:	0800f5d4 	.word	0x0800f5d4
 80075fc:	0800f66c 	.word	0x0800f66c
 8007600:	0800f618 	.word	0x0800f618
 8007604:	0800f694 	.word	0x0800f694
 8007608:	0800f6c0 	.word	0x0800f6c0
 800760c:	2000a15c 	.word	0x2000a15c
 8007610:	20004a18 	.word	0x20004a18
 8007614:	0800f6e8 	.word	0x0800f6e8
 8007618:	2000a140 	.word	0x2000a140
 800761c:	0800f714 	.word	0x0800f714
 8007620:	2000a144 	.word	0x2000a144
 8007624:	0800f740 	.word	0x0800f740
 8007628:	2000a13c 	.word	0x2000a13c
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8156 	beq.w	80078e0 <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007634:	4b94      	ldr	r3, [pc, #592]	; (8007888 <tcp_input+0x6a8>)
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	891a      	ldrh	r2, [r3, #8]
 800763e:	4b92      	ldr	r3, [pc, #584]	; (8007888 <tcp_input+0x6a8>)
 8007640:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007642:	4a91      	ldr	r2, [pc, #580]	; (8007888 <tcp_input+0x6a8>)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007648:	4b90      	ldr	r3, [pc, #576]	; (800788c <tcp_input+0x6ac>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a8e      	ldr	r2, [pc, #568]	; (8007888 <tcp_input+0x6a8>)
 800764e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007650:	4b8f      	ldr	r3, [pc, #572]	; (8007890 <tcp_input+0x6b0>)
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007656:	4b8f      	ldr	r3, [pc, #572]	; (8007894 <tcp_input+0x6b4>)
 8007658:	2200      	movs	r2, #0
 800765a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800765c:	4b8e      	ldr	r3, [pc, #568]	; (8007898 <tcp_input+0x6b8>)
 800765e:	2200      	movs	r2, #0
 8007660:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007662:	4b8e      	ldr	r3, [pc, #568]	; (800789c <tcp_input+0x6bc>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b00      	cmp	r3, #0
 800766c:	d006      	beq.n	800767c <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	7b5b      	ldrb	r3, [r3, #13]
 8007672:	f043 0301 	orr.w	r3, r3, #1
 8007676:	b2da      	uxtb	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007680:	2b00      	cmp	r3, #0
 8007682:	d017      	beq.n	80076b4 <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007684:	69f8      	ldr	r0, [r7, #28]
 8007686:	f7ff fa3f 	bl	8006b08 <tcp_process_refused_data>
 800768a:	4603      	mov	r3, r0
 800768c:	f113 0f0d 	cmn.w	r3, #13
 8007690:	d007      	beq.n	80076a2 <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00c      	beq.n	80076b4 <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800769a:	4b81      	ldr	r3, [pc, #516]	; (80078a0 <tcp_input+0x6c0>)
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d008      	beq.n	80076b4 <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f040 80e2 	bne.w	8007870 <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80076ac:	69f8      	ldr	r0, [r7, #28]
 80076ae:	f002 f9eb 	bl	8009a88 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80076b2:	e0dd      	b.n	8007870 <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 80076b4:	4a7b      	ldr	r2, [pc, #492]	; (80078a4 <tcp_input+0x6c4>)
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80076ba:	69f8      	ldr	r0, [r7, #28]
 80076bc:	f000 fad2 	bl	8007c64 <tcp_process>
 80076c0:	4603      	mov	r3, r0
 80076c2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80076c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076c8:	f113 0f0d 	cmn.w	r3, #13
 80076cc:	f000 80d2 	beq.w	8007874 <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 80076d0:	4b70      	ldr	r3, [pc, #448]	; (8007894 <tcp_input+0x6b4>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d016      	beq.n	800770a <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d008      	beq.n	80076f8 <tcp_input+0x518>
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	6912      	ldr	r2, [r2, #16]
 80076f0:	f06f 010d 	mvn.w	r1, #13
 80076f4:	4610      	mov	r0, r2
 80076f6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80076f8:	69f9      	ldr	r1, [r7, #28]
 80076fa:	486b      	ldr	r0, [pc, #428]	; (80078a8 <tcp_input+0x6c8>)
 80076fc:	f7ff fc58 	bl	8006fb0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007700:	69f9      	ldr	r1, [r7, #28]
 8007702:	2001      	movs	r0, #1
 8007704:	f7fd fb50 	bl	8004da8 <memp_free>
 8007708:	e0d7      	b.n	80078ba <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800770e:	4b62      	ldr	r3, [pc, #392]	; (8007898 <tcp_input+0x6b8>)
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d01b      	beq.n	800774e <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007716:	4b60      	ldr	r3, [pc, #384]	; (8007898 <tcp_input+0x6b8>)
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <tcp_input+0x558>
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	6910      	ldr	r0, [r2, #16]
 800772c:	89fa      	ldrh	r2, [r7, #14]
 800772e:	69f9      	ldr	r1, [r7, #28]
 8007730:	4798      	blx	r3
 8007732:	4603      	mov	r3, r0
 8007734:	74fb      	strb	r3, [r7, #19]
 8007736:	e001      	b.n	800773c <tcp_input+0x55c>
 8007738:	2300      	movs	r3, #0
 800773a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800773c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007740:	f113 0f0d 	cmn.w	r3, #13
 8007744:	f000 8098 	beq.w	8007878 <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007748:	4b53      	ldr	r3, [pc, #332]	; (8007898 <tcp_input+0x6b8>)
 800774a:	2200      	movs	r2, #0
 800774c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800774e:	69f8      	ldr	r0, [r7, #28]
 8007750:	f000 f90e 	bl	8007970 <tcp_input_delayed_close>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	f040 8090 	bne.w	800787c <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800775c:	4b4c      	ldr	r3, [pc, #304]	; (8007890 <tcp_input+0x6b0>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d041      	beq.n	80077e8 <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007768:	2b00      	cmp	r3, #0
 800776a:	d006      	beq.n	800777a <tcp_input+0x59a>
 800776c:	4b4f      	ldr	r3, [pc, #316]	; (80078ac <tcp_input+0x6cc>)
 800776e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007772:	494f      	ldr	r1, [pc, #316]	; (80078b0 <tcp_input+0x6d0>)
 8007774:	484f      	ldr	r0, [pc, #316]	; (80078b4 <tcp_input+0x6d4>)
 8007776:	f005 ffb5 	bl	800d6e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	7e9b      	ldrb	r3, [r3, #26]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b00      	cmp	r3, #0
 8007784:	d008      	beq.n	8007798 <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007786:	4b42      	ldr	r3, [pc, #264]	; (8007890 <tcp_input+0x6b0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe f84a 	bl	8005824 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007790:	69f8      	ldr	r0, [r7, #28]
 8007792:	f7fe fddf 	bl	8006354 <tcp_abort>
            goto aborted;
 8007796:	e090      	b.n	80078ba <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00c      	beq.n	80077bc <tcp_input+0x5dc>
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	6918      	ldr	r0, [r3, #16]
 80077ac:	4b38      	ldr	r3, [pc, #224]	; (8007890 <tcp_input+0x6b0>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	2300      	movs	r3, #0
 80077b2:	69f9      	ldr	r1, [r7, #28]
 80077b4:	47a0      	blx	r4
 80077b6:	4603      	mov	r3, r0
 80077b8:	74fb      	strb	r3, [r7, #19]
 80077ba:	e008      	b.n	80077ce <tcp_input+0x5ee>
 80077bc:	4b34      	ldr	r3, [pc, #208]	; (8007890 <tcp_input+0x6b0>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	2300      	movs	r3, #0
 80077c2:	69f9      	ldr	r1, [r7, #28]
 80077c4:	2000      	movs	r0, #0
 80077c6:	f7ff fa51 	bl	8006c6c <tcp_recv_null>
 80077ca:	4603      	mov	r3, r0
 80077cc:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80077ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077d2:	f113 0f0d 	cmn.w	r3, #13
 80077d6:	d053      	beq.n	8007880 <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80077d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80077e0:	4b2b      	ldr	r3, [pc, #172]	; (8007890 <tcp_input+0x6b0>)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80077e8:	4b2a      	ldr	r3, [pc, #168]	; (8007894 <tcp_input+0x6b4>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d030      	beq.n	8007856 <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d009      	beq.n	8007810 <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007800:	7b5a      	ldrb	r2, [r3, #13]
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007806:	f042 0220 	orr.w	r2, r2, #32
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	735a      	strb	r2, [r3, #13]
 800780e:	e022      	b.n	8007856 <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007814:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007818:	d005      	beq.n	8007826 <tcp_input+0x646>
              pcb->rcv_wnd++;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781e:	3301      	adds	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <tcp_input+0x668>
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	6918      	ldr	r0, [r3, #16]
 800783a:	2300      	movs	r3, #0
 800783c:	2200      	movs	r2, #0
 800783e:	69f9      	ldr	r1, [r7, #28]
 8007840:	47a0      	blx	r4
 8007842:	4603      	mov	r3, r0
 8007844:	74fb      	strb	r3, [r7, #19]
 8007846:	e001      	b.n	800784c <tcp_input+0x66c>
 8007848:	2300      	movs	r3, #0
 800784a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800784c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007850:	f113 0f0d 	cmn.w	r3, #13
 8007854:	d016      	beq.n	8007884 <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <tcp_input+0x6c4>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800785c:	69f8      	ldr	r0, [r7, #28]
 800785e:	f000 f887 	bl	8007970 <tcp_input_delayed_close>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d127      	bne.n	80078b8 <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007868:	69f8      	ldr	r0, [r7, #28]
 800786a:	f002 f969 	bl	8009b40 <tcp_output>
 800786e:	e024      	b.n	80078ba <tcp_input+0x6da>
        goto aborted;
 8007870:	bf00      	nop
 8007872:	e022      	b.n	80078ba <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007874:	bf00      	nop
 8007876:	e020      	b.n	80078ba <tcp_input+0x6da>
              goto aborted;
 8007878:	bf00      	nop
 800787a:	e01e      	b.n	80078ba <tcp_input+0x6da>
          goto aborted;
 800787c:	bf00      	nop
 800787e:	e01c      	b.n	80078ba <tcp_input+0x6da>
            goto aborted;
 8007880:	bf00      	nop
 8007882:	e01a      	b.n	80078ba <tcp_input+0x6da>
              goto aborted;
 8007884:	bf00      	nop
 8007886:	e018      	b.n	80078ba <tcp_input+0x6da>
 8007888:	2000a14c 	.word	0x2000a14c
 800788c:	2000a15c 	.word	0x2000a15c
 8007890:	2000a17c 	.word	0x2000a17c
 8007894:	2000a179 	.word	0x2000a179
 8007898:	2000a174 	.word	0x2000a174
 800789c:	2000a178 	.word	0x2000a178
 80078a0:	2000a176 	.word	0x2000a176
 80078a4:	2000a180 	.word	0x2000a180
 80078a8:	2000a140 	.word	0x2000a140
 80078ac:	0800f5d4 	.word	0x0800f5d4
 80078b0:	0800f770 	.word	0x0800f770
 80078b4:	0800f618 	.word	0x0800f618
          goto aborted;
 80078b8:	bf00      	nop
    tcp_input_pcb = NULL;
 80078ba:	4b24      	ldr	r3, [pc, #144]	; (800794c <tcp_input+0x76c>)
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80078c0:	4b23      	ldr	r3, [pc, #140]	; (8007950 <tcp_input+0x770>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80078c6:	4b23      	ldr	r3, [pc, #140]	; (8007954 <tcp_input+0x774>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d039      	beq.n	8007942 <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 80078ce:	4b21      	ldr	r3, [pc, #132]	; (8007954 <tcp_input+0x774>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fd ffa6 	bl	8005824 <pbuf_free>
      inseg.p = NULL;
 80078d8:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <tcp_input+0x774>)
 80078da:	2200      	movs	r2, #0
 80078dc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80078de:	e030      	b.n	8007942 <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80078e0:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <tcp_input+0x778>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	899b      	ldrh	r3, [r3, #12]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fc fe68 	bl	80045be <lwip_htons>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d115      	bne.n	8007924 <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80078f8:	4b18      	ldr	r3, [pc, #96]	; (800795c <tcp_input+0x77c>)
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	4b18      	ldr	r3, [pc, #96]	; (8007960 <tcp_input+0x780>)
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	4b18      	ldr	r3, [pc, #96]	; (8007964 <tcp_input+0x784>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007908:	4b13      	ldr	r3, [pc, #76]	; (8007958 <tcp_input+0x778>)
 800790a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800790c:	885b      	ldrh	r3, [r3, #2]
 800790e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007910:	4a11      	ldr	r2, [pc, #68]	; (8007958 <tcp_input+0x778>)
 8007912:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007914:	8812      	ldrh	r2, [r2, #0]
 8007916:	b292      	uxth	r2, r2
 8007918:	9201      	str	r2, [sp, #4]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	4b12      	ldr	r3, [pc, #72]	; (8007968 <tcp_input+0x788>)
 800791e:	4a13      	ldr	r2, [pc, #76]	; (800796c <tcp_input+0x78c>)
 8007920:	f002 fb92 	bl	800a048 <tcp_rst>
    pbuf_free(p);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fd ff7d 	bl	8005824 <pbuf_free>
  return;
 800792a:	e00a      	b.n	8007942 <tcp_input+0x762>
    goto dropped;
 800792c:	bf00      	nop
 800792e:	e004      	b.n	800793a <tcp_input+0x75a>
    goto dropped;
 8007930:	bf00      	nop
 8007932:	e002      	b.n	800793a <tcp_input+0x75a>
    goto dropped;
 8007934:	bf00      	nop
 8007936:	e000      	b.n	800793a <tcp_input+0x75a>
      goto dropped;
 8007938:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fd ff72 	bl	8005824 <pbuf_free>
 8007940:	e000      	b.n	8007944 <tcp_input+0x764>
  return;
 8007942:	bf00      	nop
}
 8007944:	3724      	adds	r7, #36	; 0x24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd90      	pop	{r4, r7, pc}
 800794a:	bf00      	nop
 800794c:	2000a180 	.word	0x2000a180
 8007950:	2000a17c 	.word	0x2000a17c
 8007954:	2000a14c 	.word	0x2000a14c
 8007958:	2000a15c 	.word	0x2000a15c
 800795c:	2000a170 	.word	0x2000a170
 8007960:	2000a176 	.word	0x2000a176
 8007964:	2000a16c 	.word	0x2000a16c
 8007968:	20004a28 	.word	0x20004a28
 800796c:	20004a2c 	.word	0x20004a2c

08007970 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8007978:	4b14      	ldr	r3, [pc, #80]	; (80079cc <tcp_input_delayed_close+0x5c>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	f003 0310 	and.w	r3, r3, #16
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01d      	beq.n	80079c0 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7e9b      	ldrb	r3, [r3, #26]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10d      	bne.n	80079ac <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d008      	beq.n	80079ac <tcp_input_delayed_close+0x3c>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6912      	ldr	r2, [r2, #16]
 80079a4:	f06f 010e 	mvn.w	r1, #14
 80079a8:	4610      	mov	r0, r2
 80079aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	4808      	ldr	r0, [pc, #32]	; (80079d0 <tcp_input_delayed_close+0x60>)
 80079b0:	f7ff fafe 	bl	8006fb0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80079b4:	6879      	ldr	r1, [r7, #4]
 80079b6:	2001      	movs	r0, #1
 80079b8:	f7fd f9f6 	bl	8004da8 <memp_free>
    return 1;
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <tcp_input_delayed_close+0x52>
  }
  return 0;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	2000a179 	.word	0x2000a179
 80079d0:	2000a140 	.word	0x2000a140

080079d4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af02      	add	r7, sp, #8
 80079da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80079dc:	4b63      	ldr	r3, [pc, #396]	; (8007b6c <tcp_listen_input+0x198>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f040 80bb 	bne.w	8007b60 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80079ea:	4b60      	ldr	r3, [pc, #384]	; (8007b6c <tcp_listen_input+0x198>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d016      	beq.n	8007a24 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079f6:	4b5e      	ldr	r3, [pc, #376]	; (8007b70 <tcp_listen_input+0x19c>)
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	4b5e      	ldr	r3, [pc, #376]	; (8007b74 <tcp_listen_input+0x1a0>)
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	4b5d      	ldr	r3, [pc, #372]	; (8007b78 <tcp_listen_input+0x1a4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a06:	4b5d      	ldr	r3, [pc, #372]	; (8007b7c <tcp_listen_input+0x1a8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a0a:	885b      	ldrh	r3, [r3, #2]
 8007a0c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a0e:	4a5b      	ldr	r2, [pc, #364]	; (8007b7c <tcp_listen_input+0x1a8>)
 8007a10:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a12:	8812      	ldrh	r2, [r2, #0]
 8007a14:	b292      	uxth	r2, r2
 8007a16:	9201      	str	r2, [sp, #4]
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	4b59      	ldr	r3, [pc, #356]	; (8007b80 <tcp_listen_input+0x1ac>)
 8007a1c:	4a59      	ldr	r2, [pc, #356]	; (8007b84 <tcp_listen_input+0x1b0>)
 8007a1e:	f002 fb13 	bl	800a048 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007a22:	e09f      	b.n	8007b64 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8007a24:	4b51      	ldr	r3, [pc, #324]	; (8007b6c <tcp_listen_input+0x198>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 8099 	beq.w	8007b64 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	7d5b      	ldrb	r3, [r3, #21]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff f9f6 	bl	8006e28 <tcp_alloc>
 8007a3c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d111      	bne.n	8007a68 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <tcp_listen_input+0x8e>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6910      	ldr	r0, [r2, #16]
 8007a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4798      	blx	r3
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73bb      	strb	r3, [r7, #14]
      return;
 8007a60:	e081      	b.n	8007b66 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007a62:	23f0      	movs	r3, #240	; 0xf0
 8007a64:	73bb      	strb	r3, [r7, #14]
      return;
 8007a66:	e07e      	b.n	8007b66 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007a68:	4b47      	ldr	r3, [pc, #284]	; (8007b88 <tcp_listen_input+0x1b4>)
 8007a6a:	695a      	ldr	r2, [r3, #20]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007a70:	4b45      	ldr	r3, [pc, #276]	; (8007b88 <tcp_listen_input+0x1b4>)
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8ada      	ldrh	r2, [r3, #22]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007a80:	4b3e      	ldr	r3, [pc, #248]	; (8007b7c <tcp_listen_input+0x1a8>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2203      	movs	r2, #3
 8007a90:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007a92:	4b39      	ldr	r3, [pc, #228]	; (8007b78 <tcp_listen_input+0x1a4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007aa4:	6978      	ldr	r0, [r7, #20]
 8007aa6:	f7ff faff 	bl	80070a8 <tcp_next_iss>
 8007aaa:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007ac4:	4b2c      	ldr	r3, [pc, #176]	; (8007b78 <tcp_listen_input+0x1a4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	1e5a      	subs	r2, r3, #1
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691a      	ldr	r2, [r3, #16]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7a1b      	ldrb	r3, [r3, #8]
 8007ae0:	f003 030c 	and.w	r3, r3, #12
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007aea:	4b28      	ldr	r3, [pc, #160]	; (8007b8c <tcp_listen_input+0x1b8>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	60da      	str	r2, [r3, #12]
 8007af2:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <tcp_listen_input+0x1b8>)
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	f002 fcee 	bl	800a4d8 <tcp_timer_needed>
 8007afc:	4b24      	ldr	r3, [pc, #144]	; (8007b90 <tcp_listen_input+0x1bc>)
 8007afe:	2201      	movs	r2, #1
 8007b00:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007b02:	6978      	ldr	r0, [r7, #20]
 8007b04:	f001 fd0c 	bl	8009520 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007b08:	4b1c      	ldr	r3, [pc, #112]	; (8007b7c <tcp_listen_input+0x1a8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	89db      	ldrh	r3, [r3, #14]
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	f7ff fad1 	bl	80070d4 <tcp_eff_send_mss_impl>
 8007b32:	4603      	mov	r3, r0
 8007b34:	461a      	mov	r2, r3
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007b3a:	2112      	movs	r1, #18
 8007b3c:	6978      	ldr	r0, [r7, #20]
 8007b3e:	f001 fea7 	bl	8009890 <tcp_enqueue_flags>
 8007b42:	4603      	mov	r3, r0
 8007b44:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d004      	beq.n	8007b58 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8007b4e:	2100      	movs	r1, #0
 8007b50:	6978      	ldr	r0, [r7, #20]
 8007b52:	f7fe fb4d 	bl	80061f0 <tcp_abandon>
      return;
 8007b56:	e006      	b.n	8007b66 <tcp_listen_input+0x192>
    tcp_output(npcb);
 8007b58:	6978      	ldr	r0, [r7, #20]
 8007b5a:	f001 fff1 	bl	8009b40 <tcp_output>
  return;
 8007b5e:	e001      	b.n	8007b64 <tcp_listen_input+0x190>
    return;
 8007b60:	bf00      	nop
 8007b62:	e000      	b.n	8007b66 <tcp_listen_input+0x192>
  return;
 8007b64:	bf00      	nop
}
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	2000a178 	.word	0x2000a178
 8007b70:	2000a170 	.word	0x2000a170
 8007b74:	2000a176 	.word	0x2000a176
 8007b78:	2000a16c 	.word	0x2000a16c
 8007b7c:	2000a15c 	.word	0x2000a15c
 8007b80:	20004a28 	.word	0x20004a28
 8007b84:	20004a2c 	.word	0x20004a2c
 8007b88:	20004a18 	.word	0x20004a18
 8007b8c:	2000a140 	.word	0x2000a140
 8007b90:	2000a148 	.word	0x2000a148

08007b94 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007b9c:	4b29      	ldr	r3, [pc, #164]	; (8007c44 <tcp_timewait_input+0xb0>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d146      	bne.n	8007c36 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007ba8:	4b26      	ldr	r3, [pc, #152]	; (8007c44 <tcp_timewait_input+0xb0>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d027      	beq.n	8007c04 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007bb4:	4b24      	ldr	r3, [pc, #144]	; (8007c48 <tcp_timewait_input+0xb4>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	db2a      	blt.n	8007c18 <tcp_timewait_input+0x84>
 8007bc2:	4b21      	ldr	r3, [pc, #132]	; (8007c48 <tcp_timewait_input+0xb4>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007bce:	440b      	add	r3, r1
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dc20      	bgt.n	8007c18 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bd6:	4b1d      	ldr	r3, [pc, #116]	; (8007c4c <tcp_timewait_input+0xb8>)
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	4b1d      	ldr	r3, [pc, #116]	; (8007c50 <tcp_timewait_input+0xbc>)
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	4b19      	ldr	r3, [pc, #100]	; (8007c48 <tcp_timewait_input+0xb4>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007be6:	4b1b      	ldr	r3, [pc, #108]	; (8007c54 <tcp_timewait_input+0xc0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bea:	885b      	ldrh	r3, [r3, #2]
 8007bec:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bee:	4a19      	ldr	r2, [pc, #100]	; (8007c54 <tcp_timewait_input+0xc0>)
 8007bf0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bf2:	8812      	ldrh	r2, [r2, #0]
 8007bf4:	b292      	uxth	r2, r2
 8007bf6:	9201      	str	r2, [sp, #4]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <tcp_timewait_input+0xc4>)
 8007bfc:	4a17      	ldr	r2, [pc, #92]	; (8007c5c <tcp_timewait_input+0xc8>)
 8007bfe:	f002 fa23 	bl	800a048 <tcp_rst>
      return;
 8007c02:	e01b      	b.n	8007c3c <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8007c04:	4b0f      	ldr	r3, [pc, #60]	; (8007c44 <tcp_timewait_input+0xb0>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007c10:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <tcp_timewait_input+0xcc>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007c18:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <tcp_timewait_input+0xbc>)
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00c      	beq.n	8007c3a <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7e9b      	ldrb	r3, [r3, #26]
 8007c24:	f043 0302 	orr.w	r3, r3, #2
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 ff86 	bl	8009b40 <tcp_output>
  }
  return;
 8007c34:	e001      	b.n	8007c3a <tcp_timewait_input+0xa6>
    return;
 8007c36:	bf00      	nop
 8007c38:	e000      	b.n	8007c3c <tcp_timewait_input+0xa8>
  return;
 8007c3a:	bf00      	nop
}
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	2000a178 	.word	0x2000a178
 8007c48:	2000a16c 	.word	0x2000a16c
 8007c4c:	2000a170 	.word	0x2000a170
 8007c50:	2000a176 	.word	0x2000a176
 8007c54:	2000a15c 	.word	0x2000a15c
 8007c58:	20004a28 	.word	0x20004a28
 8007c5c:	20004a2c 	.word	0x20004a2c
 8007c60:	2000a134 	.word	0x2000a134

08007c64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08a      	sub	sp, #40	; 0x28
 8007c68:	af02      	add	r7, sp, #8
 8007c6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007c74:	4b93      	ldr	r3, [pc, #588]	; (8007ec4 <tcp_process+0x260>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d04e      	beq.n	8007d1e <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7d1b      	ldrb	r3, [r3, #20]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d108      	bne.n	8007c9a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c8c:	4b8e      	ldr	r3, [pc, #568]	; (8007ec8 <tcp_process+0x264>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d123      	bne.n	8007cdc <tcp_process+0x78>
        acceptable = 1;
 8007c94:	2301      	movs	r3, #1
 8007c96:	76fb      	strb	r3, [r7, #27]
 8007c98:	e020      	b.n	8007cdc <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c9e:	4b8b      	ldr	r3, [pc, #556]	; (8007ecc <tcp_process+0x268>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d102      	bne.n	8007cac <tcp_process+0x48>
        acceptable = 1;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	76fb      	strb	r3, [r7, #27]
 8007caa:	e017      	b.n	8007cdc <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007cac:	4b87      	ldr	r3, [pc, #540]	; (8007ecc <tcp_process+0x268>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	db10      	blt.n	8007cdc <tcp_process+0x78>
 8007cba:	4b84      	ldr	r3, [pc, #528]	; (8007ecc <tcp_process+0x268>)
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007cc6:	440b      	add	r3, r1
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	dc06      	bgt.n	8007cdc <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	7e9b      	ldrb	r3, [r3, #26]
 8007cd2:	f043 0302 	orr.w	r3, r3, #2
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007cdc:	7efb      	ldrb	r3, [r7, #27]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d01b      	beq.n	8007d1a <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	7d1b      	ldrb	r3, [r3, #20]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <tcp_process+0x94>
 8007cea:	4b79      	ldr	r3, [pc, #484]	; (8007ed0 <tcp_process+0x26c>)
 8007cec:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007cf0:	4978      	ldr	r1, [pc, #480]	; (8007ed4 <tcp_process+0x270>)
 8007cf2:	4879      	ldr	r0, [pc, #484]	; (8007ed8 <tcp_process+0x274>)
 8007cf4:	f005 fcf6 	bl	800d6e4 <iprintf>
      recv_flags |= TF_RESET;
 8007cf8:	4b78      	ldr	r3, [pc, #480]	; (8007edc <tcp_process+0x278>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f043 0308 	orr.w	r3, r3, #8
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	4b76      	ldr	r3, [pc, #472]	; (8007edc <tcp_process+0x278>)
 8007d04:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7e9b      	ldrb	r3, [r3, #26]
 8007d0a:	f023 0301 	bic.w	r3, r3, #1
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8007d14:	f06f 030d 	mvn.w	r3, #13
 8007d18:	e348      	b.n	80083ac <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e346      	b.n	80083ac <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007d1e:	4b69      	ldr	r3, [pc, #420]	; (8007ec4 <tcp_process+0x260>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d010      	beq.n	8007d4c <tcp_process+0xe8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7d1b      	ldrb	r3, [r3, #20]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d00c      	beq.n	8007d4c <tcp_process+0xe8>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	7d1b      	ldrb	r3, [r3, #20]
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d008      	beq.n	8007d4c <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	7e9b      	ldrb	r3, [r3, #26]
 8007d3e:	f043 0302 	orr.w	r3, r3, #2
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e32f      	b.n	80083ac <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	7e9b      	ldrb	r3, [r3, #26]
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007d58:	4b61      	ldr	r3, [pc, #388]	; (8007ee0 <tcp_process+0x27c>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 fbd9 	bl	8009520 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	7d1b      	ldrb	r3, [r3, #20]
 8007d72:	3b02      	subs	r3, #2
 8007d74:	2b07      	cmp	r3, #7
 8007d76:	f200 8309 	bhi.w	800838c <tcp_process+0x728>
 8007d7a:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <tcp_process+0x11c>)
 8007d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d80:	08007da1 	.word	0x08007da1
 8007d84:	08007f97 	.word	0x08007f97
 8007d88:	080080ef 	.word	0x080080ef
 8007d8c:	08008119 	.word	0x08008119
 8007d90:	0800823b 	.word	0x0800823b
 8007d94:	080080ef 	.word	0x080080ef
 8007d98:	080082c7 	.word	0x080082c7
 8007d9c:	08008357 	.word	0x08008357
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007da0:	4b48      	ldr	r3, [pc, #288]	; (8007ec4 <tcp_process+0x260>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 80ca 	beq.w	8007f42 <tcp_process+0x2de>
 8007dae:	4b45      	ldr	r3, [pc, #276]	; (8007ec4 <tcp_process+0x260>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80c3 	beq.w	8007f42 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	4b41      	ldr	r3, [pc, #260]	; (8007ec8 <tcp_process+0x264>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	f040 80bb 	bne.w	8007f42 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8007dcc:	4b3f      	ldr	r3, [pc, #252]	; (8007ecc <tcp_process+0x268>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8007dde:	4b3a      	ldr	r3, [pc, #232]	; (8007ec8 <tcp_process+0x264>)
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8007de6:	4b3f      	ldr	r3, [pc, #252]	; (8007ee4 <tcp_process+0x280>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	89db      	ldrh	r3, [r3, #14]
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007e00:	4b32      	ldr	r3, [pc, #200]	; (8007ecc <tcp_process+0x268>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	1e5a      	subs	r2, r3, #1
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3304      	adds	r3, #4
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	f7ff f95a 	bl	80070d4 <tcp_eff_send_mss_impl>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007e32:	429a      	cmp	r2, r3
 8007e34:	bf38      	it	cc
 8007e36:	461a      	movcc	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	bf28      	it	cs
 8007e42:	4613      	movcs	r3, r2
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <tcp_process+0x200>
 8007e56:	4b1e      	ldr	r3, [pc, #120]	; (8007ed0 <tcp_process+0x26c>)
 8007e58:	f240 321a 	movw	r2, #794	; 0x31a
 8007e5c:	4922      	ldr	r1, [pc, #136]	; (8007ee8 <tcp_process+0x284>)
 8007e5e:	481e      	ldr	r0, [pc, #120]	; (8007ed8 <tcp_process+0x274>)
 8007e60:	f005 fc40 	bl	800d6e4 <iprintf>
      --pcb->snd_queuelen;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e78:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d111      	bne.n	8007ea4 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e84:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <tcp_process+0x236>
 8007e8c:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <tcp_process+0x26c>)
 8007e8e:	f240 3222 	movw	r2, #802	; 0x322
 8007e92:	4916      	ldr	r1, [pc, #88]	; (8007eec <tcp_process+0x288>)
 8007e94:	4810      	ldr	r0, [pc, #64]	; (8007ed8 <tcp_process+0x274>)
 8007e96:	f005 fc25 	bl	800d6e4 <iprintf>
        pcb->unsent = rseg->next;
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	669a      	str	r2, [r3, #104]	; 0x68
 8007ea2:	e003      	b.n	8007eac <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8007eac:	69f8      	ldr	r0, [r7, #28]
 8007eae:	f7fe fea9 	bl	8006c04 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d11a      	bne.n	8007ef0 <tcp_process+0x28c>
        pcb->rtime = -1;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ec0:	861a      	strh	r2, [r3, #48]	; 0x30
 8007ec2:	e01c      	b.n	8007efe <tcp_process+0x29a>
 8007ec4:	2000a178 	.word	0x2000a178
 8007ec8:	2000a170 	.word	0x2000a170
 8007ecc:	2000a16c 	.word	0x2000a16c
 8007ed0:	0800f5d4 	.word	0x0800f5d4
 8007ed4:	0800f78c 	.word	0x0800f78c
 8007ed8:	0800f618 	.word	0x0800f618
 8007edc:	2000a179 	.word	0x2000a179
 8007ee0:	2000a134 	.word	0x2000a134
 8007ee4:	2000a15c 	.word	0x2000a15c
 8007ee8:	0800f7ac 	.word	0x0800f7ac
 8007eec:	0800f7c4 	.word	0x0800f7c4
      } else {
        pcb->rtime = 0;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00a      	beq.n	8007f1e <tcp_process+0x2ba>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	6910      	ldr	r0, [r2, #16]
 8007f12:	2200      	movs	r2, #0
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4798      	blx	r3
 8007f18:	4603      	mov	r3, r0
 8007f1a:	76bb      	strb	r3, [r7, #26]
 8007f1c:	e001      	b.n	8007f22 <tcp_process+0x2be>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8007f22:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f26:	f113 0f0d 	cmn.w	r3, #13
 8007f2a:	d102      	bne.n	8007f32 <tcp_process+0x2ce>
        return ERR_ABRT;
 8007f2c:	f06f 030c 	mvn.w	r3, #12
 8007f30:	e23c      	b.n	80083ac <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	7e9b      	ldrb	r3, [r3, #26]
 8007f36:	f043 0302 	orr.w	r3, r3, #2
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8007f40:	e226      	b.n	8008390 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 8007f42:	4b93      	ldr	r3, [pc, #588]	; (8008190 <tcp_process+0x52c>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 8220 	beq.w	8008390 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f50:	4b90      	ldr	r3, [pc, #576]	; (8008194 <tcp_process+0x530>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	4b90      	ldr	r3, [pc, #576]	; (8008198 <tcp_process+0x534>)
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4b90      	ldr	r3, [pc, #576]	; (800819c <tcp_process+0x538>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f60:	4b8f      	ldr	r3, [pc, #572]	; (80081a0 <tcp_process+0x53c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f64:	885b      	ldrh	r3, [r3, #2]
 8007f66:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f68:	4a8d      	ldr	r2, [pc, #564]	; (80081a0 <tcp_process+0x53c>)
 8007f6a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f6c:	8812      	ldrh	r2, [r2, #0]
 8007f6e:	b292      	uxth	r2, r2
 8007f70:	9201      	str	r2, [sp, #4]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	4b8b      	ldr	r3, [pc, #556]	; (80081a4 <tcp_process+0x540>)
 8007f76:	4a8c      	ldr	r2, [pc, #560]	; (80081a8 <tcp_process+0x544>)
 8007f78:	f002 f866 	bl	800a048 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	f200 8204 	bhi.w	8008390 <tcp_process+0x72c>
        pcb->rtime = 0;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f002 f8d0 	bl	800a134 <tcp_rexmit_rto>
    break;
 8007f94:	e1fc      	b.n	8008390 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8007f96:	4b7e      	ldr	r3, [pc, #504]	; (8008190 <tcp_process+0x52c>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	f003 0310 	and.w	r3, r3, #16
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 8091 	beq.w	80080c6 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007fa4:	4b7b      	ldr	r3, [pc, #492]	; (8008194 <tcp_process+0x530>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	db71      	blt.n	8008098 <tcp_process+0x434>
 8007fb4:	4b77      	ldr	r3, [pc, #476]	; (8008194 <tcp_process+0x530>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dc6a      	bgt.n	8008098 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <tcp_process+0x384>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <tcp_process+0x384>
 8007fda:	4b74      	ldr	r3, [pc, #464]	; (80081ac <tcp_process+0x548>)
 8007fdc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007fe0:	4973      	ldr	r1, [pc, #460]	; (80081b0 <tcp_process+0x54c>)
 8007fe2:	4874      	ldr	r0, [pc, #464]	; (80081b4 <tcp_process+0x550>)
 8007fe4:	f005 fb7e 	bl	800d6e4 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8007ff0:	23fa      	movs	r3, #250	; 0xfa
 8007ff2:	76bb      	strb	r3, [r7, #26]
 8007ff4:	e011      	b.n	800801a <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <tcp_process+0x3b2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6910      	ldr	r0, [r2, #16]
 800800a:	2200      	movs	r2, #0
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	4798      	blx	r3
 8008010:	4603      	mov	r3, r0
 8008012:	76bb      	strb	r3, [r7, #26]
 8008014:	e001      	b.n	800801a <tcp_process+0x3b6>
 8008016:	23f0      	movs	r3, #240	; 0xf0
 8008018:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800801a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8008022:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008026:	f113 0f0d 	cmn.w	r3, #13
 800802a:	d002      	beq.n	8008032 <tcp_process+0x3ce>
            tcp_abort(pcb);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7fe f991 	bl	8006354 <tcp_abort>
          }
          return ERR_ABRT;
 8008032:	f06f 030c 	mvn.w	r3, #12
 8008036:	e1b9      	b.n	80083ac <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fa3d 	bl	80084b8 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800803e:	4b5e      	ldr	r3, [pc, #376]	; (80081b8 <tcp_process+0x554>)
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <tcp_process+0x3ee>
          recv_acked--;
 8008046:	4b5c      	ldr	r3, [pc, #368]	; (80081b8 <tcp_process+0x554>)
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	3b01      	subs	r3, #1
 800804c:	b29a      	uxth	r2, r3
 800804e:	4b5a      	ldr	r3, [pc, #360]	; (80081b8 <tcp_process+0x554>)
 8008050:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	f241 121c 	movw	r2, #4380	; 0x111c
 800805c:	429a      	cmp	r2, r3
 800805e:	bf38      	it	cc
 8008060:	461a      	movcc	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4293      	cmp	r3, r2
 800806a:	bf28      	it	cs
 800806c:	4613      	movcs	r3, r2
 800806e:	b29a      	uxth	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8008076:	4b51      	ldr	r3, [pc, #324]	; (80081bc <tcp_process+0x558>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b00      	cmp	r3, #0
 8008080:	d034      	beq.n	80080ec <tcp_process+0x488>
          tcp_ack_now(pcb);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	7e9b      	ldrb	r3, [r3, #26]
 8008086:	f043 0302 	orr.w	r3, r3, #2
 800808a:	b2da      	uxtb	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2207      	movs	r2, #7
 8008094:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8008096:	e029      	b.n	80080ec <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008098:	4b3e      	ldr	r3, [pc, #248]	; (8008194 <tcp_process+0x530>)
 800809a:	6818      	ldr	r0, [r3, #0]
 800809c:	4b3e      	ldr	r3, [pc, #248]	; (8008198 <tcp_process+0x534>)
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	4b3e      	ldr	r3, [pc, #248]	; (800819c <tcp_process+0x538>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080a8:	4b3d      	ldr	r3, [pc, #244]	; (80081a0 <tcp_process+0x53c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80080ac:	885b      	ldrh	r3, [r3, #2]
 80080ae:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080b0:	4a3b      	ldr	r2, [pc, #236]	; (80081a0 <tcp_process+0x53c>)
 80080b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80080b4:	8812      	ldrh	r2, [r2, #0]
 80080b6:	b292      	uxth	r2, r2
 80080b8:	9201      	str	r2, [sp, #4]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	4b39      	ldr	r3, [pc, #228]	; (80081a4 <tcp_process+0x540>)
 80080be:	4a3a      	ldr	r2, [pc, #232]	; (80081a8 <tcp_process+0x544>)
 80080c0:	f001 ffc2 	bl	800a048 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80080c4:	e166      	b.n	8008394 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80080c6:	4b32      	ldr	r3, [pc, #200]	; (8008190 <tcp_process+0x52c>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 8160 	beq.w	8008394 <tcp_process+0x730>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	1e5a      	subs	r2, r3, #1
 80080da:	4b30      	ldr	r3, [pc, #192]	; (800819c <tcp_process+0x538>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	f040 8158 	bne.w	8008394 <tcp_process+0x730>
      tcp_rexmit(pcb);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f002 f85b 	bl	800a1a0 <tcp_rexmit>
    break;
 80080ea:	e153      	b.n	8008394 <tcp_process+0x730>
 80080ec:	e152      	b.n	8008394 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f9e2 	bl	80084b8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80080f4:	4b31      	ldr	r3, [pc, #196]	; (80081bc <tcp_process+0x558>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 814b 	beq.w	8008398 <tcp_process+0x734>
      tcp_ack_now(pcb);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	7e9b      	ldrb	r3, [r3, #26]
 8008106:	f043 0302 	orr.w	r3, r3, #2
 800810a:	b2da      	uxtb	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2207      	movs	r2, #7
 8008114:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008116:	e13f      	b.n	8008398 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f9cd 	bl	80084b8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800811e:	4b27      	ldr	r3, [pc, #156]	; (80081bc <tcp_process+0x558>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d070      	beq.n	800820c <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800812a:	4b19      	ldr	r3, [pc, #100]	; (8008190 <tcp_process+0x52c>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	f003 0310 	and.w	r3, r3, #16
 8008132:	2b00      	cmp	r3, #0
 8008134:	d05f      	beq.n	80081f6 <tcp_process+0x592>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800813a:	4b16      	ldr	r3, [pc, #88]	; (8008194 <tcp_process+0x530>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d159      	bne.n	80081f6 <tcp_process+0x592>
          pcb->unsent == NULL) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008146:	2b00      	cmp	r3, #0
 8008148:	d155      	bne.n	80081f6 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	7e9b      	ldrb	r3, [r3, #26]
 800814e:	f043 0302 	orr.w	r3, r3, #2
 8008152:	b2da      	uxtb	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7fe fee7 	bl	8006f2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800815e:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <tcp_process+0x55c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d105      	bne.n	8008174 <tcp_process+0x510>
 8008168:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <tcp_process+0x55c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	4a14      	ldr	r2, [pc, #80]	; (80081c0 <tcp_process+0x55c>)
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	e02d      	b.n	80081d0 <tcp_process+0x56c>
 8008174:	4b12      	ldr	r3, [pc, #72]	; (80081c0 <tcp_process+0x55c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	e026      	b.n	80081ca <tcp_process+0x566>
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	429a      	cmp	r2, r3
 8008184:	d11e      	bne.n	80081c4 <tcp_process+0x560>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	60da      	str	r2, [r3, #12]
 800818e:	e01f      	b.n	80081d0 <tcp_process+0x56c>
 8008190:	2000a178 	.word	0x2000a178
 8008194:	2000a170 	.word	0x2000a170
 8008198:	2000a176 	.word	0x2000a176
 800819c:	2000a16c 	.word	0x2000a16c
 80081a0:	2000a15c 	.word	0x2000a15c
 80081a4:	20004a28 	.word	0x20004a28
 80081a8:	20004a2c 	.word	0x20004a2c
 80081ac:	0800f5d4 	.word	0x0800f5d4
 80081b0:	0800f7d8 	.word	0x0800f7d8
 80081b4:	0800f618 	.word	0x0800f618
 80081b8:	2000a174 	.word	0x2000a174
 80081bc:	2000a179 	.word	0x2000a179
 80081c0:	2000a140 	.word	0x2000a140
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1d5      	bne.n	800817c <tcp_process+0x518>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	60da      	str	r2, [r3, #12]
 80081d6:	4b77      	ldr	r3, [pc, #476]	; (80083b4 <tcp_process+0x750>)
 80081d8:	2201      	movs	r2, #1
 80081da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	220a      	movs	r2, #10
 80081e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80081e2:	4b75      	ldr	r3, [pc, #468]	; (80083b8 <tcp_process+0x754>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	60da      	str	r2, [r3, #12]
 80081ea:	4a73      	ldr	r2, [pc, #460]	; (80083b8 <tcp_process+0x754>)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	f002 f972 	bl	800a4d8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80081f4:	e0d2      	b.n	800839c <tcp_process+0x738>
        tcp_ack_now(pcb);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	7e9b      	ldrb	r3, [r3, #26]
 80081fa:	f043 0302 	orr.w	r3, r3, #2
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2208      	movs	r2, #8
 8008208:	751a      	strb	r2, [r3, #20]
    break;
 800820a:	e0c7      	b.n	800839c <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800820c:	4b6b      	ldr	r3, [pc, #428]	; (80083bc <tcp_process+0x758>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 80c1 	beq.w	800839c <tcp_process+0x738>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800821e:	4b68      	ldr	r3, [pc, #416]	; (80083c0 <tcp_process+0x75c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	f040 80ba 	bne.w	800839c <tcp_process+0x738>
               pcb->unsent == NULL) {
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800822c:	2b00      	cmp	r3, #0
 800822e:	f040 80b5 	bne.w	800839c <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2206      	movs	r2, #6
 8008236:	751a      	strb	r2, [r3, #20]
    break;
 8008238:	e0b0      	b.n	800839c <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f93c 	bl	80084b8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008240:	4b60      	ldr	r3, [pc, #384]	; (80083c4 <tcp_process+0x760>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 80a9 	beq.w	80083a0 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7e9b      	ldrb	r3, [r3, #26]
 8008252:	f043 0302 	orr.w	r3, r3, #2
 8008256:	b2da      	uxtb	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7fe fe65 	bl	8006f2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008262:	4b59      	ldr	r3, [pc, #356]	; (80083c8 <tcp_process+0x764>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	429a      	cmp	r2, r3
 800826a:	d105      	bne.n	8008278 <tcp_process+0x614>
 800826c:	4b56      	ldr	r3, [pc, #344]	; (80083c8 <tcp_process+0x764>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	4a55      	ldr	r2, [pc, #340]	; (80083c8 <tcp_process+0x764>)
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	e013      	b.n	80082a0 <tcp_process+0x63c>
 8008278:	4b53      	ldr	r3, [pc, #332]	; (80083c8 <tcp_process+0x764>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	613b      	str	r3, [r7, #16]
 800827e:	e00c      	b.n	800829a <tcp_process+0x636>
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	429a      	cmp	r2, r3
 8008288:	d104      	bne.n	8008294 <tcp_process+0x630>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	60da      	str	r2, [r3, #12]
 8008292:	e005      	b.n	80082a0 <tcp_process+0x63c>
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1ef      	bne.n	8008280 <tcp_process+0x61c>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	60da      	str	r2, [r3, #12]
 80082a6:	4b43      	ldr	r3, [pc, #268]	; (80083b4 <tcp_process+0x750>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	220a      	movs	r2, #10
 80082b0:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80082b2:	4b41      	ldr	r3, [pc, #260]	; (80083b8 <tcp_process+0x754>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60da      	str	r2, [r3, #12]
 80082ba:	4a3f      	ldr	r2, [pc, #252]	; (80083b8 <tcp_process+0x754>)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	f002 f90a 	bl	800a4d8 <tcp_timer_needed>
    }
    break;
 80082c4:	e06c      	b.n	80083a0 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f8f6 	bl	80084b8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80082cc:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <tcp_process+0x758>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	f003 0310 	and.w	r3, r3, #16
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d065      	beq.n	80083a4 <tcp_process+0x740>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082dc:	4b38      	ldr	r3, [pc, #224]	; (80083c0 <tcp_process+0x75c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d15f      	bne.n	80083a4 <tcp_process+0x740>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d15b      	bne.n	80083a4 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7fe fe1d 	bl	8006f2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80082f2:	4b35      	ldr	r3, [pc, #212]	; (80083c8 <tcp_process+0x764>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d105      	bne.n	8008308 <tcp_process+0x6a4>
 80082fc:	4b32      	ldr	r3, [pc, #200]	; (80083c8 <tcp_process+0x764>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	4a31      	ldr	r2, [pc, #196]	; (80083c8 <tcp_process+0x764>)
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	e013      	b.n	8008330 <tcp_process+0x6cc>
 8008308:	4b2f      	ldr	r3, [pc, #188]	; (80083c8 <tcp_process+0x764>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	e00c      	b.n	800832a <tcp_process+0x6c6>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	429a      	cmp	r2, r3
 8008318:	d104      	bne.n	8008324 <tcp_process+0x6c0>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	60da      	str	r2, [r3, #12]
 8008322:	e005      	b.n	8008330 <tcp_process+0x6cc>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1ef      	bne.n	8008310 <tcp_process+0x6ac>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	60da      	str	r2, [r3, #12]
 8008336:	4b1f      	ldr	r3, [pc, #124]	; (80083b4 <tcp_process+0x750>)
 8008338:	2201      	movs	r2, #1
 800833a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	220a      	movs	r2, #10
 8008340:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008342:	4b1d      	ldr	r3, [pc, #116]	; (80083b8 <tcp_process+0x754>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60da      	str	r2, [r3, #12]
 800834a:	4a1b      	ldr	r2, [pc, #108]	; (80083b8 <tcp_process+0x754>)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	f002 f8c2 	bl	800a4d8 <tcp_timer_needed>
    }
    break;
 8008354:	e026      	b.n	80083a4 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8ae 	bl	80084b8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800835c:	4b17      	ldr	r3, [pc, #92]	; (80083bc <tcp_process+0x758>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	f003 0310 	and.w	r3, r3, #16
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01f      	beq.n	80083a8 <tcp_process+0x744>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800836c:	4b14      	ldr	r3, [pc, #80]	; (80083c0 <tcp_process+0x75c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d119      	bne.n	80083a8 <tcp_process+0x744>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008378:	2b00      	cmp	r3, #0
 800837a:	d115      	bne.n	80083a8 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800837c:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <tcp_process+0x760>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f043 0310 	orr.w	r3, r3, #16
 8008384:	b2da      	uxtb	r2, r3
 8008386:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <tcp_process+0x760>)
 8008388:	701a      	strb	r2, [r3, #0]
    }
    break;
 800838a:	e00d      	b.n	80083a8 <tcp_process+0x744>
  default:
    break;
 800838c:	bf00      	nop
 800838e:	e00c      	b.n	80083aa <tcp_process+0x746>
    break;
 8008390:	bf00      	nop
 8008392:	e00a      	b.n	80083aa <tcp_process+0x746>
    break;
 8008394:	bf00      	nop
 8008396:	e008      	b.n	80083aa <tcp_process+0x746>
    break;
 8008398:	bf00      	nop
 800839a:	e006      	b.n	80083aa <tcp_process+0x746>
    break;
 800839c:	bf00      	nop
 800839e:	e004      	b.n	80083aa <tcp_process+0x746>
    break;
 80083a0:	bf00      	nop
 80083a2:	e002      	b.n	80083aa <tcp_process+0x746>
    break;
 80083a4:	bf00      	nop
 80083a6:	e000      	b.n	80083aa <tcp_process+0x746>
    break;
 80083a8:	bf00      	nop
  }
  return ERR_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3720      	adds	r7, #32
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	2000a148 	.word	0x2000a148
 80083b8:	2000a144 	.word	0x2000a144
 80083bc:	2000a178 	.word	0x2000a178
 80083c0:	2000a170 	.word	0x2000a170
 80083c4:	2000a179 	.word	0x2000a179
 80083c8:	2000a140 	.word	0x2000a140

080083cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80083cc:	b590      	push	{r4, r7, lr}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	899b      	ldrh	r3, [r3, #12]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fc f8ed 	bl	80045be <lwip_htons>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d027      	beq.n	800843e <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80083ee:	6838      	ldr	r0, [r7, #0]
 80083f0:	f7fe fbf3 	bl	8006bda <tcp_segs_free>
    next = NULL;
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	e055      	b.n	80084a6 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	899b      	ldrh	r3, [r3, #12]
 8008400:	b29b      	uxth	r3, r3
 8008402:	4618      	mov	r0, r3
 8008404:	f7fc f8db 	bl	80045be <lwip_htons>
 8008408:	4603      	mov	r3, r0
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00d      	beq.n	800842e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	899b      	ldrh	r3, [r3, #12]
 8008418:	b29c      	uxth	r4, r3
 800841a:	2001      	movs	r0, #1
 800841c:	f7fc f8cf 	bl	80045be <lwip_htons>
 8008420:	4603      	mov	r3, r0
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	4322      	orrs	r2, r4
 800842a:	b292      	uxth	r2, r2
 800842c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f7fe fbe3 	bl	8006c04 <tcp_seg_free>
    while (next &&
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00e      	beq.n	8008462 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	891b      	ldrh	r3, [r3, #8]
 8008448:	461a      	mov	r2, r3
 800844a:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <tcp_oos_insert_segment+0xe8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	441a      	add	r2, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	8909      	ldrh	r1, [r1, #8]
 800845a:	440b      	add	r3, r1
 800845c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800845e:	2b00      	cmp	r3, #0
 8008460:	dacb      	bge.n	80083fa <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01e      	beq.n	80084a6 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	891b      	ldrh	r3, [r3, #8]
 800846c:	461a      	mov	r2, r3
 800846e:	4b11      	ldr	r3, [pc, #68]	; (80084b4 <tcp_oos_insert_segment+0xe8>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	441a      	add	r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800847c:	2b00      	cmp	r3, #0
 800847e:	dd12      	ble.n	80084a6 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	b29a      	uxth	r2, r3
 8008488:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <tcp_oos_insert_segment+0xe8>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	b29b      	uxth	r3, r3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	b29a      	uxth	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	891b      	ldrh	r3, [r3, #8]
 800849e:	4619      	mov	r1, r3
 80084a0:	4610      	mov	r0, r2
 80084a2:	f7fd f84b 	bl	800553c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	601a      	str	r2, [r3, #0]
}
 80084ac:	bf00      	nop
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd90      	pop	{r4, r7, pc}
 80084b4:	2000a16c 	.word	0x2000a16c

080084b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80084b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ba:	b08d      	sub	sp, #52	; 0x34
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	7d1b      	ldrb	r3, [r3, #20]
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d806      	bhi.n	80084da <tcp_receive+0x22>
 80084cc:	4b98      	ldr	r3, [pc, #608]	; (8008730 <tcp_receive+0x278>)
 80084ce:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80084d2:	4998      	ldr	r1, [pc, #608]	; (8008734 <tcp_receive+0x27c>)
 80084d4:	4898      	ldr	r0, [pc, #608]	; (8008738 <tcp_receive+0x280>)
 80084d6:	f005 f905 	bl	800d6e4 <iprintf>

  if (flags & TCP_ACK) {
 80084da:	4b98      	ldr	r3, [pc, #608]	; (800873c <tcp_receive+0x284>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	f003 0310 	and.w	r3, r3, #16
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 82c1 	beq.w	8008a6a <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084ee:	461a      	mov	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f4:	4413      	add	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084fc:	4b90      	ldr	r3, [pc, #576]	; (8008740 <tcp_receive+0x288>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	db1b      	blt.n	800853e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800850a:	4b8d      	ldr	r3, [pc, #564]	; (8008740 <tcp_receive+0x288>)
 800850c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800850e:	429a      	cmp	r2, r3
 8008510:	d106      	bne.n	8008520 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008516:	4b8b      	ldr	r3, [pc, #556]	; (8008744 <tcp_receive+0x28c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	db0e      	blt.n	800853e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008524:	4b87      	ldr	r3, [pc, #540]	; (8008744 <tcp_receive+0x28c>)
 8008526:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008528:	429a      	cmp	r2, r3
 800852a:	d141      	bne.n	80085b0 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800852c:	4b86      	ldr	r3, [pc, #536]	; (8008748 <tcp_receive+0x290>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	89db      	ldrh	r3, [r3, #14]
 8008532:	b29a      	uxth	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800853a:	429a      	cmp	r2, r3
 800853c:	d938      	bls.n	80085b0 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800853e:	4b82      	ldr	r3, [pc, #520]	; (8008748 <tcp_receive+0x290>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	89db      	ldrh	r3, [r3, #14]
 8008544:	b29a      	uxth	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008558:	429a      	cmp	r2, r3
 800855a:	d205      	bcs.n	8008568 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8008568:	4b75      	ldr	r3, [pc, #468]	; (8008740 <tcp_receive+0x288>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8008570:	4b74      	ldr	r3, [pc, #464]	; (8008744 <tcp_receive+0x28c>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10d      	bne.n	800859e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008588:	2b00      	cmp	r3, #0
 800858a:	d111      	bne.n	80085b0 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800859c:	e008      	b.n	80085b0 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80085b0:	4b64      	ldr	r3, [pc, #400]	; (8008744 <tcp_receive+0x28c>)
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	dc53      	bgt.n	8008666 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80085be:	4b63      	ldr	r3, [pc, #396]	; (800874c <tcp_receive+0x294>)
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d146      	bne.n	8008654 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80085d0:	4413      	add	r3, r2
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d13d      	bne.n	8008654 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80085de:	2b00      	cmp	r3, #0
 80085e0:	db38      	blt.n	8008654 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085e6:	4b57      	ldr	r3, [pc, #348]	; (8008744 <tcp_receive+0x28c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d132      	bne.n	8008654 <tcp_receive+0x19c>
              found_dupack = 1;
 80085ee:	2301      	movs	r3, #1
 80085f0:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085f8:	2bff      	cmp	r3, #255	; 0xff
 80085fa:	d007      	beq.n	800860c <tcp_receive+0x154>
                ++pcb->dupacks;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008602:	3301      	adds	r3, #1
 8008604:	b2da      	uxtb	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008612:	2b03      	cmp	r3, #3
 8008614:	d916      	bls.n	8008644 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008620:	4413      	add	r3, r2
 8008622:	b29a      	uxth	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800862a:	429a      	cmp	r2, r3
 800862c:	d912      	bls.n	8008654 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008638:	4413      	add	r3, r2
 800863a:	b29a      	uxth	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008642:	e007      	b.n	8008654 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800864a:	2b03      	cmp	r3, #3
 800864c:	d102      	bne.n	8008654 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 fdf6 	bl	800a240 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f040 816a 	bne.w	8008930 <tcp_receive+0x478>
        pcb->dupacks = 0;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008664:	e164      	b.n	8008930 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008666:	4b37      	ldr	r3, [pc, #220]	; (8008744 <tcp_receive+0x28c>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	f2c0 8108 	blt.w	8008888 <tcp_receive+0x3d0>
 8008678:	4b32      	ldr	r3, [pc, #200]	; (8008744 <tcp_receive+0x28c>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	f300 8100 	bgt.w	8008888 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	7e9b      	ldrb	r3, [r3, #26]
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00c      	beq.n	80086ae <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	7e9b      	ldrb	r3, [r3, #26]
 8008698:	f023 0304 	bic.w	r3, r3, #4
 800869c:	b2da      	uxtb	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80086bc:	10db      	asrs	r3, r3, #3
 80086be:	b21b      	sxth	r3, r3
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	4413      	add	r3, r2
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	b21a      	sxth	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80086de:	4b19      	ldr	r3, [pc, #100]	; (8008744 <tcp_receive+0x28c>)
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	7d1b      	ldrb	r3, [r3, #20]
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	f240 8095 	bls.w	800881a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d227      	bcs.n	8008750 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800870a:	4413      	add	r3, r2
 800870c:	b29a      	uxth	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008714:	429a      	cmp	r2, r3
 8008716:	f240 8080 	bls.w	800881a <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008724:	4413      	add	r3, r2
 8008726:	b29a      	uxth	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800872e:	e074      	b.n	800881a <tcp_receive+0x362>
 8008730:	0800f5d4 	.word	0x0800f5d4
 8008734:	0800f7f8 	.word	0x0800f7f8
 8008738:	0800f618 	.word	0x0800f618
 800873c:	2000a178 	.word	0x2000a178
 8008740:	2000a16c 	.word	0x2000a16c
 8008744:	2000a170 	.word	0x2000a170
 8008748:	2000a15c 	.word	0x2000a15c
 800874c:	2000a176 	.word	0x2000a176
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800875a:	4619      	mov	r1, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008760:	fb01 f303 	mul.w	r3, r1, r3
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800876a:	fb93 f3f1 	sdiv	r3, r3, r1
 800876e:	b29b      	uxth	r3, r3
 8008770:	4413      	add	r3, r2
 8008772:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800877a:	8a7a      	ldrh	r2, [r7, #18]
 800877c:	429a      	cmp	r2, r3
 800877e:	d94c      	bls.n	800881a <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8a7a      	ldrh	r2, [r7, #18]
 8008784:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8008788:	e047      	b.n	800881a <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800878e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80087a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd f8d1 	bl	800594c <pbuf_clen>
 80087aa:	4603      	mov	r3, r0
 80087ac:	429c      	cmp	r4, r3
 80087ae:	d206      	bcs.n	80087be <tcp_receive+0x306>
 80087b0:	4b70      	ldr	r3, [pc, #448]	; (8008974 <tcp_receive+0x4bc>)
 80087b2:	f240 429e 	movw	r2, #1182	; 0x49e
 80087b6:	4970      	ldr	r1, [pc, #448]	; (8008978 <tcp_receive+0x4c0>)
 80087b8:	4870      	ldr	r0, [pc, #448]	; (800897c <tcp_receive+0x4c4>)
 80087ba:	f004 ff93 	bl	800d6e4 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80087be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fd f8c2 	bl	800594c <pbuf_clen>
 80087c8:	4603      	mov	r3, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	891a      	ldrh	r2, [r3, #8]
 80087e0:	4b67      	ldr	r3, [pc, #412]	; (8008980 <tcp_receive+0x4c8>)
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	4413      	add	r3, r2
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	4b65      	ldr	r3, [pc, #404]	; (8008980 <tcp_receive+0x4c8>)
 80087ea:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 80087ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087ee:	f7fe fa09 	bl	8006c04 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00e      	beq.n	800881a <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10a      	bne.n	800881a <tcp_receive+0x362>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <tcp_receive+0x362>
 800880c:	4b59      	ldr	r3, [pc, #356]	; (8008974 <tcp_receive+0x4bc>)
 800880e:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8008812:	495c      	ldr	r1, [pc, #368]	; (8008984 <tcp_receive+0x4cc>)
 8008814:	4859      	ldr	r0, [pc, #356]	; (800897c <tcp_receive+0x4c4>)
 8008816:	f004 ff65 	bl	800d6e4 <iprintf>
      while (pcb->unacked != NULL &&
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800881e:	2b00      	cmp	r3, #0
 8008820:	d022      	beq.n	8008868 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	4618      	mov	r0, r3
 800882c:	f7fb fed4 	bl	80045d8 <lwip_htonl>
 8008830:	4604      	mov	r4, r0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008836:	891b      	ldrh	r3, [r3, #8]
 8008838:	461d      	mov	r5, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	899b      	ldrh	r3, [r3, #12]
 8008842:	b29b      	uxth	r3, r3
 8008844:	4618      	mov	r0, r3
 8008846:	f7fb feba 	bl	80045be <lwip_htons>
 800884a:	4603      	mov	r3, r0
 800884c:	f003 0303 	and.w	r3, r3, #3
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <tcp_receive+0x3a0>
 8008854:	2301      	movs	r3, #1
 8008856:	e000      	b.n	800885a <tcp_receive+0x3a2>
 8008858:	2300      	movs	r3, #0
 800885a:	442b      	add	r3, r5
 800885c:	18e2      	adds	r2, r4, r3
 800885e:	4b4a      	ldr	r3, [pc, #296]	; (8008988 <tcp_receive+0x4d0>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8008864:	2b00      	cmp	r3, #0
 8008866:	dd90      	ble.n	800878a <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d104      	bne.n	800887a <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008876:	861a      	strh	r2, [r3, #48]	; 0x30
 8008878:	e002      	b.n	8008880 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	76da      	strb	r2, [r3, #27]
 8008886:	e002      	b.n	800888e <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f8fd 	bl	8009a88 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800888e:	e04f      	b.n	8008930 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008894:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fd f846 	bl	800594c <pbuf_clen>
 80088c0:	4603      	mov	r3, r0
 80088c2:	429c      	cmp	r4, r3
 80088c4:	d206      	bcs.n	80088d4 <tcp_receive+0x41c>
 80088c6:	4b2b      	ldr	r3, [pc, #172]	; (8008974 <tcp_receive+0x4bc>)
 80088c8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80088cc:	492a      	ldr	r1, [pc, #168]	; (8008978 <tcp_receive+0x4c0>)
 80088ce:	482b      	ldr	r0, [pc, #172]	; (800897c <tcp_receive+0x4c4>)
 80088d0:	f004 ff08 	bl	800d6e4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fd f837 	bl	800594c <pbuf_clen>
 80088de:	4603      	mov	r3, r0
 80088e0:	461a      	mov	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088e8:	1a9b      	subs	r3, r3, r2
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 80088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f4:	891a      	ldrh	r2, [r3, #8]
 80088f6:	4b22      	ldr	r3, [pc, #136]	; (8008980 <tcp_receive+0x4c8>)
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	4413      	add	r3, r2
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	4b20      	ldr	r3, [pc, #128]	; (8008980 <tcp_receive+0x4c8>)
 8008900:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8008902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008904:	f7fe f97e 	bl	8006c04 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00e      	beq.n	8008930 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <tcp_receive+0x478>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <tcp_receive+0x478>
 8008922:	4b14      	ldr	r3, [pc, #80]	; (8008974 <tcp_receive+0x4bc>)
 8008924:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8008928:	4916      	ldr	r1, [pc, #88]	; (8008984 <tcp_receive+0x4cc>)
 800892a:	4814      	ldr	r0, [pc, #80]	; (800897c <tcp_receive+0x4c4>)
 800892c:	f004 feda 	bl	800d6e4 <iprintf>
    while (pcb->unsent != NULL &&
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008934:	2b00      	cmp	r3, #0
 8008936:	d037      	beq.n	80089a8 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008938:	4b13      	ldr	r3, [pc, #76]	; (8008988 <tcp_receive+0x4d0>)
 800893a:	681c      	ldr	r4, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	4618      	mov	r0, r3
 8008946:	f7fb fe47 	bl	80045d8 <lwip_htonl>
 800894a:	4605      	mov	r5, r0
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008950:	891b      	ldrh	r3, [r3, #8]
 8008952:	461e      	mov	r6, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	899b      	ldrh	r3, [r3, #12]
 800895c:	b29b      	uxth	r3, r3
 800895e:	4618      	mov	r0, r3
 8008960:	f7fb fe2d 	bl	80045be <lwip_htons>
 8008964:	4603      	mov	r3, r0
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00e      	beq.n	800898c <tcp_receive+0x4d4>
 800896e:	2301      	movs	r3, #1
 8008970:	e00d      	b.n	800898e <tcp_receive+0x4d6>
 8008972:	bf00      	nop
 8008974:	0800f5d4 	.word	0x0800f5d4
 8008978:	0800f814 	.word	0x0800f814
 800897c:	0800f618 	.word	0x0800f618
 8008980:	2000a174 	.word	0x2000a174
 8008984:	0800f83c 	.word	0x0800f83c
 8008988:	2000a170 	.word	0x2000a170
 800898c:	2300      	movs	r3, #0
 800898e:	4433      	add	r3, r6
 8008990:	442b      	add	r3, r5
 8008992:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8008994:	2b00      	cmp	r3, #0
 8008996:	db07      	blt.n	80089a8 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008998:	4b8d      	ldr	r3, [pc, #564]	; (8008bd0 <tcp_receive+0x718>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f77f af74 	ble.w	8008890 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80089ae:	4b89      	ldr	r3, [pc, #548]	; (8008bd4 <tcp_receive+0x71c>)
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	4413      	add	r3, r2
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d052      	beq.n	8008a6a <tcp_receive+0x5b2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c8:	4b81      	ldr	r3, [pc, #516]	; (8008bd0 <tcp_receive+0x718>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da4b      	bge.n	8008a6a <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80089d2:	4b81      	ldr	r3, [pc, #516]	; (8008bd8 <tcp_receive+0x720>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089dc:	b29b      	uxth	r3, r3
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80089e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80089ec:	10db      	asrs	r3, r3, #3
 80089ee:	b21b      	sxth	r3, r3
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a02:	4413      	add	r3, r2
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	b21a      	sxth	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008a0c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	da03      	bge.n	8008a1c <tcp_receive+0x564>
        m = -m;
 8008a14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a16:	425b      	negs	r3, r3
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8008a1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a24:	109b      	asrs	r3, r3, #2
 8008a26:	b21b      	sxth	r3, r3
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a3a:	4413      	add	r3, r2
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	b21a      	sxth	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a4a:	10db      	asrs	r3, r3, #3
 8008a4c:	b21b      	sxth	r3, r3
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	4413      	add	r3, r2
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	b21a      	sxth	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008a6a:	4b5c      	ldr	r3, [pc, #368]	; (8008bdc <tcp_receive+0x724>)
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f000 84f1 	beq.w	8009456 <tcp_receive+0xf9e>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	7d1b      	ldrb	r3, [r3, #20]
 8008a78:	2b06      	cmp	r3, #6
 8008a7a:	f200 84ec 	bhi.w	8009456 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a82:	4b57      	ldr	r3, [pc, #348]	; (8008be0 <tcp_receive+0x728>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f2c0 80b8 	blt.w	8008c00 <tcp_receive+0x748>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a94:	4b51      	ldr	r3, [pc, #324]	; (8008bdc <tcp_receive+0x724>)
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4b51      	ldr	r3, [pc, #324]	; (8008be0 <tcp_receive+0x728>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	440b      	add	r3, r1
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f300 80ab 	bgt.w	8008c00 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008aaa:	4b4e      	ldr	r3, [pc, #312]	; (8008be4 <tcp_receive+0x72c>)
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ab4:	4b4a      	ldr	r3, [pc, #296]	; (8008be0 <tcp_receive+0x728>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008abc:	4b49      	ldr	r3, [pc, #292]	; (8008be4 <tcp_receive+0x72c>)
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d106      	bne.n	8008ad2 <tcp_receive+0x61a>
 8008ac4:	4b48      	ldr	r3, [pc, #288]	; (8008be8 <tcp_receive+0x730>)
 8008ac6:	f240 523c 	movw	r2, #1340	; 0x53c
 8008aca:	4948      	ldr	r1, [pc, #288]	; (8008bec <tcp_receive+0x734>)
 8008acc:	4848      	ldr	r0, [pc, #288]	; (8008bf0 <tcp_receive+0x738>)
 8008ace:	f004 fe09 	bl	800d6e4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	dd06      	ble.n	8008aea <tcp_receive+0x632>
 8008adc:	4b42      	ldr	r3, [pc, #264]	; (8008be8 <tcp_receive+0x730>)
 8008ade:	f240 523d 	movw	r2, #1341	; 0x53d
 8008ae2:	4944      	ldr	r1, [pc, #272]	; (8008bf4 <tcp_receive+0x73c>)
 8008ae4:	4842      	ldr	r0, [pc, #264]	; (8008bf0 <tcp_receive+0x738>)
 8008ae6:	f004 fdfd 	bl	800d6e4 <iprintf>
      if (inseg.p->len < off) {
 8008aea:	4b3e      	ldr	r3, [pc, #248]	; (8008be4 <tcp_receive+0x72c>)
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	895b      	ldrh	r3, [r3, #10]
 8008af0:	461a      	mov	r2, r3
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	4293      	cmp	r3, r2
 8008af6:	dd3e      	ble.n	8008b76 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008af8:	4b3a      	ldr	r3, [pc, #232]	; (8008be4 <tcp_receive+0x72c>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	891b      	ldrh	r3, [r3, #8]
 8008afe:	461a      	mov	r2, r3
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	4293      	cmp	r3, r2
 8008b04:	dd06      	ble.n	8008b14 <tcp_receive+0x65c>
 8008b06:	4b38      	ldr	r3, [pc, #224]	; (8008be8 <tcp_receive+0x730>)
 8008b08:	f240 523f 	movw	r2, #1343	; 0x53f
 8008b0c:	493a      	ldr	r1, [pc, #232]	; (8008bf8 <tcp_receive+0x740>)
 8008b0e:	4838      	ldr	r0, [pc, #224]	; (8008bf0 <tcp_receive+0x738>)
 8008b10:	f004 fde8 	bl	800d6e4 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008b14:	4b33      	ldr	r3, [pc, #204]	; (8008be4 <tcp_receive+0x72c>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	891a      	ldrh	r2, [r3, #8]
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8008b22:	e00e      	b.n	8008b42 <tcp_receive+0x68a>
          off -= p->len;
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	895b      	ldrh	r3, [r3, #10]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	1a9b      	subs	r3, r3, r2
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	8a3a      	ldrh	r2, [r7, #16]
 8008b34:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	895b      	ldrh	r3, [r3, #10]
 8008b46:	461a      	mov	r2, r3
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	dcea      	bgt.n	8008b24 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	425b      	negs	r3, r3
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	b21b      	sxth	r3, r3
 8008b58:	4619      	mov	r1, r3
 8008b5a:	69b8      	ldr	r0, [r7, #24]
 8008b5c:	f7fc fe3e 	bl	80057dc <pbuf_header>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d01c      	beq.n	8008ba0 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008b66:	4b20      	ldr	r3, [pc, #128]	; (8008be8 <tcp_receive+0x730>)
 8008b68:	f240 524c 	movw	r2, #1356	; 0x54c
 8008b6c:	4923      	ldr	r1, [pc, #140]	; (8008bfc <tcp_receive+0x744>)
 8008b6e:	4820      	ldr	r0, [pc, #128]	; (8008bf0 <tcp_receive+0x738>)
 8008b70:	f004 fdb8 	bl	800d6e4 <iprintf>
 8008b74:	e014      	b.n	8008ba0 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008b76:	4b1b      	ldr	r3, [pc, #108]	; (8008be4 <tcp_receive+0x72c>)
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b7c:	b292      	uxth	r2, r2
 8008b7e:	4252      	negs	r2, r2
 8008b80:	b292      	uxth	r2, r2
 8008b82:	b212      	sxth	r2, r2
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fc fe28 	bl	80057dc <pbuf_header>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d006      	beq.n	8008ba0 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008b92:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <tcp_receive+0x730>)
 8008b94:	f240 5251 	movw	r2, #1361	; 0x551
 8008b98:	4918      	ldr	r1, [pc, #96]	; (8008bfc <tcp_receive+0x744>)
 8008b9a:	4815      	ldr	r0, [pc, #84]	; (8008bf0 <tcp_receive+0x738>)
 8008b9c:	f004 fda2 	bl	800d6e4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008ba0:	4b10      	ldr	r3, [pc, #64]	; (8008be4 <tcp_receive+0x72c>)
 8008ba2:	891a      	ldrh	r2, [r3, #8]
 8008ba4:	4b0e      	ldr	r3, [pc, #56]	; (8008be0 <tcp_receive+0x728>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	b299      	uxth	r1, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	1acb      	subs	r3, r1, r3
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	4413      	add	r3, r2
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <tcp_receive+0x72c>)
 8008bba:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	4a07      	ldr	r2, [pc, #28]	; (8008be0 <tcp_receive+0x728>)
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	4b07      	ldr	r3, [pc, #28]	; (8008be4 <tcp_receive+0x72c>)
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	4a05      	ldr	r2, [pc, #20]	; (8008be0 <tcp_receive+0x728>)
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008bce:	e025      	b.n	8008c1c <tcp_receive+0x764>
 8008bd0:	2000a170 	.word	0x2000a170
 8008bd4:	2000a174 	.word	0x2000a174
 8008bd8:	2000a134 	.word	0x2000a134
 8008bdc:	2000a176 	.word	0x2000a176
 8008be0:	2000a16c 	.word	0x2000a16c
 8008be4:	2000a14c 	.word	0x2000a14c
 8008be8:	0800f5d4 	.word	0x0800f5d4
 8008bec:	0800f85c 	.word	0x0800f85c
 8008bf0:	0800f618 	.word	0x0800f618
 8008bf4:	0800f86c 	.word	0x0800f86c
 8008bf8:	0800f87c 	.word	0x0800f87c
 8008bfc:	0800f88c 	.word	0x0800f88c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008c00:	4b87      	ldr	r3, [pc, #540]	; (8008e20 <tcp_receive+0x968>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da06      	bge.n	8008c1c <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7e9b      	ldrb	r3, [r3, #26]
 8008c12:	f043 0302 	orr.w	r3, r3, #2
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008c1c:	4b80      	ldr	r3, [pc, #512]	; (8008e20 <tcp_receive+0x968>)
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f2c0 8410 	blt.w	800944c <tcp_receive+0xf94>
 8008c2c:	4b7c      	ldr	r3, [pc, #496]	; (8008e20 <tcp_receive+0x968>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c38:	440b      	add	r3, r1
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f300 8404 	bgt.w	800944c <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c48:	4b75      	ldr	r3, [pc, #468]	; (8008e20 <tcp_receive+0x968>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	f040 8287 	bne.w	8009160 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008c52:	4b74      	ldr	r3, [pc, #464]	; (8008e24 <tcp_receive+0x96c>)
 8008c54:	891c      	ldrh	r4, [r3, #8]
 8008c56:	4b73      	ldr	r3, [pc, #460]	; (8008e24 <tcp_receive+0x96c>)
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	899b      	ldrh	r3, [r3, #12]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fb fcad 	bl	80045be <lwip_htons>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f003 0303 	and.w	r3, r3, #3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <tcp_receive+0x7ba>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e000      	b.n	8008c74 <tcp_receive+0x7bc>
 8008c72:	2300      	movs	r3, #0
 8008c74:	4423      	add	r3, r4
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	4b6b      	ldr	r3, [pc, #428]	; (8008e28 <tcp_receive+0x970>)
 8008c7a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c80:	4b69      	ldr	r3, [pc, #420]	; (8008e28 <tcp_receive+0x970>)
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d26e      	bcs.n	8008d66 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008c88:	4b66      	ldr	r3, [pc, #408]	; (8008e24 <tcp_receive+0x96c>)
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	899b      	ldrh	r3, [r3, #12]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fb fc94 	bl	80045be <lwip_htons>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01b      	beq.n	8008cd8 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008ca0:	4b60      	ldr	r3, [pc, #384]	; (8008e24 <tcp_receive+0x96c>)
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	899b      	ldrh	r3, [r3, #12]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008cac:	b29c      	uxth	r4, r3
 8008cae:	4b5d      	ldr	r3, [pc, #372]	; (8008e24 <tcp_receive+0x96c>)
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	899b      	ldrh	r3, [r3, #12]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fb fc81 	bl	80045be <lwip_htons>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fb fc7a 	bl	80045be <lwip_htons>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4b55      	ldr	r3, [pc, #340]	; (8008e24 <tcp_receive+0x96c>)
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	4322      	orrs	r2, r4
 8008cd4:	b292      	uxth	r2, r2
 8008cd6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008cdc:	4b51      	ldr	r3, [pc, #324]	; (8008e24 <tcp_receive+0x96c>)
 8008cde:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008ce0:	4b50      	ldr	r3, [pc, #320]	; (8008e24 <tcp_receive+0x96c>)
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	899b      	ldrh	r3, [r3, #12]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fb fc68 	bl	80045be <lwip_htons>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <tcp_receive+0x84c>
            inseg.len -= 1;
 8008cf8:	4b4a      	ldr	r3, [pc, #296]	; (8008e24 <tcp_receive+0x96c>)
 8008cfa:	891b      	ldrh	r3, [r3, #8]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	4b48      	ldr	r3, [pc, #288]	; (8008e24 <tcp_receive+0x96c>)
 8008d02:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008d04:	4b47      	ldr	r3, [pc, #284]	; (8008e24 <tcp_receive+0x96c>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	4a46      	ldr	r2, [pc, #280]	; (8008e24 <tcp_receive+0x96c>)
 8008d0a:	8912      	ldrh	r2, [r2, #8]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fc fc14 	bl	800553c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008d14:	4b43      	ldr	r3, [pc, #268]	; (8008e24 <tcp_receive+0x96c>)
 8008d16:	891c      	ldrh	r4, [r3, #8]
 8008d18:	4b42      	ldr	r3, [pc, #264]	; (8008e24 <tcp_receive+0x96c>)
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	899b      	ldrh	r3, [r3, #12]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fb fc4c 	bl	80045be <lwip_htons>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <tcp_receive+0x87c>
 8008d30:	2301      	movs	r3, #1
 8008d32:	e000      	b.n	8008d36 <tcp_receive+0x87e>
 8008d34:	2300      	movs	r3, #0
 8008d36:	4423      	add	r3, r4
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	4b3b      	ldr	r3, [pc, #236]	; (8008e28 <tcp_receive+0x970>)
 8008d3c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d3e:	4b3a      	ldr	r3, [pc, #232]	; (8008e28 <tcp_receive+0x970>)
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	4b36      	ldr	r3, [pc, #216]	; (8008e20 <tcp_receive+0x968>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	441a      	add	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d52:	440b      	add	r3, r1
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d006      	beq.n	8008d66 <tcp_receive+0x8ae>
 8008d58:	4b34      	ldr	r3, [pc, #208]	; (8008e2c <tcp_receive+0x974>)
 8008d5a:	f240 527e 	movw	r2, #1406	; 0x57e
 8008d5e:	4934      	ldr	r1, [pc, #208]	; (8008e30 <tcp_receive+0x978>)
 8008d60:	4834      	ldr	r0, [pc, #208]	; (8008e34 <tcp_receive+0x97c>)
 8008d62:	f004 fcbf 	bl	800d6e4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 80e1 	beq.w	8008f32 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d70:	4b2c      	ldr	r3, [pc, #176]	; (8008e24 <tcp_receive+0x96c>)
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	899b      	ldrh	r3, [r3, #12]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fb fc20 	bl	80045be <lwip_htons>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d010      	beq.n	8008daa <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008d88:	e00a      	b.n	8008da0 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8008d9a:	68b8      	ldr	r0, [r7, #8]
 8008d9c:	f7fd ff32 	bl	8006c04 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1f0      	bne.n	8008d8a <tcp_receive+0x8d2>
 8008da8:	e0c3      	b.n	8008f32 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dae:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008db0:	e04f      	b.n	8008e52 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	899b      	ldrh	r3, [r3, #12]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fb fbff 	bl	80045be <lwip_htons>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d03b      	beq.n	8008e42 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008dca:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <tcp_receive+0x96c>)
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	899b      	ldrh	r3, [r3, #12]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fb fbf3 	bl	80045be <lwip_htons>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d12f      	bne.n	8008e42 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008de2:	4b10      	ldr	r3, [pc, #64]	; (8008e24 <tcp_receive+0x96c>)
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	899b      	ldrh	r3, [r3, #12]
 8008de8:	b29c      	uxth	r4, r3
 8008dea:	2001      	movs	r0, #1
 8008dec:	f7fb fbe7 	bl	80045be <lwip_htons>
 8008df0:	4603      	mov	r3, r0
 8008df2:	461a      	mov	r2, r3
 8008df4:	4b0b      	ldr	r3, [pc, #44]	; (8008e24 <tcp_receive+0x96c>)
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	4322      	orrs	r2, r4
 8008dfa:	b292      	uxth	r2, r2
 8008dfc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <tcp_receive+0x96c>)
 8008e00:	891c      	ldrh	r4, [r3, #8]
 8008e02:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <tcp_receive+0x96c>)
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	899b      	ldrh	r3, [r3, #12]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fb fbd7 	bl	80045be <lwip_htons>
 8008e10:	4603      	mov	r3, r0
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00e      	beq.n	8008e38 <tcp_receive+0x980>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e00d      	b.n	8008e3a <tcp_receive+0x982>
 8008e1e:	bf00      	nop
 8008e20:	2000a16c 	.word	0x2000a16c
 8008e24:	2000a14c 	.word	0x2000a14c
 8008e28:	2000a176 	.word	0x2000a176
 8008e2c:	0800f5d4 	.word	0x0800f5d4
 8008e30:	0800f8a0 	.word	0x0800f8a0
 8008e34:	0800f618 	.word	0x0800f618
 8008e38:	2300      	movs	r3, #0
 8008e3a:	4423      	add	r3, r4
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	4b95      	ldr	r3, [pc, #596]	; (8009094 <tcp_receive+0xbdc>)
 8008e40:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8008e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4e:	f7fd fed9 	bl	8006c04 <tcp_seg_free>
            while (next &&
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00e      	beq.n	8008e76 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008e58:	4b8e      	ldr	r3, [pc, #568]	; (8009094 <tcp_receive+0xbdc>)
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4b8e      	ldr	r3, [pc, #568]	; (8009098 <tcp_receive+0xbe0>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	441a      	add	r2, r3
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e6c:	8909      	ldrh	r1, [r1, #8]
 8008e6e:	440b      	add	r3, r1
 8008e70:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	da9d      	bge.n	8008db2 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d057      	beq.n	8008f2c <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8008e7c:	4b85      	ldr	r3, [pc, #532]	; (8009094 <tcp_receive+0xbdc>)
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	4b85      	ldr	r3, [pc, #532]	; (8009098 <tcp_receive+0xbe0>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	441a      	add	r2, r3
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dd4b      	ble.n	8008f2c <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	4b7e      	ldr	r3, [pc, #504]	; (8009098 <tcp_receive+0xbe0>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	4b7d      	ldr	r3, [pc, #500]	; (800909c <tcp_receive+0xbe4>)
 8008ea8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008eaa:	4b7c      	ldr	r3, [pc, #496]	; (800909c <tcp_receive+0xbe4>)
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	899b      	ldrh	r3, [r3, #12]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fb fb83 	bl	80045be <lwip_htons>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d005      	beq.n	8008ece <tcp_receive+0xa16>
                inseg.len -= 1;
 8008ec2:	4b76      	ldr	r3, [pc, #472]	; (800909c <tcp_receive+0xbe4>)
 8008ec4:	891b      	ldrh	r3, [r3, #8]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	4b74      	ldr	r3, [pc, #464]	; (800909c <tcp_receive+0xbe4>)
 8008ecc:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008ece:	4b73      	ldr	r3, [pc, #460]	; (800909c <tcp_receive+0xbe4>)
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	4a72      	ldr	r2, [pc, #456]	; (800909c <tcp_receive+0xbe4>)
 8008ed4:	8912      	ldrh	r2, [r2, #8]
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fc fb2f 	bl	800553c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008ede:	4b6f      	ldr	r3, [pc, #444]	; (800909c <tcp_receive+0xbe4>)
 8008ee0:	891c      	ldrh	r4, [r3, #8]
 8008ee2:	4b6e      	ldr	r3, [pc, #440]	; (800909c <tcp_receive+0xbe4>)
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	899b      	ldrh	r3, [r3, #12]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fb fb67 	bl	80045be <lwip_htons>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <tcp_receive+0xa46>
 8008efa:	2301      	movs	r3, #1
 8008efc:	e000      	b.n	8008f00 <tcp_receive+0xa48>
 8008efe:	2300      	movs	r3, #0
 8008f00:	4423      	add	r3, r4
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	4b63      	ldr	r3, [pc, #396]	; (8009094 <tcp_receive+0xbdc>)
 8008f06:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008f08:	4b62      	ldr	r3, [pc, #392]	; (8009094 <tcp_receive+0xbdc>)
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4b62      	ldr	r3, [pc, #392]	; (8009098 <tcp_receive+0xbe0>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	441a      	add	r2, r3
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d006      	beq.n	8008f2c <tcp_receive+0xa74>
 8008f1e:	4b60      	ldr	r3, [pc, #384]	; (80090a0 <tcp_receive+0xbe8>)
 8008f20:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8008f24:	495f      	ldr	r1, [pc, #380]	; (80090a4 <tcp_receive+0xbec>)
 8008f26:	4860      	ldr	r0, [pc, #384]	; (80090a8 <tcp_receive+0xbf0>)
 8008f28:	f004 fbdc 	bl	800d6e4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f30:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008f32:	4b58      	ldr	r3, [pc, #352]	; (8009094 <tcp_receive+0xbdc>)
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	4b57      	ldr	r3, [pc, #348]	; (8009098 <tcp_receive+0xbe0>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	441a      	add	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f46:	4b53      	ldr	r3, [pc, #332]	; (8009094 <tcp_receive+0xbdc>)
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d206      	bcs.n	8008f5c <tcp_receive+0xaa4>
 8008f4e:	4b54      	ldr	r3, [pc, #336]	; (80090a0 <tcp_receive+0xbe8>)
 8008f50:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008f54:	4955      	ldr	r1, [pc, #340]	; (80090ac <tcp_receive+0xbf4>)
 8008f56:	4854      	ldr	r0, [pc, #336]	; (80090a8 <tcp_receive+0xbf0>)
 8008f58:	f004 fbc4 	bl	800d6e4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f60:	4b4c      	ldr	r3, [pc, #304]	; (8009094 <tcp_receive+0xbdc>)
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7fd f9fd 	bl	800636c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008f72:	4b4a      	ldr	r3, [pc, #296]	; (800909c <tcp_receive+0xbe4>)
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	891b      	ldrh	r3, [r3, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d006      	beq.n	8008f8a <tcp_receive+0xad2>
          recv_data = inseg.p;
 8008f7c:	4b47      	ldr	r3, [pc, #284]	; (800909c <tcp_receive+0xbe4>)
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	4a4b      	ldr	r2, [pc, #300]	; (80090b0 <tcp_receive+0xbf8>)
 8008f82:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008f84:	4b45      	ldr	r3, [pc, #276]	; (800909c <tcp_receive+0xbe4>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008f8a:	4b44      	ldr	r3, [pc, #272]	; (800909c <tcp_receive+0xbe4>)
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	899b      	ldrh	r3, [r3, #12]
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fb fb13 	bl	80045be <lwip_htons>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 80b4 	beq.w	800910c <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008fa4:	4b43      	ldr	r3, [pc, #268]	; (80090b4 <tcp_receive+0xbfc>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	f043 0320 	orr.w	r3, r3, #32
 8008fac:	b2da      	uxtb	r2, r3
 8008fae:	4b41      	ldr	r3, [pc, #260]	; (80090b4 <tcp_receive+0xbfc>)
 8008fb0:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008fb2:	e0ab      	b.n	800910c <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb8:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	4a35      	ldr	r2, [pc, #212]	; (8009098 <tcp_receive+0xbe0>)
 8008fc4:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	891b      	ldrh	r3, [r3, #8]
 8008fca:	461c      	mov	r4, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	899b      	ldrh	r3, [r3, #12]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fb faf2 	bl	80045be <lwip_htons>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <tcp_receive+0xb30>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e000      	b.n	8008fea <tcp_receive+0xb32>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	191a      	adds	r2, r3, r4
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	441a      	add	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ffa:	461c      	mov	r4, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	891b      	ldrh	r3, [r3, #8]
 8009000:	461d      	mov	r5, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	899b      	ldrh	r3, [r3, #12]
 8009008:	b29b      	uxth	r3, r3
 800900a:	4618      	mov	r0, r3
 800900c:	f7fb fad7 	bl	80045be <lwip_htons>
 8009010:	4603      	mov	r3, r0
 8009012:	f003 0303 	and.w	r3, r3, #3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <tcp_receive+0xb66>
 800901a:	2301      	movs	r3, #1
 800901c:	e000      	b.n	8009020 <tcp_receive+0xb68>
 800901e:	2300      	movs	r3, #0
 8009020:	442b      	add	r3, r5
 8009022:	429c      	cmp	r4, r3
 8009024:	d206      	bcs.n	8009034 <tcp_receive+0xb7c>
 8009026:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <tcp_receive+0xbe8>)
 8009028:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800902c:	4922      	ldr	r1, [pc, #136]	; (80090b8 <tcp_receive+0xc00>)
 800902e:	481e      	ldr	r0, [pc, #120]	; (80090a8 <tcp_receive+0xbf0>)
 8009030:	f004 fb58 	bl	800d6e4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	891b      	ldrh	r3, [r3, #8]
 8009038:	461c      	mov	r4, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	899b      	ldrh	r3, [r3, #12]
 8009040:	b29b      	uxth	r3, r3
 8009042:	4618      	mov	r0, r3
 8009044:	f7fb fabb 	bl	80045be <lwip_htons>
 8009048:	4603      	mov	r3, r0
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <tcp_receive+0xb9e>
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <tcp_receive+0xba0>
 8009056:	2300      	movs	r3, #0
 8009058:	1919      	adds	r1, r3, r4
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800905e:	b28b      	uxth	r3, r1
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	b29a      	uxth	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7fd f97f 	bl	800636c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	891b      	ldrh	r3, [r3, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d028      	beq.n	80090ca <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009078:	4b0d      	ldr	r3, [pc, #52]	; (80090b0 <tcp_receive+0xbf8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d01d      	beq.n	80090bc <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8009080:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <tcp_receive+0xbf8>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f7fc fc96 	bl	80059bc <pbuf_cat>
 8009090:	e018      	b.n	80090c4 <tcp_receive+0xc0c>
 8009092:	bf00      	nop
 8009094:	2000a176 	.word	0x2000a176
 8009098:	2000a16c 	.word	0x2000a16c
 800909c:	2000a14c 	.word	0x2000a14c
 80090a0:	0800f5d4 	.word	0x0800f5d4
 80090a4:	0800f8d8 	.word	0x0800f8d8
 80090a8:	0800f618 	.word	0x0800f618
 80090ac:	0800f914 	.word	0x0800f914
 80090b0:	2000a17c 	.word	0x2000a17c
 80090b4:	2000a179 	.word	0x2000a179
 80090b8:	0800f934 	.word	0x0800f934
            } else {
              recv_data = cseg->p;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4a71      	ldr	r2, [pc, #452]	; (8009288 <tcp_receive+0xdd0>)
 80090c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	899b      	ldrh	r3, [r3, #12]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fb fa73 	bl	80045be <lwip_htons>
 80090d8:	4603      	mov	r3, r0
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00d      	beq.n	80090fe <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80090e2:	4b6a      	ldr	r3, [pc, #424]	; (800928c <tcp_receive+0xdd4>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	f043 0320 	orr.w	r3, r3, #32
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	4b67      	ldr	r3, [pc, #412]	; (800928c <tcp_receive+0xdd4>)
 80090ee:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	7d1b      	ldrb	r3, [r3, #20]
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d102      	bne.n	80090fe <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2207      	movs	r2, #7
 80090fc:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f7fd fd7c 	bl	8006c04 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009120:	429a      	cmp	r2, r3
 8009122:	f43f af47 	beq.w	8008fb4 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7e9b      	ldrb	r3, [r3, #26]
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00e      	beq.n	8009150 <tcp_receive+0xc98>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	7e9b      	ldrb	r3, [r3, #26]
 8009136:	f023 0301 	bic.w	r3, r3, #1
 800913a:	b2da      	uxtb	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	769a      	strb	r2, [r3, #26]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	7e9b      	ldrb	r3, [r3, #26]
 8009144:	f043 0302 	orr.w	r3, r3, #2
 8009148:	b2da      	uxtb	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800914e:	e181      	b.n	8009454 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	7e9b      	ldrb	r3, [r3, #26]
 8009154:	f043 0301 	orr.w	r3, r3, #1
 8009158:	b2da      	uxtb	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800915e:	e179      	b.n	8009454 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fc91 	bl	8009a88 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916a:	2b00      	cmp	r3, #0
 800916c:	d106      	bne.n	800917c <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800916e:	4848      	ldr	r0, [pc, #288]	; (8009290 <tcp_receive+0xdd8>)
 8009170:	f7fd fd60 	bl	8006c34 <tcp_seg_copy>
 8009174:	4602      	mov	r2, r0
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800917a:	e16b      	b.n	8009454 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800917c:	2300      	movs	r3, #0
 800917e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009186:	e150      	b.n	800942a <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8009188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	4b41      	ldr	r3, [pc, #260]	; (8009294 <tcp_receive+0xddc>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d11d      	bne.n	80091d2 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009196:	4b3e      	ldr	r3, [pc, #248]	; (8009290 <tcp_receive+0xdd8>)
 8009198:	891a      	ldrh	r2, [r3, #8]
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	891b      	ldrh	r3, [r3, #8]
 800919e:	429a      	cmp	r2, r3
 80091a0:	f240 8148 	bls.w	8009434 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80091a4:	483a      	ldr	r0, [pc, #232]	; (8009290 <tcp_receive+0xdd8>)
 80091a6:	f7fd fd45 	bl	8006c34 <tcp_seg_copy>
 80091aa:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 8142 	beq.w	8009438 <tcp_receive+0xf80>
                  if (prev != NULL) {
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <tcp_receive+0xd0a>
                    prev->next = cseg;
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	e002      	b.n	80091c8 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80091c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff f8fe 	bl	80083cc <tcp_oos_insert_segment>
                }
                break;
 80091d0:	e132      	b.n	8009438 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d117      	bne.n	8009208 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80091d8:	4b2e      	ldr	r3, [pc, #184]	; (8009294 <tcp_receive+0xddc>)
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	da57      	bge.n	8009298 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80091e8:	4829      	ldr	r0, [pc, #164]	; (8009290 <tcp_receive+0xdd8>)
 80091ea:	f7fd fd23 	bl	8006c34 <tcp_seg_copy>
 80091ee:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 8122 	beq.w	800943c <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80091fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f7ff f8e3 	bl	80083cc <tcp_oos_insert_segment>
                  }
                  break;
 8009206:	e119      	b.n	800943c <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8009208:	4b22      	ldr	r3, [pc, #136]	; (8009294 <tcp_receive+0xddc>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	3b01      	subs	r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	db3e      	blt.n	8009298 <tcp_receive+0xde0>
 800921a:	4b1e      	ldr	r3, [pc, #120]	; (8009294 <tcp_receive+0xddc>)
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	3301      	adds	r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	dc35      	bgt.n	8009298 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800922c:	4818      	ldr	r0, [pc, #96]	; (8009290 <tcp_receive+0xdd8>)
 800922e:	f7fd fd01 	bl	8006c34 <tcp_seg_copy>
 8009232:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 8102 	beq.w	8009440 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009244:	8912      	ldrh	r2, [r2, #8]
 8009246:	441a      	add	r2, r3
 8009248:	4b12      	ldr	r3, [pc, #72]	; (8009294 <tcp_receive+0xddc>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	dd12      	ble.n	8009278 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009252:	4b10      	ldr	r3, [pc, #64]	; (8009294 <tcp_receive+0xddc>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	b29a      	uxth	r2, r3
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b29b      	uxth	r3, r3
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	b29a      	uxth	r2, r3
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	891b      	ldrh	r3, [r3, #8]
 8009270:	4619      	mov	r1, r3
 8009272:	4610      	mov	r0, r2
 8009274:	f7fc f962 	bl	800553c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800927e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f7ff f8a3 	bl	80083cc <tcp_oos_insert_segment>
                  }
                  break;
 8009286:	e0db      	b.n	8009440 <tcp_receive+0xf88>
 8009288:	2000a17c 	.word	0x2000a17c
 800928c:	2000a179 	.word	0x2000a179
 8009290:	2000a14c 	.word	0x2000a14c
 8009294:	2000a16c 	.word	0x2000a16c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f040 80bf 	bne.w	8009420 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80092a2:	4b7c      	ldr	r3, [pc, #496]	; (8009494 <tcp_receive+0xfdc>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f340 80b6 	ble.w	8009420 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	899b      	ldrh	r3, [r3, #12]
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fb f97e 	bl	80045be <lwip_htons>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f040 80bb 	bne.w	8009444 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80092ce:	4872      	ldr	r0, [pc, #456]	; (8009498 <tcp_receive+0xfe0>)
 80092d0:	f7fd fcb0 	bl	8006c34 <tcp_seg_copy>
 80092d4:	4602      	mov	r2, r0
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80092da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 80b2 	beq.w	8009448 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ec:	8912      	ldrh	r2, [r2, #8]
 80092ee:	441a      	add	r2, r3
 80092f0:	4b68      	ldr	r3, [pc, #416]	; (8009494 <tcp_receive+0xfdc>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	dd12      	ble.n	8009320 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80092fa:	4b66      	ldr	r3, [pc, #408]	; (8009494 <tcp_receive+0xfdc>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	b29a      	uxth	r2, r3
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	b29b      	uxth	r3, r3
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	b29a      	uxth	r2, r3
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	891b      	ldrh	r3, [r3, #8]
 8009318:	4619      	mov	r1, r3
 800931a:	4610      	mov	r0, r2
 800931c:	f7fc f90e 	bl	800553c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009320:	4b5e      	ldr	r3, [pc, #376]	; (800949c <tcp_receive+0xfe4>)
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	4b5b      	ldr	r3, [pc, #364]	; (8009494 <tcp_receive+0xfdc>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	441a      	add	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	6879      	ldr	r1, [r7, #4]
 8009332:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009334:	440b      	add	r3, r1
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	f340 8085 	ble.w	8009448 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800933e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	899b      	ldrh	r3, [r3, #12]
 8009346:	b29b      	uxth	r3, r3
 8009348:	4618      	mov	r0, r3
 800934a:	f7fb f938 	bl	80045be <lwip_htons>
 800934e:	4603      	mov	r3, r0
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d01e      	beq.n	8009396 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	899b      	ldrh	r3, [r3, #12]
 8009360:	b29b      	uxth	r3, r3
 8009362:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009366:	b29c      	uxth	r4, r3
 8009368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	899b      	ldrh	r3, [r3, #12]
 8009370:	b29b      	uxth	r3, r3
 8009372:	4618      	mov	r0, r3
 8009374:	f7fb f923 	bl	80045be <lwip_htons>
 8009378:	4603      	mov	r3, r0
 800937a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800937e:	b29b      	uxth	r3, r3
 8009380:	4618      	mov	r0, r3
 8009382:	f7fb f91c 	bl	80045be <lwip_htons>
 8009386:	4603      	mov	r3, r0
 8009388:	461a      	mov	r2, r3
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	4322      	orrs	r2, r4
 8009392:	b292      	uxth	r2, r2
 8009394:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	b29a      	uxth	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a0:	4413      	add	r3, r2
 80093a2:	b299      	uxth	r1, r3
 80093a4:	4b3b      	ldr	r3, [pc, #236]	; (8009494 <tcp_receive+0xfdc>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	1a8a      	subs	r2, r1, r2
 80093b0:	b292      	uxth	r2, r2
 80093b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80093b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	891b      	ldrh	r3, [r3, #8]
 80093c0:	4619      	mov	r1, r3
 80093c2:	4610      	mov	r0, r2
 80093c4:	f7fc f8ba 	bl	800553c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	891c      	ldrh	r4, [r3, #8]
 80093ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	899b      	ldrh	r3, [r3, #12]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fb f8f0 	bl	80045be <lwip_htons>
 80093de:	4603      	mov	r3, r0
 80093e0:	f003 0303 	and.w	r3, r3, #3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <tcp_receive+0xf34>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e000      	b.n	80093ee <tcp_receive+0xf36>
 80093ec:	2300      	movs	r3, #0
 80093ee:	4423      	add	r3, r4
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	4b2a      	ldr	r3, [pc, #168]	; (800949c <tcp_receive+0xfe4>)
 80093f4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80093f6:	4b29      	ldr	r3, [pc, #164]	; (800949c <tcp_receive+0xfe4>)
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	4b25      	ldr	r3, [pc, #148]	; (8009494 <tcp_receive+0xfdc>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	441a      	add	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800940a:	440b      	add	r3, r1
 800940c:	429a      	cmp	r2, r3
 800940e:	d01b      	beq.n	8009448 <tcp_receive+0xf90>
 8009410:	4b23      	ldr	r3, [pc, #140]	; (80094a0 <tcp_receive+0xfe8>)
 8009412:	f240 627a 	movw	r2, #1658	; 0x67a
 8009416:	4923      	ldr	r1, [pc, #140]	; (80094a4 <tcp_receive+0xfec>)
 8009418:	4823      	ldr	r0, [pc, #140]	; (80094a8 <tcp_receive+0xff0>)
 800941a:	f004 f963 	bl	800d6e4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800941e:	e013      	b.n	8009448 <tcp_receive+0xf90>
              }
            }
            prev = next;
 8009420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009422:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	2b00      	cmp	r3, #0
 800942e:	f47f aeab 	bne.w	8009188 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8009432:	e00f      	b.n	8009454 <tcp_receive+0xf9c>
                break;
 8009434:	bf00      	nop
 8009436:	e00d      	b.n	8009454 <tcp_receive+0xf9c>
                break;
 8009438:	bf00      	nop
 800943a:	e00b      	b.n	8009454 <tcp_receive+0xf9c>
                  break;
 800943c:	bf00      	nop
 800943e:	e009      	b.n	8009454 <tcp_receive+0xf9c>
                  break;
 8009440:	bf00      	nop
 8009442:	e007      	b.n	8009454 <tcp_receive+0xf9c>
                  break;
 8009444:	bf00      	nop
 8009446:	e005      	b.n	8009454 <tcp_receive+0xf9c>
                break;
 8009448:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800944a:	e003      	b.n	8009454 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fb1b 	bl	8009a88 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009452:	e01a      	b.n	800948a <tcp_receive+0xfd2>
 8009454:	e019      	b.n	800948a <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009456:	4b0f      	ldr	r3, [pc, #60]	; (8009494 <tcp_receive+0xfdc>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	db0a      	blt.n	800947a <tcp_receive+0xfc2>
 8009464:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <tcp_receive+0xfdc>)
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009470:	440b      	add	r3, r1
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	3301      	adds	r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	dd07      	ble.n	800948a <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	7e9b      	ldrb	r3, [r3, #26]
 800947e:	f043 0302 	orr.w	r3, r3, #2
 8009482:	b2da      	uxtb	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8009488:	e7ff      	b.n	800948a <tcp_receive+0xfd2>
 800948a:	bf00      	nop
 800948c:	3734      	adds	r7, #52	; 0x34
 800948e:	46bd      	mov	sp, r7
 8009490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009492:	bf00      	nop
 8009494:	2000a16c 	.word	0x2000a16c
 8009498:	2000a14c 	.word	0x2000a14c
 800949c:	2000a176 	.word	0x2000a176
 80094a0:	0800f5d4 	.word	0x0800f5d4
 80094a4:	0800f8a0 	.word	0x0800f8a0
 80094a8:	0800f618 	.word	0x0800f618

080094ac <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80094b2:	4b17      	ldr	r3, [pc, #92]	; (8009510 <tcp_getoptbyte+0x64>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d005      	beq.n	80094c6 <tcp_getoptbyte+0x1a>
 80094ba:	4b16      	ldr	r3, [pc, #88]	; (8009514 <tcp_getoptbyte+0x68>)
 80094bc:	881a      	ldrh	r2, [r3, #0]
 80094be:	4b16      	ldr	r3, [pc, #88]	; (8009518 <tcp_getoptbyte+0x6c>)
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d20e      	bcs.n	80094e4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80094c6:	4b15      	ldr	r3, [pc, #84]	; (800951c <tcp_getoptbyte+0x70>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3314      	adds	r3, #20
 80094cc:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80094ce:	4b11      	ldr	r3, [pc, #68]	; (8009514 <tcp_getoptbyte+0x68>)
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	b291      	uxth	r1, r2
 80094d6:	4a0f      	ldr	r2, [pc, #60]	; (8009514 <tcp_getoptbyte+0x68>)
 80094d8:	8011      	strh	r1, [r2, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	4413      	add	r3, r2
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	e010      	b.n	8009506 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80094e4:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <tcp_getoptbyte+0x68>)
 80094e6:	881b      	ldrh	r3, [r3, #0]
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	b291      	uxth	r1, r2
 80094ec:	4a09      	ldr	r2, [pc, #36]	; (8009514 <tcp_getoptbyte+0x68>)
 80094ee:	8011      	strh	r1, [r2, #0]
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	4b09      	ldr	r3, [pc, #36]	; (8009518 <tcp_getoptbyte+0x6c>)
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80094fc:	4b04      	ldr	r3, [pc, #16]	; (8009510 <tcp_getoptbyte+0x64>)
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	4413      	add	r3, r2
 8009504:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009506:	4618      	mov	r0, r3
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	bc80      	pop	{r7}
 800950e:	4770      	bx	lr
 8009510:	2000a164 	.word	0x2000a164
 8009514:	2000a168 	.word	0x2000a168
 8009518:	2000a162 	.word	0x2000a162
 800951c:	2000a15c 	.word	0x2000a15c

08009520 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009528:	4b2e      	ldr	r3, [pc, #184]	; (80095e4 <tcp_parseopt+0xc4>)
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d055      	beq.n	80095dc <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009530:	4b2d      	ldr	r3, [pc, #180]	; (80095e8 <tcp_parseopt+0xc8>)
 8009532:	2200      	movs	r2, #0
 8009534:	801a      	strh	r2, [r3, #0]
 8009536:	e045      	b.n	80095c4 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8009538:	f7ff ffb8 	bl	80094ac <tcp_getoptbyte>
 800953c:	4603      	mov	r3, r0
 800953e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009540:	7bfb      	ldrb	r3, [r7, #15]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d006      	beq.n	8009554 <tcp_parseopt+0x34>
 8009546:	2b02      	cmp	r3, #2
 8009548:	dc2b      	bgt.n	80095a2 <tcp_parseopt+0x82>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d041      	beq.n	80095d2 <tcp_parseopt+0xb2>
 800954e:	2b01      	cmp	r3, #1
 8009550:	d127      	bne.n	80095a2 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 8009552:	e037      	b.n	80095c4 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009554:	f7ff ffaa 	bl	80094ac <tcp_getoptbyte>
 8009558:	4603      	mov	r3, r0
 800955a:	2b04      	cmp	r3, #4
 800955c:	d13b      	bne.n	80095d6 <tcp_parseopt+0xb6>
 800955e:	4b22      	ldr	r3, [pc, #136]	; (80095e8 <tcp_parseopt+0xc8>)
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	4a1f      	ldr	r2, [pc, #124]	; (80095e4 <tcp_parseopt+0xc4>)
 8009566:	8812      	ldrh	r2, [r2, #0]
 8009568:	4293      	cmp	r3, r2
 800956a:	da34      	bge.n	80095d6 <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800956c:	f7ff ff9e 	bl	80094ac <tcp_getoptbyte>
 8009570:	4603      	mov	r3, r0
 8009572:	b29b      	uxth	r3, r3
 8009574:	021b      	lsls	r3, r3, #8
 8009576:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8009578:	f7ff ff98 	bl	80094ac <tcp_getoptbyte>
 800957c:	4603      	mov	r3, r0
 800957e:	b29a      	uxth	r2, r3
 8009580:	89bb      	ldrh	r3, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009586:	89bb      	ldrh	r3, [r7, #12]
 8009588:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800958c:	d804      	bhi.n	8009598 <tcp_parseopt+0x78>
 800958e:	89bb      	ldrh	r3, [r7, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <tcp_parseopt+0x78>
 8009594:	89ba      	ldrh	r2, [r7, #12]
 8009596:	e001      	b.n	800959c <tcp_parseopt+0x7c>
 8009598:	f44f 7206 	mov.w	r2, #536	; 0x218
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 80095a0:	e010      	b.n	80095c4 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80095a2:	f7ff ff83 	bl	80094ac <tcp_getoptbyte>
 80095a6:	4603      	mov	r3, r0
 80095a8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80095aa:	7afb      	ldrb	r3, [r7, #11]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d914      	bls.n	80095da <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80095b0:	7afb      	ldrb	r3, [r7, #11]
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <tcp_parseopt+0xc8>)
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	4413      	add	r3, r2
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	3b02      	subs	r3, #2
 80095be:	b29a      	uxth	r2, r3
 80095c0:	4b09      	ldr	r3, [pc, #36]	; (80095e8 <tcp_parseopt+0xc8>)
 80095c2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80095c4:	4b08      	ldr	r3, [pc, #32]	; (80095e8 <tcp_parseopt+0xc8>)
 80095c6:	881a      	ldrh	r2, [r3, #0]
 80095c8:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <tcp_parseopt+0xc4>)
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d3b3      	bcc.n	8009538 <tcp_parseopt+0x18>
 80095d0:	e004      	b.n	80095dc <tcp_parseopt+0xbc>
        return;
 80095d2:	bf00      	nop
 80095d4:	e002      	b.n	80095dc <tcp_parseopt+0xbc>
          return;
 80095d6:	bf00      	nop
 80095d8:	e000      	b.n	80095dc <tcp_parseopt+0xbc>
          return;
 80095da:	bf00      	nop
      }
    }
  }
}
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	2000a160 	.word	0x2000a160
 80095e8:	2000a168 	.word	0x2000a168

080095ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80095ec:	b480      	push	{r7}
 80095ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80095f0:	4b05      	ldr	r3, [pc, #20]	; (8009608 <tcp_trigger_input_pcb_close+0x1c>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	f043 0310 	orr.w	r3, r3, #16
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	4b03      	ldr	r3, [pc, #12]	; (8009608 <tcp_trigger_input_pcb_close+0x1c>)
 80095fc:	701a      	strb	r2, [r3, #0]
}
 80095fe:	bf00      	nop
 8009600:	46bd      	mov	sp, r7
 8009602:	bc80      	pop	{r7}
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	2000a179 	.word	0x2000a179

0800960c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	607b      	str	r3, [r7, #4]
 8009616:	460b      	mov	r3, r1
 8009618:	817b      	strh	r3, [r7, #10]
 800961a:	4613      	mov	r3, r2
 800961c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800961e:	897a      	ldrh	r2, [r7, #10]
 8009620:	893b      	ldrh	r3, [r7, #8]
 8009622:	4413      	add	r3, r2
 8009624:	b29b      	uxth	r3, r3
 8009626:	3314      	adds	r3, #20
 8009628:	b29b      	uxth	r3, r3
 800962a:	2200      	movs	r2, #0
 800962c:	4619      	mov	r1, r3
 800962e:	2001      	movs	r0, #1
 8009630:	f7fb fd80 	bl	8005134 <pbuf_alloc>
 8009634:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d056      	beq.n	80096ea <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800963c:	897b      	ldrh	r3, [r7, #10]
 800963e:	3313      	adds	r3, #19
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	8952      	ldrh	r2, [r2, #10]
 8009644:	4293      	cmp	r3, r2
 8009646:	db05      	blt.n	8009654 <tcp_output_alloc_header+0x48>
 8009648:	4b2a      	ldr	r3, [pc, #168]	; (80096f4 <tcp_output_alloc_header+0xe8>)
 800964a:	2272      	movs	r2, #114	; 0x72
 800964c:	492a      	ldr	r1, [pc, #168]	; (80096f8 <tcp_output_alloc_header+0xec>)
 800964e:	482b      	ldr	r0, [pc, #172]	; (80096fc <tcp_output_alloc_header+0xf0>)
 8009650:	f004 f848 	bl	800d6e4 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8adb      	ldrh	r3, [r3, #22]
 800965e:	4618      	mov	r0, r3
 8009660:	f7fa ffad 	bl	80045be <lwip_htons>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	8b1b      	ldrh	r3, [r3, #24]
 8009670:	4618      	mov	r0, r3
 8009672:	f7fa ffa4 	bl	80045be <lwip_htons>
 8009676:	4603      	mov	r3, r0
 8009678:	461a      	mov	r2, r3
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	4618      	mov	r0, r3
 800968a:	f7fa ffa5 	bl	80045d8 <lwip_htonl>
 800968e:	4602      	mov	r2, r0
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009694:	897b      	ldrh	r3, [r7, #10]
 8009696:	089b      	lsrs	r3, r3, #2
 8009698:	b29b      	uxth	r3, r3
 800969a:	3305      	adds	r3, #5
 800969c:	b29b      	uxth	r3, r3
 800969e:	031b      	lsls	r3, r3, #12
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	f043 0310 	orr.w	r3, r3, #16
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fa ff88 	bl	80045be <lwip_htons>
 80096ae:	4603      	mov	r3, r0
 80096b0:	461a      	mov	r2, r3
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fa ff7f 	bl	80045be <lwip_htons>
 80096c0:	4603      	mov	r3, r0
 80096c2:	461a      	mov	r2, r3
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	2200      	movs	r2, #0
 80096cc:	741a      	strb	r2, [r3, #16]
 80096ce:	2200      	movs	r2, #0
 80096d0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2200      	movs	r2, #0
 80096d6:	749a      	strb	r2, [r3, #18]
 80096d8:	2200      	movs	r2, #0
 80096da:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80096e4:	441a      	add	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80096ea:	697b      	ldr	r3, [r7, #20]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	0800f95c 	.word	0x0800f95c
 80096f8:	0800f990 	.word	0x0800f990
 80096fc:	0800f9c0 	.word	0x0800f9c0

08009700 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009700:	b590      	push	{r4, r7, lr}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800970c:	2b00      	cmp	r3, #0
 800970e:	d02d      	beq.n	800976c <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	e002      	b.n	800971e <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1f8      	bne.n	8009718 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	899b      	ldrh	r3, [r3, #12]
 800972c:	b29b      	uxth	r3, r3
 800972e:	4618      	mov	r0, r3
 8009730:	f7fa ff45 	bl	80045be <lwip_htons>
 8009734:	4603      	mov	r3, r0
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	2b00      	cmp	r3, #0
 800973c:	d116      	bne.n	800976c <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	899b      	ldrh	r3, [r3, #12]
 8009744:	b29c      	uxth	r4, r3
 8009746:	2001      	movs	r0, #1
 8009748:	f7fa ff39 	bl	80045be <lwip_htons>
 800974c:	4603      	mov	r3, r0
 800974e:	461a      	mov	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	4322      	orrs	r2, r4
 8009756:	b292      	uxth	r2, r2
 8009758:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7e9b      	ldrb	r3, [r3, #26]
 800975e:	f043 0320 	orr.w	r3, r3, #32
 8009762:	b2da      	uxtb	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	e004      	b.n	8009776 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800976c:	2101      	movs	r1, #1
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f88e 	bl	8009890 <tcp_enqueue_flags>
 8009774:	4603      	mov	r3, r0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	bd90      	pop	{r4, r7, pc}
	...

08009780 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009780:	b590      	push	{r4, r7, lr}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	603b      	str	r3, [r7, #0]
 800978c:	4613      	mov	r3, r2
 800978e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009790:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	b2db      	uxtb	r3, r3
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800979e:	2003      	movs	r0, #3
 80097a0:	f7fb fab6 	bl	8004d10 <memp_malloc>
 80097a4:	6138      	str	r0, [r7, #16]
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d104      	bne.n	80097b6 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80097ac:	68b8      	ldr	r0, [r7, #8]
 80097ae:	f7fc f839 	bl	8005824 <pbuf_free>
    return NULL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	e061      	b.n	800987a <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80097bc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2200      	movs	r2, #0
 80097c2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	891a      	ldrh	r2, [r3, #8]
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d205      	bcs.n	80097e2 <tcp_create_segment+0x62>
 80097d6:	4b2b      	ldr	r3, [pc, #172]	; (8009884 <tcp_create_segment+0x104>)
 80097d8:	22ba      	movs	r2, #186	; 0xba
 80097da:	492b      	ldr	r1, [pc, #172]	; (8009888 <tcp_create_segment+0x108>)
 80097dc:	482b      	ldr	r0, [pc, #172]	; (800988c <tcp_create_segment+0x10c>)
 80097de:	f003 ff81 	bl	800d6e4 <iprintf>
  seg->len = p->tot_len - optlen;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	891a      	ldrh	r2, [r3, #8]
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80097f2:	2114      	movs	r1, #20
 80097f4:	68b8      	ldr	r0, [r7, #8]
 80097f6:	f7fb fff1 	bl	80057dc <pbuf_header>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d004      	beq.n	800980a <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009800:	6938      	ldr	r0, [r7, #16]
 8009802:	f7fd f9ff 	bl	8006c04 <tcp_seg_free>
    return NULL;
 8009806:	2300      	movs	r3, #0
 8009808:	e037      	b.n	800987a <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	8ada      	ldrh	r2, [r3, #22]
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	68dc      	ldr	r4, [r3, #12]
 800981c:	4610      	mov	r0, r2
 800981e:	f7fa fece 	bl	80045be <lwip_htons>
 8009822:	4603      	mov	r3, r0
 8009824:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8b1a      	ldrh	r2, [r3, #24]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	68dc      	ldr	r4, [r3, #12]
 800982e:	4610      	mov	r0, r2
 8009830:	f7fa fec5 	bl	80045be <lwip_htons>
 8009834:	4603      	mov	r3, r0
 8009836:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	68dc      	ldr	r4, [r3, #12]
 800983c:	6838      	ldr	r0, [r7, #0]
 800983e:	f7fa fecb 	bl	80045d8 <lwip_htonl>
 8009842:	4603      	mov	r3, r0
 8009844:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	089b      	lsrs	r3, r3, #2
 800984a:	b2db      	uxtb	r3, r3
 800984c:	b29b      	uxth	r3, r3
 800984e:	3305      	adds	r3, #5
 8009850:	b29b      	uxth	r3, r3
 8009852:	031b      	lsls	r3, r3, #12
 8009854:	b29a      	uxth	r2, r3
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	b29b      	uxth	r3, r3
 800985a:	4313      	orrs	r3, r2
 800985c:	b29a      	uxth	r2, r3
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	68dc      	ldr	r4, [r3, #12]
 8009862:	4610      	mov	r0, r2
 8009864:	f7fa feab 	bl	80045be <lwip_htons>
 8009868:	4603      	mov	r3, r0
 800986a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	749a      	strb	r2, [r3, #18]
 8009874:	2200      	movs	r2, #0
 8009876:	74da      	strb	r2, [r3, #19]
  return seg;
 8009878:	693b      	ldr	r3, [r7, #16]
}
 800987a:	4618      	mov	r0, r3
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	bd90      	pop	{r4, r7, pc}
 8009882:	bf00      	nop
 8009884:	0800f95c 	.word	0x0800f95c
 8009888:	0800f9e8 	.word	0x0800f9e8
 800988c:	0800f9c0 	.word	0x0800f9c0

08009890 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08a      	sub	sp, #40	; 0x28
 8009894:	af02      	add	r7, sp, #8
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <tcp_enqueue_flags+0x2c>
 80098ae:	4b6f      	ldr	r3, [pc, #444]	; (8009a6c <tcp_enqueue_flags+0x1dc>)
 80098b0:	f240 321a 	movw	r2, #794	; 0x31a
 80098b4:	496e      	ldr	r1, [pc, #440]	; (8009a70 <tcp_enqueue_flags+0x1e0>)
 80098b6:	486f      	ldr	r0, [pc, #444]	; (8009a74 <tcp_enqueue_flags+0x1e4>)
 80098b8:	f003 ff14 	bl	800d6e4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098c2:	2b08      	cmp	r3, #8
 80098c4:	d806      	bhi.n	80098d4 <tcp_enqueue_flags+0x44>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098cc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d90e      	bls.n	80098f2 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d109      	bne.n	80098f2 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	7e9b      	ldrb	r3, [r3, #26]
 80098e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80098ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098f0:	e0b7      	b.n	8009a62 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	f003 0302 	and.w	r3, r3, #2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80098fc:	2301      	movs	r3, #1
 80098fe:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009900:	7ffb      	ldrb	r3, [r7, #31]
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	b2db      	uxtb	r3, r3
 8009906:	f003 0304 	and.w	r3, r3, #4
 800990a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	b29b      	uxth	r3, r3
 8009910:	2200      	movs	r2, #0
 8009912:	4619      	mov	r1, r3
 8009914:	2000      	movs	r0, #0
 8009916:	f7fb fc0d 	bl	8005134 <pbuf_alloc>
 800991a:	6138      	str	r0, [r7, #16]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d109      	bne.n	8009936 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	7e9b      	ldrb	r3, [r3, #26]
 8009926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800992a:	b2da      	uxtb	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009934:	e095      	b.n	8009a62 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	895a      	ldrh	r2, [r3, #10]
 800993a:	7dfb      	ldrb	r3, [r7, #23]
 800993c:	b29b      	uxth	r3, r3
 800993e:	429a      	cmp	r2, r3
 8009940:	d206      	bcs.n	8009950 <tcp_enqueue_flags+0xc0>
 8009942:	4b4a      	ldr	r3, [pc, #296]	; (8009a6c <tcp_enqueue_flags+0x1dc>)
 8009944:	f44f 7250 	mov.w	r2, #832	; 0x340
 8009948:	494b      	ldr	r1, [pc, #300]	; (8009a78 <tcp_enqueue_flags+0x1e8>)
 800994a:	484a      	ldr	r0, [pc, #296]	; (8009a74 <tcp_enqueue_flags+0x1e4>)
 800994c:	f003 feca 	bl	800d6e4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009954:	78fa      	ldrb	r2, [r7, #3]
 8009956:	7ffb      	ldrb	r3, [r7, #31]
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	460b      	mov	r3, r1
 800995c:	6939      	ldr	r1, [r7, #16]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff ff0e 	bl	8009780 <tcp_create_segment>
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d109      	bne.n	8009980 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	7e9b      	ldrb	r3, [r3, #26]
 8009970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009974:	b2da      	uxtb	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800997a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800997e:	e070      	b.n	8009a62 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f003 0303 	and.w	r3, r3, #3
 8009988:	2b00      	cmp	r3, #0
 800998a:	d006      	beq.n	800999a <tcp_enqueue_flags+0x10a>
 800998c:	4b37      	ldr	r3, [pc, #220]	; (8009a6c <tcp_enqueue_flags+0x1dc>)
 800998e:	f240 3249 	movw	r2, #841	; 0x349
 8009992:	493a      	ldr	r1, [pc, #232]	; (8009a7c <tcp_enqueue_flags+0x1ec>)
 8009994:	4837      	ldr	r0, [pc, #220]	; (8009a74 <tcp_enqueue_flags+0x1e4>)
 8009996:	f003 fea5 	bl	800d6e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	891b      	ldrh	r3, [r3, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d006      	beq.n	80099b0 <tcp_enqueue_flags+0x120>
 80099a2:	4b32      	ldr	r3, [pc, #200]	; (8009a6c <tcp_enqueue_flags+0x1dc>)
 80099a4:	f240 324a 	movw	r2, #842	; 0x34a
 80099a8:	4935      	ldr	r1, [pc, #212]	; (8009a80 <tcp_enqueue_flags+0x1f0>)
 80099aa:	4832      	ldr	r0, [pc, #200]	; (8009a74 <tcp_enqueue_flags+0x1e4>)
 80099ac:	f003 fe9a 	bl	800d6e4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d103      	bne.n	80099c0 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	669a      	str	r2, [r3, #104]	; 0x68
 80099be:	e00d      	b.n	80099dc <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099c4:	61bb      	str	r3, [r7, #24]
 80099c6:	e002      	b.n	80099ce <tcp_enqueue_flags+0x13e>
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	61bb      	str	r3, [r7, #24]
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1f8      	bne.n	80099c8 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d104      	bne.n	80099f8 <tcp_enqueue_flags+0x168>
 80099ee:	78fb      	ldrb	r3, [r7, #3]
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009a02:	78fb      	ldrb	r3, [r7, #3]
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d006      	beq.n	8009a1a <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	7e9b      	ldrb	r3, [r3, #26]
 8009a10:	f043 0320 	orr.w	r3, r3, #32
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fb ff94 	bl	800594c <pbuf_clen>
 8009a24:	4603      	mov	r3, r0
 8009a26:	461a      	mov	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a2e:	4413      	add	r3, r2
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00e      	beq.n	8009a60 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10a      	bne.n	8009a60 <tcp_enqueue_flags+0x1d0>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <tcp_enqueue_flags+0x1d0>
 8009a52:	4b06      	ldr	r3, [pc, #24]	; (8009a6c <tcp_enqueue_flags+0x1dc>)
 8009a54:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009a58:	490a      	ldr	r1, [pc, #40]	; (8009a84 <tcp_enqueue_flags+0x1f4>)
 8009a5a:	4806      	ldr	r0, [pc, #24]	; (8009a74 <tcp_enqueue_flags+0x1e4>)
 8009a5c:	f003 fe42 	bl	800d6e4 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3720      	adds	r7, #32
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	0800f95c 	.word	0x0800f95c
 8009a70:	0800fc60 	.word	0x0800fc60
 8009a74:	0800f9c0 	.word	0x0800f9c0
 8009a78:	0800fcb8 	.word	0x0800fcb8
 8009a7c:	0800fcf4 	.word	0x0800fcf4
 8009a80:	0800fd0c 	.word	0x0800fd0c
 8009a84:	0800fd38 	.word	0x0800fd38

08009a88 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009a88:	b590      	push	{r4, r7, lr}
 8009a8a:	b08b      	sub	sp, #44	; 0x2c
 8009a8c:	af04      	add	r7, sp, #16
 8009a8e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8009a90:	2300      	movs	r3, #0
 8009a92:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009a94:	7dbb      	ldrb	r3, [r7, #22]
 8009a96:	b29c      	uxth	r4, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fa fd9b 	bl	80045d8 <lwip_htonl>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff fdaf 	bl	800960c <tcp_output_alloc_header>
 8009aae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d109      	bne.n	8009aca <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	7e9b      	ldrb	r3, [r3, #26]
 8009aba:	f043 0303 	orr.w	r3, r3, #3
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009ac4:	f06f 0301 	mvn.w	r3, #1
 8009ac8:	e036      	b.n	8009b38 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f002 fad8 	bl	800c084 <ip4_route>
 8009ad4:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d102      	bne.n	8009ae2 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8009adc:	23fc      	movs	r3, #252	; 0xfc
 8009ade:	75fb      	strb	r3, [r7, #23]
 8009ae0:	e012      	b.n	8009b08 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8009ae2:	6879      	ldr	r1, [r7, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	1d18      	adds	r0, r3, #4
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7a9c      	ldrb	r4, [r3, #10]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	7a5b      	ldrb	r3, [r3, #9]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	9202      	str	r2, [sp, #8]
 8009af4:	2206      	movs	r2, #6
 8009af6:	9201      	str	r2, [sp, #4]
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	4623      	mov	r3, r4
 8009afc:	4602      	mov	r2, r0
 8009afe:	6938      	ldr	r0, [r7, #16]
 8009b00:	f002 fc6a 	bl	800c3d8 <ip4_output_if>
 8009b04:	4603      	mov	r3, r0
 8009b06:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009b08:	6938      	ldr	r0, [r7, #16]
 8009b0a:	f7fb fe8b 	bl	8005824 <pbuf_free>

  if (err != ERR_OK) {
 8009b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d007      	beq.n	8009b26 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	7e9b      	ldrb	r3, [r3, #26]
 8009b1a:	f043 0303 	orr.w	r3, r3, #3
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	769a      	strb	r2, [r3, #26]
 8009b24:	e006      	b.n	8009b34 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	7e9b      	ldrb	r3, [r3, #26]
 8009b2a:	f023 0303 	bic.w	r3, r3, #3
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8009b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	371c      	adds	r7, #28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd90      	pop	{r4, r7, pc}

08009b40 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009b40:	b5b0      	push	{r4, r5, r7, lr}
 8009b42:	b08a      	sub	sp, #40	; 0x28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	7d1b      	ldrb	r3, [r3, #20]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d106      	bne.n	8009b5e <tcp_output+0x1e>
 8009b50:	4b99      	ldr	r3, [pc, #612]	; (8009db8 <tcp_output+0x278>)
 8009b52:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8009b56:	4999      	ldr	r1, [pc, #612]	; (8009dbc <tcp_output+0x27c>)
 8009b58:	4899      	ldr	r0, [pc, #612]	; (8009dc0 <tcp_output+0x280>)
 8009b5a:	f003 fdc3 	bl	800d6e4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009b5e:	4b99      	ldr	r3, [pc, #612]	; (8009dc4 <tcp_output+0x284>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d101      	bne.n	8009b6c <tcp_output+0x2c>
    return ERR_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	e1cb      	b.n	8009f04 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	bf28      	it	cs
 8009b7c:	4613      	movcs	r3, r2
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b86:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	7e9b      	ldrb	r3, [r3, #26]
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d017      	beq.n	8009bc4 <tcp_output+0x84>
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00f      	beq.n	8009bba <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fa fd19 	bl	80045d8 <lwip_htonl>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb0:	8912      	ldrh	r2, [r2, #8]
 8009bb2:	4413      	add	r3, r2
     (seg == NULL ||
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d204      	bcs.n	8009bc4 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff ff64 	bl	8009a88 <tcp_send_empty_ack>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	e19f      	b.n	8009f04 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 8009bd0:	e002      	b.n	8009bd8 <tcp_output+0x98>
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	623b      	str	r3, [r7, #32]
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1f8      	bne.n	8009bd2 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	4618      	mov	r0, r3
 8009be6:	f002 fa4d 	bl	800c084 <ip4_route>
 8009bea:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d102      	bne.n	8009bf8 <tcp_output+0xb8>
    return ERR_RTE;
 8009bf2:	f06f 0303 	mvn.w	r3, #3
 8009bf6:	e185      	b.n	8009f04 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <tcp_output+0xc6>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d111      	bne.n	8009c2a <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <tcp_output+0xd2>
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	e000      	b.n	8009c14 <tcp_output+0xd4>
 8009c12:	2300      	movs	r3, #0
 8009c14:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <tcp_output+0xe2>
      return ERR_RTE;
 8009c1c:	f06f 0303 	mvn.w	r3, #3
 8009c20:	e170      	b.n	8009f04 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 813f 	beq.w	8009eb0 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fa fccd 	bl	80045d8 <lwip_htonl>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c48:	8912      	ldrh	r2, [r2, #8]
 8009c4a:	4413      	add	r3, r2
  if (seg != NULL &&
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	f080 812e 	bcs.w	8009eb0 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 812a 	beq.w	8009eb0 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c62:	461a      	mov	r2, r3
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	4293      	cmp	r3, r2
 8009c68:	f040 8122 	bne.w	8009eb0 <tcp_output+0x370>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f040 811d 	bne.w	8009eb0 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 812c 	bne.w	8009eda <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8009c92:	e122      	b.n	8009eda <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	899b      	ldrh	r3, [r3, #12]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fa fc8e 	bl	80045be <lwip_htons>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d006      	beq.n	8009cba <tcp_output+0x17a>
 8009cac:	4b42      	ldr	r3, [pc, #264]	; (8009db8 <tcp_output+0x278>)
 8009cae:	f240 4245 	movw	r2, #1093	; 0x445
 8009cb2:	4945      	ldr	r1, [pc, #276]	; (8009dc8 <tcp_output+0x288>)
 8009cb4:	4842      	ldr	r0, [pc, #264]	; (8009dc0 <tcp_output+0x280>)
 8009cb6:	f003 fd15 	bl	800d6e4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d01f      	beq.n	8009d02 <tcp_output+0x1c2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	7e9b      	ldrb	r3, [r3, #26]
 8009cc6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d119      	bne.n	8009d02 <tcp_output+0x1c2>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00b      	beq.n	8009cee <tcp_output+0x1ae>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d110      	bne.n	8009d02 <tcp_output+0x1c2>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ce4:	891a      	ldrh	r2, [r3, #8]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d209      	bcs.n	8009d02 <tcp_output+0x1c2>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d004      	beq.n	8009d02 <tcp_output+0x1c2>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cfe:	2b08      	cmp	r3, #8
 8009d00:	d901      	bls.n	8009d06 <tcp_output+0x1c6>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e000      	b.n	8009d08 <tcp_output+0x1c8>
 8009d06:	2300      	movs	r3, #0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d106      	bne.n	8009d1a <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7e9b      	ldrb	r3, [r3, #26]
 8009d10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 80e2 	beq.w	8009ede <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	7d1b      	ldrb	r3, [r3, #20]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d00d      	beq.n	8009d3e <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	899b      	ldrh	r3, [r3, #12]
 8009d28:	b29c      	uxth	r4, r3
 8009d2a:	2010      	movs	r0, #16
 8009d2c:	f7fa fc47 	bl	80045be <lwip_htons>
 8009d30:	4603      	mov	r3, r0
 8009d32:	461a      	mov	r2, r3
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	4322      	orrs	r2, r4
 8009d3a:	b292      	uxth	r2, r2
 8009d3c:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d44:	f000 f8e2 	bl	8009f0c <tcp_output_segment>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d009      	beq.n	8009d68 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	7e9b      	ldrb	r3, [r3, #26]
 8009d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	769a      	strb	r2, [r3, #26]
      return err;
 8009d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d66:	e0cd      	b.n	8009f04 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7d1b      	ldrb	r3, [r3, #20]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d006      	beq.n	8009d86 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	7e9b      	ldrb	r3, [r3, #26]
 8009d7c:	f023 0303 	bic.w	r3, r3, #3
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fa fc23 	bl	80045d8 <lwip_htonl>
 8009d92:	4604      	mov	r4, r0
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	891b      	ldrh	r3, [r3, #8]
 8009d98:	461d      	mov	r5, r3
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	899b      	ldrh	r3, [r3, #12]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fa fc0b 	bl	80045be <lwip_htons>
 8009da8:	4603      	mov	r3, r0
 8009daa:	f003 0303 	and.w	r3, r3, #3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00c      	beq.n	8009dcc <tcp_output+0x28c>
 8009db2:	2301      	movs	r3, #1
 8009db4:	e00b      	b.n	8009dce <tcp_output+0x28e>
 8009db6:	bf00      	nop
 8009db8:	0800f95c 	.word	0x0800f95c
 8009dbc:	0800fd60 	.word	0x0800fd60
 8009dc0:	0800f9c0 	.word	0x0800f9c0
 8009dc4:	2000a180 	.word	0x2000a180
 8009dc8:	0800fd88 	.word	0x0800fd88
 8009dcc:	2300      	movs	r3, #0
 8009dce:	442b      	add	r3, r5
 8009dd0:	4423      	add	r3, r4
 8009dd2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	da02      	bge.n	8009de6 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	891b      	ldrh	r3, [r3, #8]
 8009dea:	461c      	mov	r4, r3
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	899b      	ldrh	r3, [r3, #12]
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fa fbe2 	bl	80045be <lwip_htons>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f003 0303 	and.w	r3, r3, #3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <tcp_output+0x2c8>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e000      	b.n	8009e0a <tcp_output+0x2ca>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4423      	add	r3, r4
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d049      	beq.n	8009ea4 <tcp_output+0x364>
      seg->next = NULL;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d105      	bne.n	8009e2a <tcp_output+0x2ea>
        pcb->unacked = seg;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e22:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	623b      	str	r3, [r7, #32]
 8009e28:	e03f      	b.n	8009eaa <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fa fbd1 	bl	80045d8 <lwip_htonl>
 8009e36:	4604      	mov	r4, r0
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fa fbca 	bl	80045d8 <lwip_htonl>
 8009e44:	4603      	mov	r3, r0
 8009e46:	1ae3      	subs	r3, r4, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	da24      	bge.n	8009e96 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	336c      	adds	r3, #108	; 0x6c
 8009e50:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009e52:	e002      	b.n	8009e5a <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d011      	beq.n	8009e86 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fa fbb4 	bl	80045d8 <lwip_htonl>
 8009e70:	4604      	mov	r4, r0
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fa fbad 	bl	80045d8 <lwip_htonl>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dbe6      	blt.n	8009e54 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	e009      	b.n	8009eaa <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	623b      	str	r3, [r7, #32]
 8009ea2:	e002      	b.n	8009eaa <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ea6:	f7fc fead 	bl	8006c04 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d015      	beq.n	8009ee2 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fa fb8b 	bl	80045d8 <lwip_htonl>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ecc:	8912      	ldrh	r2, [r2, #8]
 8009ece:	4413      	add	r3, r2
  while (seg != NULL &&
 8009ed0:	69ba      	ldr	r2, [r7, #24]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	f4bf aede 	bcs.w	8009c94 <tcp_output+0x154>
  }
output_done:
 8009ed8:	e003      	b.n	8009ee2 <tcp_output+0x3a2>
    goto output_done;
 8009eda:	bf00      	nop
 8009edc:	e002      	b.n	8009ee4 <tcp_output+0x3a4>
      break;
 8009ede:	bf00      	nop
 8009ee0:	e000      	b.n	8009ee4 <tcp_output+0x3a4>
output_done:
 8009ee2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d103      	bne.n	8009ef4 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	7e9b      	ldrb	r3, [r3, #26]
 8009ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3728      	adds	r7, #40	; 0x28
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bdb0      	pop	{r4, r5, r7, pc}

08009f0c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009f0c:	b5b0      	push	{r4, r5, r7, lr}
 8009f0e:	b08c      	sub	sp, #48	; 0x30
 8009f10:	af04      	add	r7, sp, #16
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	89db      	ldrh	r3, [r3, #14]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d001      	beq.n	8009f26 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e08a      	b.n	800a03c <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	68dc      	ldr	r4, [r3, #12]
 8009f2e:	4610      	mov	r0, r2
 8009f30:	f7fa fb52 	bl	80045d8 <lwip_htonl>
 8009f34:	4603      	mov	r3, r0
 8009f36:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	68dc      	ldr	r4, [r3, #12]
 8009f40:	4610      	mov	r0, r2
 8009f42:	f7fa fb3c 	bl	80045be <lwip_htons>
 8009f46:	4603      	mov	r3, r0
 8009f48:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009f52:	441a      	add	r2, r3
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	3314      	adds	r3, #20
 8009f5e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	7a9b      	ldrb	r3, [r3, #10]
 8009f64:	f003 0301 	and.w	r3, r3, #1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d014      	beq.n	8009f96 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4619      	mov	r1, r3
 8009f72:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009f76:	f7fd f8ad 	bl	80070d4 <tcp_eff_send_mss_impl>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009f7e:	8b7b      	ldrh	r3, [r7, #26]
 8009f80:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fa fb27 	bl	80045d8 <lwip_htonl>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	3304      	adds	r3, #4
 8009f94:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	da02      	bge.n	8009fa6 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10c      	bne.n	8009fc8 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8009fae:	4b25      	ldr	r3, [pc, #148]	; (800a044 <tcp_output_segment+0x138>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fa fb0b 	bl	80045d8 <lwip_htonl>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	68da      	ldr	r2, [r3, #12]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	8959      	ldrh	r1, [r3, #10]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	8b3a      	ldrh	r2, [r7, #24]
 8009fe2:	1a8a      	subs	r2, r1, r2
 8009fe4:	b292      	uxth	r2, r2
 8009fe6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	8919      	ldrh	r1, [r3, #8]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	8b3a      	ldrh	r2, [r7, #24]
 8009ff4:	1a8a      	subs	r2, r1, r2
 8009ff6:	b292      	uxth	r2, r2
 8009ff8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	68d2      	ldr	r2, [r2, #12]
 800a002:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	741a      	strb	r2, [r3, #16]
 800a00c:	2200      	movs	r2, #0
 800a00e:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6858      	ldr	r0, [r3, #4]
 800a014:	68b9      	ldr	r1, [r7, #8]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	1d1c      	adds	r4, r3, #4
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	7a9d      	ldrb	r5, [r3, #10]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	7a5b      	ldrb	r3, [r3, #9]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	9202      	str	r2, [sp, #8]
 800a026:	2206      	movs	r2, #6
 800a028:	9201      	str	r2, [sp, #4]
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	462b      	mov	r3, r5
 800a02e:	4622      	mov	r2, r4
 800a030:	f002 f9d2 	bl	800c3d8 <ip4_output_if>
 800a034:	4603      	mov	r3, r0
 800a036:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800a038:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3720      	adds	r7, #32
 800a040:	46bd      	mov	sp, r7
 800a042:	bdb0      	pop	{r4, r5, r7, pc}
 800a044:	2000a134 	.word	0x2000a134

0800a048 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08c      	sub	sp, #48	; 0x30
 800a04c:	af04      	add	r7, sp, #16
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a056:	2200      	movs	r2, #0
 800a058:	2114      	movs	r1, #20
 800a05a:	2001      	movs	r0, #1
 800a05c:	f7fb f86a 	bl	8005134 <pbuf_alloc>
 800a060:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d05b      	beq.n	800a120 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	895b      	ldrh	r3, [r3, #10]
 800a06c:	2b13      	cmp	r3, #19
 800a06e:	d806      	bhi.n	800a07e <tcp_rst+0x36>
 800a070:	4b2d      	ldr	r3, [pc, #180]	; (800a128 <tcp_rst+0xe0>)
 800a072:	f240 524c 	movw	r2, #1356	; 0x54c
 800a076:	492d      	ldr	r1, [pc, #180]	; (800a12c <tcp_rst+0xe4>)
 800a078:	482d      	ldr	r0, [pc, #180]	; (800a130 <tcp_rst+0xe8>)
 800a07a:	f003 fb33 	bl	800d6e4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800a084:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a086:	4618      	mov	r0, r3
 800a088:	f7fa fa99 	bl	80045be <lwip_htons>
 800a08c:	4603      	mov	r3, r0
 800a08e:	461a      	mov	r2, r3
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800a094:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a096:	4618      	mov	r0, r3
 800a098:	f7fa fa91 	bl	80045be <lwip_htons>
 800a09c:	4603      	mov	r3, r0
 800a09e:	461a      	mov	r2, r3
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f7fa fa97 	bl	80045d8 <lwip_htonl>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800a0b0:	68b8      	ldr	r0, [r7, #8]
 800a0b2:	f7fa fa91 	bl	80045d8 <lwip_htonl>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a0bc:	f245 0014 	movw	r0, #20500	; 0x5014
 800a0c0:	f7fa fa7d 	bl	80045be <lwip_htons>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f042 0208 	orr.w	r2, r2, #8
 800a0d4:	739a      	strb	r2, [r3, #14]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a0dc:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	741a      	strb	r2, [r3, #16]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	749a      	strb	r2, [r3, #18]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a0f2:	6838      	ldr	r0, [r7, #0]
 800a0f4:	f001 ffc6 	bl	800c084 <ip4_route>
 800a0f8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00b      	beq.n	800a118 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	9302      	str	r3, [sp, #8]
 800a104:	2306      	movs	r3, #6
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	2300      	movs	r3, #0
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	23ff      	movs	r3, #255	; 0xff
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	6879      	ldr	r1, [r7, #4]
 800a112:	69f8      	ldr	r0, [r7, #28]
 800a114:	f002 f960 	bl	800c3d8 <ip4_output_if>
  }
  pbuf_free(p);
 800a118:	69f8      	ldr	r0, [r7, #28]
 800a11a:	f7fb fb83 	bl	8005824 <pbuf_free>
 800a11e:	e000      	b.n	800a122 <tcp_rst+0xda>
    return;
 800a120:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a122:	3720      	adds	r7, #32
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	0800f95c 	.word	0x0800f95c
 800a12c:	0800f990 	.word	0x0800f990
 800a130:	0800f9c0 	.word	0x0800f9c0

0800a134 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a140:	2b00      	cmp	r3, #0
 800a142:	d029      	beq.n	800a198 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a148:	60fb      	str	r3, [r7, #12]
 800a14a:	e002      	b.n	800a152 <tcp_rexmit_rto+0x1e>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	60fb      	str	r3, [r7, #12]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1f8      	bne.n	800a14c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a176:	2bff      	cmp	r3, #255	; 0xff
 800a178:	d007      	beq.n	800a18a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a180:	3301      	adds	r3, #1
 800a182:	b2da      	uxtb	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff fcd5 	bl	8009b40 <tcp_output>
 800a196:	e000      	b.n	800a19a <tcp_rexmit_rto+0x66>
    return;
 800a198:	bf00      	nop
}
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a1a0:	b590      	push	{r4, r7, lr}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d043      	beq.n	800a238 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1b4:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3368      	adds	r3, #104	; 0x68
 800a1c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a1c4:	e002      	b.n	800a1cc <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d011      	beq.n	800a1f8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fa f9fb 	bl	80045d8 <lwip_htonl>
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fa f9f4 	bl	80045d8 <lwip_htonl>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	dbe6      	blt.n	800a1c6 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d103      	bne.n	800a216 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a21c:	2bff      	cmp	r3, #255	; 0xff
 800a21e:	d007      	beq.n	800a230 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a226:	3301      	adds	r3, #1
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	635a      	str	r2, [r3, #52]	; 0x34
 800a236:	e000      	b.n	800a23a <tcp_rexmit+0x9a>
    return;
 800a238:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd90      	pop	{r4, r7, pc}

0800a240 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d041      	beq.n	800a2d4 <tcp_rexmit_fast+0x94>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	7e9b      	ldrb	r3, [r3, #26]
 800a254:	f003 0304 	and.w	r3, r3, #4
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d13b      	bne.n	800a2d4 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7ff ff9f 	bl	800a1a0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a26e:	4293      	cmp	r3, r2
 800a270:	bf28      	it	cs
 800a272:	4613      	movcs	r3, r2
 800a274:	b29b      	uxth	r3, r3
 800a276:	0fda      	lsrs	r2, r3, #31
 800a278:	4413      	add	r3, r2
 800a27a:	105b      	asrs	r3, r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a28a:	461a      	mov	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	429a      	cmp	r2, r3
 800a294:	d206      	bcs.n	800a2a4 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	0049      	lsls	r1, r1, #1
 800a2b2:	440b      	add	r3, r1
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	4413      	add	r3, r2
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	7e9b      	ldrb	r3, [r3, #26]
 800a2c4:	f043 0304 	orr.w	r3, r3, #4
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800a2d4:	bf00      	nop
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08a      	sub	sp, #40	; 0x28
 800a2e0:	af04      	add	r7, sp, #16
 800a2e2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fa f974 	bl	80045d8 <lwip_htonl>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7ff f988 	bl	800960c <tcp_output_alloc_header>
 800a2fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d102      	bne.n	800a30a <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a308:	e021      	b.n	800a34e <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	3304      	adds	r3, #4
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 feb8 	bl	800c084 <ip4_route>
 800a314:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800a31c:	23fc      	movs	r3, #252	; 0xfc
 800a31e:	75fb      	strb	r3, [r7, #23]
 800a320:	e010      	b.n	800a344 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a322:	6879      	ldr	r1, [r7, #4]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	1d1a      	adds	r2, r3, #4
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	7a98      	ldrb	r0, [r3, #10]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	9302      	str	r3, [sp, #8]
 800a330:	2306      	movs	r3, #6
 800a332:	9301      	str	r3, [sp, #4]
 800a334:	2300      	movs	r3, #0
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	4603      	mov	r3, r0
 800a33a:	6938      	ldr	r0, [r7, #16]
 800a33c:	f002 f84c 	bl	800c3d8 <ip4_output_if>
 800a340:	4603      	mov	r3, r0
 800a342:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a344:	6938      	ldr	r0, [r7, #16]
 800a346:	f7fb fa6d 	bl	8005824 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a34a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a356:	b590      	push	{r4, r7, lr}
 800a358:	b08f      	sub	sp, #60	; 0x3c
 800a35a:	af04      	add	r7, sp, #16
 800a35c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a362:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d102      	bne.n	800a370 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a36e:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	e085      	b.n	800a486 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	899b      	ldrh	r3, [r3, #12]
 800a380:	b29b      	uxth	r3, r3
 800a382:	4618      	mov	r0, r3
 800a384:	f7fa f91b 	bl	80045be <lwip_htons>
 800a388:	4603      	mov	r3, r0
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d005      	beq.n	800a39e <tcp_zero_window_probe+0x48>
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	891b      	ldrh	r3, [r3, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <tcp_zero_window_probe+0x48>
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <tcp_zero_window_probe+0x4a>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a3a2:	7ffb      	ldrb	r3, [r7, #31]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	bf0c      	ite	eq
 800a3a8:	2301      	moveq	r3, #1
 800a3aa:	2300      	movne	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	8bba      	ldrh	r2, [r7, #28]
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff f926 	bl	800960c <tcp_output_alloc_header>
 800a3c0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d102      	bne.n	800a3ce <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a3c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3cc:	e05b      	b.n	800a486 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a3d4:	7ffb      	ldrb	r3, [r7, #31]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00e      	beq.n	800a3f8 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	899b      	ldrh	r3, [r3, #12]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a3e4:	b29c      	uxth	r4, r3
 800a3e6:	2011      	movs	r0, #17
 800a3e8:	f7fa f8e9 	bl	80045be <lwip_htons>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	4323      	orrs	r3, r4
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	819a      	strh	r2, [r3, #12]
 800a3f6:	e010      	b.n	800a41a <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	3314      	adds	r3, #20
 800a3fe:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	6858      	ldr	r0, [r3, #4]
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	891a      	ldrh	r2, [r3, #8]
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	891b      	ldrh	r3, [r3, #8]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	b29b      	uxth	r3, r3
 800a412:	2201      	movs	r2, #1
 800a414:	6939      	ldr	r1, [r7, #16]
 800a416:	f7fb fc03 	bl	8005c20 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	4618      	mov	r0, r3
 800a422:	f7fa f8d9 	bl	80045d8 <lwip_htonl>
 800a426:	4603      	mov	r3, r0
 800a428:	3301      	adds	r3, #1
 800a42a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	da02      	bge.n	800a43e <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3304      	adds	r3, #4
 800a442:	4618      	mov	r0, r3
 800a444:	f001 fe1e 	bl	800c084 <ip4_route>
 800a448:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d103      	bne.n	800a458 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800a450:	23fc      	movs	r3, #252	; 0xfc
 800a452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a456:	e011      	b.n	800a47c <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a458:	6879      	ldr	r1, [r7, #4]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	1d1a      	adds	r2, r3, #4
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	7a98      	ldrb	r0, [r3, #10]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	9302      	str	r3, [sp, #8]
 800a466:	2306      	movs	r3, #6
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	2300      	movs	r3, #0
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	4603      	mov	r3, r0
 800a470:	69b8      	ldr	r0, [r7, #24]
 800a472:	f001 ffb1 	bl	800c3d8 <ip4_output_if>
 800a476:	4603      	mov	r3, r0
 800a478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a47c:	69b8      	ldr	r0, [r7, #24]
 800a47e:	f7fb f9d1 	bl	8005824 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a482:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a486:	4618      	mov	r0, r3
 800a488:	372c      	adds	r7, #44	; 0x2c
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd90      	pop	{r4, r7, pc}
	...

0800a490 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a498:	f7fb fcd4 	bl	8005e44 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a49c:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <tcpip_tcp_timer+0x38>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d103      	bne.n	800a4ac <tcpip_tcp_timer+0x1c>
 800a4a4:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <tcpip_tcp_timer+0x3c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d005      	beq.n	800a4b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	4908      	ldr	r1, [pc, #32]	; (800a4d0 <tcpip_tcp_timer+0x40>)
 800a4b0:	20fa      	movs	r0, #250	; 0xfa
 800a4b2:	f000 f86f 	bl	800a594 <sys_timeout>
 800a4b6:	e003      	b.n	800a4c0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a4b8:	4b06      	ldr	r3, [pc, #24]	; (800a4d4 <tcpip_tcp_timer+0x44>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	601a      	str	r2, [r3, #0]
  }
}
 800a4be:	bf00      	nop
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	2000a140 	.word	0x2000a140
 800a4cc:	2000a144 	.word	0x2000a144
 800a4d0:	0800a491 	.word	0x0800a491
 800a4d4:	2000a18c 	.word	0x2000a18c

0800a4d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a4dc:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <tcp_timer_needed+0x30>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10f      	bne.n	800a504 <tcp_timer_needed+0x2c>
 800a4e4:	4b09      	ldr	r3, [pc, #36]	; (800a50c <tcp_timer_needed+0x34>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d103      	bne.n	800a4f4 <tcp_timer_needed+0x1c>
 800a4ec:	4b08      	ldr	r3, [pc, #32]	; (800a510 <tcp_timer_needed+0x38>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a4f4:	4b04      	ldr	r3, [pc, #16]	; (800a508 <tcp_timer_needed+0x30>)
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	4905      	ldr	r1, [pc, #20]	; (800a514 <tcp_timer_needed+0x3c>)
 800a4fe:	20fa      	movs	r0, #250	; 0xfa
 800a500:	f000 f848 	bl	800a594 <sys_timeout>
  }
}
 800a504:	bf00      	nop
 800a506:	bd80      	pop	{r7, pc}
 800a508:	2000a18c 	.word	0x2000a18c
 800a50c:	2000a140 	.word	0x2000a140
 800a510:	2000a144 	.word	0x2000a144
 800a514:	0800a491 	.word	0x0800a491

0800a518 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	4903      	ldr	r1, [pc, #12]	; (800a540 <cyclic_timer+0x28>)
 800a532:	4618      	mov	r0, r3
 800a534:	f000 f82e 	bl	800a594 <sys_timeout>
}
 800a538:	bf00      	nop
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	0800a519 	.word	0x0800a519

0800a544 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a54a:	2301      	movs	r3, #1
 800a54c:	607b      	str	r3, [r7, #4]
 800a54e:	e00e      	b.n	800a56e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a550:	4a0d      	ldr	r2, [pc, #52]	; (800a588 <sys_timeouts_init+0x44>)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	4a0a      	ldr	r2, [pc, #40]	; (800a588 <sys_timeouts_init+0x44>)
 800a55e:	4413      	add	r3, r2
 800a560:	461a      	mov	r2, r3
 800a562:	490a      	ldr	r1, [pc, #40]	; (800a58c <sys_timeouts_init+0x48>)
 800a564:	f000 f816 	bl	800a594 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3301      	adds	r3, #1
 800a56c:	607b      	str	r3, [r7, #4]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d9ed      	bls.n	800a550 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800a574:	f7f9 ff96 	bl	80044a4 <sys_now>
 800a578:	4603      	mov	r3, r0
 800a57a:	4a05      	ldr	r2, [pc, #20]	; (800a590 <sys_timeouts_init+0x4c>)
 800a57c:	6013      	str	r3, [r2, #0]
}
 800a57e:	bf00      	nop
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	08010624 	.word	0x08010624
 800a58c:	0800a519 	.word	0x0800a519
 800a590:	2000a188 	.word	0x2000a188

0800a594 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a5a0:	2006      	movs	r0, #6
 800a5a2:	f7fa fbb5 	bl	8004d10 <memp_malloc>
 800a5a6:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10a      	bne.n	800a5c4 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 8084 	bne.w	800a6be <sys_timeout+0x12a>
 800a5b6:	4b44      	ldr	r3, [pc, #272]	; (800a6c8 <sys_timeout+0x134>)
 800a5b8:	22d4      	movs	r2, #212	; 0xd4
 800a5ba:	4944      	ldr	r1, [pc, #272]	; (800a6cc <sys_timeout+0x138>)
 800a5bc:	4844      	ldr	r0, [pc, #272]	; (800a6d0 <sys_timeout+0x13c>)
 800a5be:	f003 f891 	bl	800d6e4 <iprintf>
    return;
 800a5c2:	e07c      	b.n	800a6be <sys_timeout+0x12a>
  }

  now = sys_now();
 800a5c4:	f7f9 ff6e 	bl	80044a4 <sys_now>
 800a5c8:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800a5ca:	4b42      	ldr	r3, [pc, #264]	; (800a6d4 <sys_timeout+0x140>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d105      	bne.n	800a5de <sys_timeout+0x4a>
    diff = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800a5d6:	4a40      	ldr	r2, [pc, #256]	; (800a6d8 <sys_timeout+0x144>)
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	e004      	b.n	800a5e8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800a5de:	4b3e      	ldr	r3, [pc, #248]	; (800a6d8 <sys_timeout+0x144>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	441a      	add	r2, r3
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a604:	4b33      	ldr	r3, [pc, #204]	; (800a6d4 <sys_timeout+0x140>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d103      	bne.n	800a614 <sys_timeout+0x80>
    next_timeout = timeout;
 800a60c:	4a31      	ldr	r2, [pc, #196]	; (800a6d4 <sys_timeout+0x140>)
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	6013      	str	r3, [r2, #0]
    return;
 800a612:	e055      	b.n	800a6c0 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800a614:	4b2f      	ldr	r3, [pc, #188]	; (800a6d4 <sys_timeout+0x140>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d20f      	bcs.n	800a640 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800a620:	4b2c      	ldr	r3, [pc, #176]	; (800a6d4 <sys_timeout+0x140>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6859      	ldr	r1, [r3, #4]
 800a626:	4b2b      	ldr	r3, [pc, #172]	; (800a6d4 <sys_timeout+0x140>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	1a8a      	subs	r2, r1, r2
 800a62e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800a630:	4b28      	ldr	r3, [pc, #160]	; (800a6d4 <sys_timeout+0x140>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a638:	4a26      	ldr	r2, [pc, #152]	; (800a6d4 <sys_timeout+0x140>)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	e03f      	b.n	800a6c0 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a640:	4b24      	ldr	r3, [pc, #144]	; (800a6d4 <sys_timeout+0x140>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	61fb      	str	r3, [r7, #28]
 800a646:	e036      	b.n	800a6b6 <sys_timeout+0x122>
      timeout->time -= t->time;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	1ad2      	subs	r2, r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d006      	beq.n	800a66c <sys_timeout+0xd8>
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d921      	bls.n	800a6b0 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d009      	beq.n	800a688 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6859      	ldr	r1, [r3, #4]
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	1a8a      	subs	r2, r1, r2
 800a684:	605a      	str	r2, [r3, #4]
 800a686:	e00b      	b.n	800a6a0 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d206      	bcs.n	800a6a0 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800a692:	4b10      	ldr	r3, [pc, #64]	; (800a6d4 <sys_timeout+0x140>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	441a      	add	r2, r3
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	601a      	str	r2, [r3, #0]
        break;
 800a6ae:	e007      	b.n	800a6c0 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	61fb      	str	r3, [r7, #28]
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1c5      	bne.n	800a648 <sys_timeout+0xb4>
 800a6bc:	e000      	b.n	800a6c0 <sys_timeout+0x12c>
    return;
 800a6be:	bf00      	nop
      }
    }
  }
}
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	0800fda0 	.word	0x0800fda0
 800a6cc:	0800fdd4 	.word	0x0800fdd4
 800a6d0:	0800fe14 	.word	0x0800fe14
 800a6d4:	2000a184 	.word	0x2000a184
 800a6d8:	2000a188 	.word	0x2000a188

0800a6dc <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800a6e2:	4b24      	ldr	r3, [pc, #144]	; (800a774 <sys_check_timeouts+0x98>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d040      	beq.n	800a76c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800a6ea:	f7f9 fedb 	bl	80044a4 <sys_now>
 800a6ee:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800a6f0:	4b21      	ldr	r3, [pc, #132]	; (800a778 <sys_check_timeouts+0x9c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800a6fa:	4b20      	ldr	r3, [pc, #128]	; (800a77c <sys_check_timeouts+0xa0>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <sys_check_timeouts+0x2c>
 800a704:	f7fa fce6 	bl	80050d4 <pbuf_free_ooseq>
      had_one = 0;
 800a708:	2300      	movs	r3, #0
 800a70a:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800a70c:	4b19      	ldr	r3, [pc, #100]	; (800a774 <sys_check_timeouts+0x98>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d026      	beq.n	800a766 <sys_check_timeouts+0x8a>
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d321      	bcc.n	800a766 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800a722:	2301      	movs	r3, #1
 800a724:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	685a      	ldr	r2, [r3, #4]
 800a72a:	4b13      	ldr	r3, [pc, #76]	; (800a778 <sys_check_timeouts+0x9c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4413      	add	r3, r2
 800a730:	4a11      	ldr	r2, [pc, #68]	; (800a778 <sys_check_timeouts+0x9c>)
 800a732:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a0c      	ldr	r2, [pc, #48]	; (800a774 <sys_check_timeouts+0x98>)
 800a744:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a752:	68b9      	ldr	r1, [r7, #8]
 800a754:	2006      	movs	r0, #6
 800a756:	f7fa fb27 	bl	8004da8 <memp_free>
        if (handler != NULL) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6838      	ldr	r0, [r7, #0]
 800a764:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800a766:	7cfb      	ldrb	r3, [r7, #19]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1c6      	bne.n	800a6fa <sys_check_timeouts+0x1e>
  }
}
 800a76c:	bf00      	nop
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	2000a184 	.word	0x2000a184
 800a778:	2000a188 	.word	0x2000a188
 800a77c:	2000a131 	.word	0x2000a131

0800a780 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a784:	bf00      	nop
 800a786:	46bd      	mov	sp, r7
 800a788:	bc80      	pop	{r7}
 800a78a:	4770      	bx	lr

0800a78c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a796:	4b17      	ldr	r3, [pc, #92]	; (800a7f4 <udp_new_port+0x68>)
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	b291      	uxth	r1, r2
 800a79e:	4a15      	ldr	r2, [pc, #84]	; (800a7f4 <udp_new_port+0x68>)
 800a7a0:	8011      	strh	r1, [r2, #0]
 800a7a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d103      	bne.n	800a7b2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a7aa:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <udp_new_port+0x68>)
 800a7ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a7b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7b2:	4b11      	ldr	r3, [pc, #68]	; (800a7f8 <udp_new_port+0x6c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	e011      	b.n	800a7de <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	8a5a      	ldrh	r2, [r3, #18]
 800a7be:	4b0d      	ldr	r3, [pc, #52]	; (800a7f4 <udp_new_port+0x68>)
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d108      	bne.n	800a7d8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	80fb      	strh	r3, [r7, #6]
 800a7cc:	88fb      	ldrh	r3, [r7, #6]
 800a7ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7d2:	d3e0      	bcc.n	800a796 <udp_new_port+0xa>
        return 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	e007      	b.n	800a7e8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	603b      	str	r3, [r7, #0]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1ea      	bne.n	800a7ba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800a7e4:	4b03      	ldr	r3, [pc, #12]	; (800a7f4 <udp_new_port+0x68>)
 800a7e6:	881b      	ldrh	r3, [r3, #0]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bc80      	pop	{r7}
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	20000014 	.word	0x20000014
 800a7f8:	2000a190 	.word	0x2000a190

0800a7fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	4613      	mov	r3, r2
 800a808:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d018      	beq.n	800a842 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d013      	beq.n	800a83e <udp_input_local_match+0x42>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00f      	beq.n	800a83e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a81e:	4b13      	ldr	r3, [pc, #76]	; (800a86c <udp_input_local_match+0x70>)
 800a820:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a826:	d00a      	beq.n	800a83e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	4b0f      	ldr	r3, [pc, #60]	; (800a86c <udp_input_local_match+0x70>)
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	405a      	eors	r2, r3
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	3308      	adds	r3, #8
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d110      	bne.n	800a860 <udp_input_local_match+0x64>
          return 1;
 800a83e:	2301      	movs	r3, #1
 800a840:	e00f      	b.n	800a862 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d009      	beq.n	800a85c <udp_input_local_match+0x60>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d005      	beq.n	800a85c <udp_input_local_match+0x60>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	4b05      	ldr	r3, [pc, #20]	; (800a86c <udp_input_local_match+0x70>)
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d101      	bne.n	800a860 <udp_input_local_match+0x64>
      return 1;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e000      	b.n	800a862 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	bc80      	pop	{r7}
 800a86a:	4770      	bx	lr
 800a86c:	20004a18 	.word	0x20004a18

0800a870 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a870:	b590      	push	{r4, r7, lr}
 800a872:	b08d      	sub	sp, #52	; 0x34
 800a874:	af02      	add	r7, sp, #8
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	895b      	ldrh	r3, [r3, #10]
 800a882:	2b07      	cmp	r3, #7
 800a884:	d803      	bhi.n	800a88e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7fa ffcc 	bl	8005824 <pbuf_free>
    goto end;
 800a88c:	e0c6      	b.n	800aa1c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a894:	4b63      	ldr	r3, [pc, #396]	; (800aa24 <udp_input+0x1b4>)
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	4a62      	ldr	r2, [pc, #392]	; (800aa24 <udp_input+0x1b4>)
 800a89a:	6812      	ldr	r2, [r2, #0]
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f001 fe6c 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7f9 fe85 	bl	80045be <lwip_htons>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	885b      	ldrh	r3, [r3, #2]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7f9 fe7d 	bl	80045be <lwip_htons>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8d4:	4b54      	ldr	r3, [pc, #336]	; (800aa28 <udp_input+0x1b8>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a8da:	e03b      	b.n	800a954 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	8a5b      	ldrh	r3, [r3, #18]
 800a8e0:	89fa      	ldrh	r2, [r7, #14]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d131      	bne.n	800a94a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a8e6:	7cfb      	ldrb	r3, [r7, #19]
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8ee:	f7ff ff85 	bl	800a7fc <udp_input_local_match>
 800a8f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d028      	beq.n	800a94a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	7c1b      	ldrb	r3, [r3, #16]
 800a8fc:	f003 0304 	and.w	r3, r3, #4
 800a900:	2b00      	cmp	r3, #0
 800a902:	d104      	bne.n	800a90e <udp_input+0x9e>
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a910:	8a9b      	ldrh	r3, [r3, #20]
 800a912:	8a3a      	ldrh	r2, [r7, #16]
 800a914:	429a      	cmp	r2, r3
 800a916:	d118      	bne.n	800a94a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d005      	beq.n	800a92c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	4b3f      	ldr	r3, [pc, #252]	; (800aa24 <udp_input+0x1b4>)
 800a926:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a928:	429a      	cmp	r2, r3
 800a92a:	d10e      	bne.n	800a94a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d014      	beq.n	800a95c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800a93a:	4b3b      	ldr	r3, [pc, #236]	; (800aa28 <udp_input+0x1b8>)
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800a942:	4a39      	ldr	r2, [pc, #228]	; (800aa28 <udp_input+0x1b8>)
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800a948:	e008      	b.n	800a95c <udp_input+0xec>
      }
    }

    prev = pcb;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1c0      	bne.n	800a8dc <udp_input+0x6c>
 800a95a:	e000      	b.n	800a95e <udp_input+0xee>
        break;
 800a95c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800a95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <udp_input+0xf8>
    pcb = uncon_pcb;
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <udp_input+0x104>
    for_us = 1;
 800a96e:	2301      	movs	r3, #1
 800a970:	76fb      	strb	r3, [r7, #27]
 800a972:	e00a      	b.n	800a98a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	3304      	adds	r3, #4
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	4b2a      	ldr	r3, [pc, #168]	; (800aa24 <udp_input+0x1b4>)
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	429a      	cmp	r2, r3
 800a980:	bf0c      	ite	eq
 800a982:	2301      	moveq	r3, #1
 800a984:	2300      	movne	r3, #0
 800a986:	b2db      	uxtb	r3, r3
 800a988:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800a98a:	7efb      	ldrb	r3, [r7, #27]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d042      	beq.n	800aa16 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800a990:	f06f 0107 	mvn.w	r1, #7
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7fa ff21 	bl	80057dc <pbuf_header>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00a      	beq.n	800a9b6 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800a9a0:	4b22      	ldr	r3, [pc, #136]	; (800aa2c <udp_input+0x1bc>)
 800a9a2:	f240 1255 	movw	r2, #341	; 0x155
 800a9a6:	4922      	ldr	r1, [pc, #136]	; (800aa30 <udp_input+0x1c0>)
 800a9a8:	4822      	ldr	r0, [pc, #136]	; (800aa34 <udp_input+0x1c4>)
 800a9aa:	f002 fe9b 	bl	800d6e4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7fa ff38 	bl	8005824 <pbuf_free>
      goto end;
 800a9b4:	e032      	b.n	800aa1c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d012      	beq.n	800a9e2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00a      	beq.n	800a9da <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	699c      	ldr	r4, [r3, #24]
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	69d8      	ldr	r0, [r3, #28]
 800a9cc:	8a3b      	ldrh	r3, [r7, #16]
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	4b19      	ldr	r3, [pc, #100]	; (800aa38 <udp_input+0x1c8>)
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800a9d8:	e021      	b.n	800aa1e <udp_input+0x1ae>
        pbuf_free(p);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7fa ff22 	bl	8005824 <pbuf_free>
        goto end;
 800a9e0:	e01c      	b.n	800aa1c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a9e2:	7cfb      	ldrb	r3, [r7, #19]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d112      	bne.n	800aa0e <udp_input+0x19e>
 800a9e8:	4b0e      	ldr	r3, [pc, #56]	; (800aa24 <udp_input+0x1b4>)
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9f0:	2be0      	cmp	r3, #224	; 0xe0
 800a9f2:	d00c      	beq.n	800aa0e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a9f4:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <udp_input+0x1b4>)
 800a9f6:	899b      	ldrh	r3, [r3, #12]
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	b21b      	sxth	r3, r3
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7fa fefd 	bl	8005800 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800aa06:	2103      	movs	r1, #3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f001 fab3 	bl	800bf74 <icmp_dest_unreach>
      pbuf_free(p);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7fa ff08 	bl	8005824 <pbuf_free>
  return;
 800aa14:	e003      	b.n	800aa1e <udp_input+0x1ae>
    pbuf_free(p);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7fa ff04 	bl	8005824 <pbuf_free>
  return;
 800aa1c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800aa1e:	372c      	adds	r7, #44	; 0x2c
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd90      	pop	{r4, r7, pc}
 800aa24:	20004a18 	.word	0x20004a18
 800aa28:	2000a190 	.word	0x2000a190
 800aa2c:	0800fe3c 	.word	0x0800fe3c
 800aa30:	0800fe6c 	.word	0x0800fe6c
 800aa34:	0800fe80 	.word	0x0800fe80
 800aa38:	20004a28 	.word	0x20004a28

0800aa3c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d102      	bne.n	800aa52 <udp_send+0x16>
    return ERR_VAL;
 800aa4c:	f06f 0305 	mvn.w	r3, #5
 800aa50:	e008      	b.n	800aa64 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	1d1a      	adds	r2, r3, #4
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	8a9b      	ldrh	r3, [r3, #20]
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f805 	bl	800aa6c <udp_sendto>
 800aa62:	4603      	mov	r3, r0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b088      	sub	sp, #32
 800aa70:	af02      	add	r7, sp, #8
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
 800aa78:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <udp_sendto+0x1e>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d102      	bne.n	800aa90 <udp_sendto+0x24>
    return ERR_VAL;
 800aa8a:	f06f 0305 	mvn.w	r3, #5
 800aa8e:	e013      	b.n	800aab8 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f001 faf7 	bl	800c084 <ip4_route>
 800aa96:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d102      	bne.n	800aaa4 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800aa9e:	f06f 0303 	mvn.w	r3, #3
 800aaa2:	e009      	b.n	800aab8 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800aaa4:	887a      	ldrh	r2, [r7, #2]
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 f805 	bl	800aac0 <udp_sendto_if>
 800aab6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af02      	add	r7, sp, #8
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <udp_sendto_if+0x1a>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d102      	bne.n	800aae0 <udp_sendto_if+0x20>
    return ERR_VAL;
 800aada:	f06f 0305 	mvn.w	r3, #5
 800aade:	e028      	b.n	800ab32 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d009      	beq.n	800aafa <udp_sendto_if+0x3a>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d005      	beq.n	800aafa <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aaf6:	2be0      	cmp	r3, #224	; 0xe0
 800aaf8:	d103      	bne.n	800ab02 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800aafa:	6a3b      	ldr	r3, [r7, #32]
 800aafc:	3304      	adds	r3, #4
 800aafe:	617b      	str	r3, [r7, #20]
 800ab00:	e00b      	b.n	800ab1a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	6a3b      	ldr	r3, [r7, #32]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d002      	beq.n	800ab16 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800ab10:	f06f 0303 	mvn.w	r3, #3
 800ab14:	e00d      	b.n	800ab32 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ab1a:	887a      	ldrh	r2, [r7, #2]
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4613      	mov	r3, r2
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	68b9      	ldr	r1, [r7, #8]
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 f806 	bl	800ab3c <udp_sendto_if_src>
 800ab30:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
	...

0800ab3c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08c      	sub	sp, #48	; 0x30
 800ab40:	af04      	add	r7, sp, #16
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <udp_sendto_if_src+0x1a>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d102      	bne.n	800ab5c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800ab56:	f06f 0305 	mvn.w	r3, #5
 800ab5a:	e07e      	b.n	800ac5a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8a5b      	ldrh	r3, [r3, #18]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10f      	bne.n	800ab84 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ab64:	68f9      	ldr	r1, [r7, #12]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8a5b      	ldrh	r3, [r3, #18]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 f87f 	bl	800ac70 <udp_bind>
 800ab72:	4603      	mov	r3, r0
 800ab74:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ab76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ab7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab82:	e06a      	b.n	800ac5a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800ab84:	2108      	movs	r1, #8
 800ab86:	68b8      	ldr	r0, [r7, #8]
 800ab88:	f7fa fe28 	bl	80057dc <pbuf_header>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d014      	beq.n	800abbc <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ab92:	2200      	movs	r2, #0
 800ab94:	2108      	movs	r1, #8
 800ab96:	2001      	movs	r0, #1
 800ab98:	f7fa facc 	bl	8005134 <pbuf_alloc>
 800ab9c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800aba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aba8:	e057      	b.n	800ac5a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	891b      	ldrh	r3, [r3, #8]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d006      	beq.n	800abc0 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800abb2:	68b9      	ldr	r1, [r7, #8]
 800abb4:	69f8      	ldr	r0, [r7, #28]
 800abb6:	f7fa ff57 	bl	8005a68 <pbuf_chain>
 800abba:	e001      	b.n	800abc0 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	895b      	ldrh	r3, [r3, #10]
 800abc4:	2b07      	cmp	r3, #7
 800abc6:	d806      	bhi.n	800abd6 <udp_sendto_if_src+0x9a>
 800abc8:	4b26      	ldr	r3, [pc, #152]	; (800ac64 <udp_sendto_if_src+0x128>)
 800abca:	f240 22db 	movw	r2, #731	; 0x2db
 800abce:	4926      	ldr	r1, [pc, #152]	; (800ac68 <udp_sendto_if_src+0x12c>)
 800abd0:	4826      	ldr	r0, [pc, #152]	; (800ac6c <udp_sendto_if_src+0x130>)
 800abd2:	f002 fd87 	bl	800d6e4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	8a5b      	ldrh	r3, [r3, #18]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7f9 fcec 	bl	80045be <lwip_htons>
 800abe6:	4603      	mov	r3, r0
 800abe8:	461a      	mov	r2, r3
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800abee:	887b      	ldrh	r3, [r7, #2]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7f9 fce4 	bl	80045be <lwip_htons>
 800abf6:	4603      	mov	r3, r0
 800abf8:	461a      	mov	r2, r3
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2200      	movs	r2, #0
 800ac02:	719a      	strb	r2, [r3, #6]
 800ac04:	2200      	movs	r2, #0
 800ac06:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	891b      	ldrh	r3, [r3, #8]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7f9 fcd6 	bl	80045be <lwip_htons>
 800ac12:	4603      	mov	r3, r0
 800ac14:	461a      	mov	r2, r3
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800ac1a:	2311      	movs	r3, #17
 800ac1c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	7a9b      	ldrb	r3, [r3, #10]
 800ac22:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	7a5b      	ldrb	r3, [r3, #9]
 800ac28:	7cb9      	ldrb	r1, [r7, #18]
 800ac2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac2c:	9202      	str	r2, [sp, #8]
 800ac2e:	7cfa      	ldrb	r2, [r7, #19]
 800ac30:	9201      	str	r2, [sp, #4]
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	460b      	mov	r3, r1
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac3a:	69f8      	ldr	r0, [r7, #28]
 800ac3c:	f001 fbf6 	bl	800c42c <ip4_output_if_src>
 800ac40:	4603      	mov	r3, r0
 800ac42:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ac44:	69fa      	ldr	r2, [r7, #28]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d004      	beq.n	800ac56 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800ac4c:	69f8      	ldr	r0, [r7, #28]
 800ac4e:	f7fa fde9 	bl	8005824 <pbuf_free>
    q = NULL;
 800ac52:	2300      	movs	r3, #0
 800ac54:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800ac56:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	0800fe3c 	.word	0x0800fe3c
 800ac68:	0800fea8 	.word	0x0800fea8
 800ac6c:	0800fe80 	.word	0x0800fe80

0800ac70 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ac84:	4b30      	ldr	r3, [pc, #192]	; (800ad48 <udp_bind+0xd8>)
 800ac86:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <udp_bind+0x24>
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d102      	bne.n	800ac9a <udp_bind+0x2a>
    return ERR_VAL;
 800ac94:	f06f 0305 	mvn.w	r3, #5
 800ac98:	e052      	b.n	800ad40 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ac9e:	4b2b      	ldr	r3, [pc, #172]	; (800ad4c <udp_bind+0xdc>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	617b      	str	r3, [r7, #20]
 800aca4:	e009      	b.n	800acba <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d102      	bne.n	800acb4 <udp_bind+0x44>
      rebind = 1;
 800acae:	2301      	movs	r3, #1
 800acb0:	74fb      	strb	r3, [r7, #19]
      break;
 800acb2:	e005      	b.n	800acc0 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	617b      	str	r3, [r7, #20]
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1f2      	bne.n	800aca6 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800acc0:	88fb      	ldrh	r3, [r7, #6]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <udp_bind+0x6a>
    port = udp_new_port();
 800acc6:	f7ff fd61 	bl	800a78c <udp_new_port>
 800acca:	4603      	mov	r3, r0
 800accc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800acce:	88fb      	ldrh	r3, [r7, #6]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d11e      	bne.n	800ad12 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800acd4:	f06f 0307 	mvn.w	r3, #7
 800acd8:	e032      	b.n	800ad40 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800acda:	4b1c      	ldr	r3, [pc, #112]	; (800ad4c <udp_bind+0xdc>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	617b      	str	r3, [r7, #20]
 800ace0:	e014      	b.n	800ad0c <udp_bind+0x9c>
      if (pcb != ipcb) {
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d00d      	beq.n	800ad06 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	8a5b      	ldrh	r3, [r3, #18]
 800acee:	88fa      	ldrh	r2, [r7, #6]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d108      	bne.n	800ad06 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d102      	bne.n	800ad06 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ad00:	f06f 0307 	mvn.w	r3, #7
 800ad04:	e01c      	b.n	800ad40 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	617b      	str	r3, [r7, #20]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1e7      	bne.n	800ace2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d002      	beq.n	800ad1e <udp_bind+0xae>
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	e000      	b.n	800ad20 <udp_bind+0xb0>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	88fa      	ldrh	r2, [r7, #6]
 800ad28:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ad2a:	7cfb      	ldrb	r3, [r7, #19]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d106      	bne.n	800ad3e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ad30:	4b06      	ldr	r3, [pc, #24]	; (800ad4c <udp_bind+0xdc>)
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ad38:	4a04      	ldr	r2, [pc, #16]	; (800ad4c <udp_bind+0xdc>)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	0801063c 	.word	0x0801063c
 800ad4c:	2000a190 	.word	0x2000a190

0800ad50 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <udp_connect+0x1a>
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d102      	bne.n	800ad70 <udp_connect+0x20>
    return ERR_VAL;
 800ad6a:	f06f 0305 	mvn.w	r3, #5
 800ad6e:	e03e      	b.n	800adee <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	8a5b      	ldrh	r3, [r3, #18]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10f      	bne.n	800ad98 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ad78:	68f9      	ldr	r1, [r7, #12]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	8a5b      	ldrh	r3, [r3, #18]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f7ff ff75 	bl	800ac70 <udp_bind>
 800ad86:	4603      	mov	r3, r0
 800ad88:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ad8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <udp_connect+0x48>
      return err;
 800ad92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad96:	e02a      	b.n	800adee <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d002      	beq.n	800ada4 <udp_connect+0x54>
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	e000      	b.n	800ada6 <udp_connect+0x56>
 800ada4:	2300      	movs	r3, #0
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	88fa      	ldrh	r2, [r7, #6]
 800adae:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	7c1b      	ldrb	r3, [r3, #16]
 800adb4:	f043 0304 	orr.w	r3, r3, #4
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800adbe:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <udp_connect+0xa8>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	617b      	str	r3, [r7, #20]
 800adc4:	e008      	b.n	800add8 <udp_connect+0x88>
    if (pcb == ipcb) {
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d101      	bne.n	800add2 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	e00d      	b.n	800adee <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	617b      	str	r3, [r7, #20]
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1f3      	bne.n	800adc6 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800adde:	4b06      	ldr	r3, [pc, #24]	; (800adf8 <udp_connect+0xa8>)
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800ade6:	4a04      	ldr	r2, [pc, #16]	; (800adf8 <udp_connect+0xa8>)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	2000a190 	.word	0x2000a190

0800adfc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	7c1b      	ldrb	r3, [r3, #16]
 800ae14:	f023 0304 	bic.w	r3, r3, #4
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	741a      	strb	r2, [r3, #16]
}
 800ae1e:	bf00      	nop
 800ae20:	370c      	adds	r7, #12
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bc80      	pop	{r7}
 800ae26:	4770      	bx	lr

0800ae28 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	61da      	str	r2, [r3, #28]
}
 800ae40:	bf00      	nop
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bc80      	pop	{r7}
 800ae48:	4770      	bx	lr
	...

0800ae4c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ae54:	4b15      	ldr	r3, [pc, #84]	; (800aeac <udp_remove+0x60>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d105      	bne.n	800ae6a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ae5e:	4b13      	ldr	r3, [pc, #76]	; (800aeac <udp_remove+0x60>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	4a11      	ldr	r2, [pc, #68]	; (800aeac <udp_remove+0x60>)
 800ae66:	6013      	str	r3, [r2, #0]
 800ae68:	e017      	b.n	800ae9a <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ae6a:	4b10      	ldr	r3, [pc, #64]	; (800aeac <udp_remove+0x60>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	e010      	b.n	800ae94 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d009      	beq.n	800ae8e <udp_remove+0x42>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d104      	bne.n	800ae8e <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68da      	ldr	r2, [r3, #12]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	60da      	str	r2, [r3, #12]
        break;
 800ae8c:	e005      	b.n	800ae9a <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1eb      	bne.n	800ae72 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	f7f9 ff83 	bl	8004da8 <memp_free>
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	2000a190 	.word	0x2000a190

0800aeb0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	f7f9 ff2a 	bl	8004d10 <memp_malloc>
 800aebc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d007      	beq.n	800aed4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800aec4:	2220      	movs	r2, #32
 800aec6:	2100      	movs	r1, #0
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f002 fb27 	bl	800d51c <memset>
    pcb->ttl = UDP_TTL;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	22ff      	movs	r2, #255	; 0xff
 800aed2:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800aed4:	687b      	ldr	r3, [r7, #4]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
	...

0800aee0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d01e      	beq.n	800af2e <udp_netif_ip_addr_changed+0x4e>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d01a      	beq.n	800af2e <udp_netif_ip_addr_changed+0x4e>
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d017      	beq.n	800af2e <udp_netif_ip_addr_changed+0x4e>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d013      	beq.n	800af2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800af06:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <udp_netif_ip_addr_changed+0x58>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	e00c      	b.n	800af28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d103      	bne.n	800af22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1ef      	bne.n	800af0e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800af2e:	bf00      	nop
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	bc80      	pop	{r7}
 800af36:	4770      	bx	lr
 800af38:	2000a190 	.word	0x2000a190

0800af3c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800af44:	4915      	ldr	r1, [pc, #84]	; (800af9c <etharp_free_entry+0x60>)
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	4613      	mov	r3, r2
 800af4a:	005b      	lsls	r3, r3, #1
 800af4c:	4413      	add	r3, r2
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	440b      	add	r3, r1
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d013      	beq.n	800af80 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800af58:	4910      	ldr	r1, [pc, #64]	; (800af9c <etharp_free_entry+0x60>)
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	4613      	mov	r3, r2
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	4413      	add	r3, r2
 800af62:	00db      	lsls	r3, r3, #3
 800af64:	440b      	add	r3, r1
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fa fc5b 	bl	8005824 <pbuf_free>
    arp_table[i].q = NULL;
 800af6e:	490b      	ldr	r1, [pc, #44]	; (800af9c <etharp_free_entry+0x60>)
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	4613      	mov	r3, r2
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	4413      	add	r3, r2
 800af78:	00db      	lsls	r3, r3, #3
 800af7a:	440b      	add	r3, r1
 800af7c:	2200      	movs	r2, #0
 800af7e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800af80:	4906      	ldr	r1, [pc, #24]	; (800af9c <etharp_free_entry+0x60>)
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	4613      	mov	r3, r2
 800af86:	005b      	lsls	r3, r3, #1
 800af88:	4413      	add	r3, r2
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	440b      	add	r3, r1
 800af8e:	3314      	adds	r3, #20
 800af90:	2200      	movs	r2, #0
 800af92:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	2000a194 	.word	0x2000a194

0800afa0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800afa6:	2300      	movs	r3, #0
 800afa8:	71fb      	strb	r3, [r7, #7]
 800afaa:	e096      	b.n	800b0da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800afac:	79fa      	ldrb	r2, [r7, #7]
 800afae:	494f      	ldr	r1, [pc, #316]	; (800b0ec <etharp_tmr+0x14c>)
 800afb0:	4613      	mov	r3, r2
 800afb2:	005b      	lsls	r3, r3, #1
 800afb4:	4413      	add	r3, r2
 800afb6:	00db      	lsls	r3, r3, #3
 800afb8:	440b      	add	r3, r1
 800afba:	3314      	adds	r3, #20
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800afc0:	79bb      	ldrb	r3, [r7, #6]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 8086 	beq.w	800b0d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800afc8:	79fa      	ldrb	r2, [r7, #7]
 800afca:	4948      	ldr	r1, [pc, #288]	; (800b0ec <etharp_tmr+0x14c>)
 800afcc:	4613      	mov	r3, r2
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	4413      	add	r3, r2
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	440b      	add	r3, r1
 800afd6:	3312      	adds	r3, #18
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	3301      	adds	r3, #1
 800afdc:	b298      	uxth	r0, r3
 800afde:	4943      	ldr	r1, [pc, #268]	; (800b0ec <etharp_tmr+0x14c>)
 800afe0:	4613      	mov	r3, r2
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	4413      	add	r3, r2
 800afe6:	00db      	lsls	r3, r3, #3
 800afe8:	440b      	add	r3, r1
 800afea:	3312      	adds	r3, #18
 800afec:	4602      	mov	r2, r0
 800afee:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800aff0:	79fa      	ldrb	r2, [r7, #7]
 800aff2:	493e      	ldr	r1, [pc, #248]	; (800b0ec <etharp_tmr+0x14c>)
 800aff4:	4613      	mov	r3, r2
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	4413      	add	r3, r2
 800affa:	00db      	lsls	r3, r3, #3
 800affc:	440b      	add	r3, r1
 800affe:	3312      	adds	r3, #18
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b006:	d215      	bcs.n	800b034 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b008:	79fa      	ldrb	r2, [r7, #7]
 800b00a:	4938      	ldr	r1, [pc, #224]	; (800b0ec <etharp_tmr+0x14c>)
 800b00c:	4613      	mov	r3, r2
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	4413      	add	r3, r2
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	440b      	add	r3, r1
 800b016:	3314      	adds	r3, #20
 800b018:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d10f      	bne.n	800b03e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b01e:	79fa      	ldrb	r2, [r7, #7]
 800b020:	4932      	ldr	r1, [pc, #200]	; (800b0ec <etharp_tmr+0x14c>)
 800b022:	4613      	mov	r3, r2
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	4413      	add	r3, r2
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	440b      	add	r3, r1
 800b02c:	3312      	adds	r3, #18
 800b02e:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b030:	2b04      	cmp	r3, #4
 800b032:	d904      	bls.n	800b03e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b034:	79fb      	ldrb	r3, [r7, #7]
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff ff80 	bl	800af3c <etharp_free_entry>
 800b03c:	e04a      	b.n	800b0d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b03e:	79fa      	ldrb	r2, [r7, #7]
 800b040:	492a      	ldr	r1, [pc, #168]	; (800b0ec <etharp_tmr+0x14c>)
 800b042:	4613      	mov	r3, r2
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	4413      	add	r3, r2
 800b048:	00db      	lsls	r3, r3, #3
 800b04a:	440b      	add	r3, r1
 800b04c:	3314      	adds	r3, #20
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b03      	cmp	r3, #3
 800b052:	d10a      	bne.n	800b06a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b054:	79fa      	ldrb	r2, [r7, #7]
 800b056:	4925      	ldr	r1, [pc, #148]	; (800b0ec <etharp_tmr+0x14c>)
 800b058:	4613      	mov	r3, r2
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	4413      	add	r3, r2
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	440b      	add	r3, r1
 800b062:	3314      	adds	r3, #20
 800b064:	2204      	movs	r2, #4
 800b066:	701a      	strb	r2, [r3, #0]
 800b068:	e034      	b.n	800b0d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b06a:	79fa      	ldrb	r2, [r7, #7]
 800b06c:	491f      	ldr	r1, [pc, #124]	; (800b0ec <etharp_tmr+0x14c>)
 800b06e:	4613      	mov	r3, r2
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	4413      	add	r3, r2
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	440b      	add	r3, r1
 800b078:	3314      	adds	r3, #20
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b04      	cmp	r3, #4
 800b07e:	d10a      	bne.n	800b096 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b080:	79fa      	ldrb	r2, [r7, #7]
 800b082:	491a      	ldr	r1, [pc, #104]	; (800b0ec <etharp_tmr+0x14c>)
 800b084:	4613      	mov	r3, r2
 800b086:	005b      	lsls	r3, r3, #1
 800b088:	4413      	add	r3, r2
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	440b      	add	r3, r1
 800b08e:	3314      	adds	r3, #20
 800b090:	2202      	movs	r2, #2
 800b092:	701a      	strb	r2, [r3, #0]
 800b094:	e01e      	b.n	800b0d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b096:	79fa      	ldrb	r2, [r7, #7]
 800b098:	4914      	ldr	r1, [pc, #80]	; (800b0ec <etharp_tmr+0x14c>)
 800b09a:	4613      	mov	r3, r2
 800b09c:	005b      	lsls	r3, r3, #1
 800b09e:	4413      	add	r3, r2
 800b0a0:	00db      	lsls	r3, r3, #3
 800b0a2:	440b      	add	r3, r1
 800b0a4:	3314      	adds	r3, #20
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d113      	bne.n	800b0d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b0ac:	79fa      	ldrb	r2, [r7, #7]
 800b0ae:	490f      	ldr	r1, [pc, #60]	; (800b0ec <etharp_tmr+0x14c>)
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	4413      	add	r3, r2
 800b0b6:	00db      	lsls	r3, r3, #3
 800b0b8:	440b      	add	r3, r1
 800b0ba:	3308      	adds	r3, #8
 800b0bc:	6818      	ldr	r0, [r3, #0]
 800b0be:	79fa      	ldrb	r2, [r7, #7]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	005b      	lsls	r3, r3, #1
 800b0c4:	4413      	add	r3, r2
 800b0c6:	00db      	lsls	r3, r3, #3
 800b0c8:	4a08      	ldr	r2, [pc, #32]	; (800b0ec <etharp_tmr+0x14c>)
 800b0ca:	4413      	add	r3, r2
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	f000 fe38 	bl	800bd44 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b0d4:	79fb      	ldrb	r3, [r7, #7]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	71fb      	strb	r3, [r7, #7]
 800b0da:	79fb      	ldrb	r3, [r7, #7]
 800b0dc:	2b09      	cmp	r3, #9
 800b0de:	f67f af65 	bls.w	800afac <etharp_tmr+0xc>
      }
    }
  }
}
 800b0e2:	bf00      	nop
 800b0e4:	bf00      	nop
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	2000a194 	.word	0x2000a194

0800b0f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b0fe:	230a      	movs	r3, #10
 800b100:	77fb      	strb	r3, [r7, #31]
 800b102:	230a      	movs	r3, #10
 800b104:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800b106:	230a      	movs	r3, #10
 800b108:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800b10e:	230a      	movs	r3, #10
 800b110:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	833b      	strh	r3, [r7, #24]
 800b116:	2300      	movs	r3, #0
 800b118:	82fb      	strh	r3, [r7, #22]
 800b11a:	2300      	movs	r3, #0
 800b11c:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b11e:	2300      	movs	r3, #0
 800b120:	773b      	strb	r3, [r7, #28]
 800b122:	e093      	b.n	800b24c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800b124:	7f3a      	ldrb	r2, [r7, #28]
 800b126:	4990      	ldr	r1, [pc, #576]	; (800b368 <etharp_find_entry+0x278>)
 800b128:	4613      	mov	r3, r2
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	4413      	add	r3, r2
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	440b      	add	r3, r1
 800b132:	3314      	adds	r3, #20
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b138:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b13c:	2b0a      	cmp	r3, #10
 800b13e:	d105      	bne.n	800b14c <etharp_find_entry+0x5c>
 800b140:	7cfb      	ldrb	r3, [r7, #19]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d102      	bne.n	800b14c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800b146:	7f3b      	ldrb	r3, [r7, #28]
 800b148:	777b      	strb	r3, [r7, #29]
 800b14a:	e07c      	b.n	800b246 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b14c:	7cfb      	ldrb	r3, [r7, #19]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d079      	beq.n	800b246 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b152:	7cfb      	ldrb	r3, [r7, #19]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d009      	beq.n	800b16c <etharp_find_entry+0x7c>
 800b158:	7cfb      	ldrb	r3, [r7, #19]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d806      	bhi.n	800b16c <etharp_find_entry+0x7c>
 800b15e:	4b83      	ldr	r3, [pc, #524]	; (800b36c <etharp_find_entry+0x27c>)
 800b160:	f240 1225 	movw	r2, #293	; 0x125
 800b164:	4982      	ldr	r1, [pc, #520]	; (800b370 <etharp_find_entry+0x280>)
 800b166:	4883      	ldr	r0, [pc, #524]	; (800b374 <etharp_find_entry+0x284>)
 800b168:	f002 fabc 	bl	800d6e4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00f      	beq.n	800b192 <etharp_find_entry+0xa2>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6819      	ldr	r1, [r3, #0]
 800b176:	7f3a      	ldrb	r2, [r7, #28]
 800b178:	487b      	ldr	r0, [pc, #492]	; (800b368 <etharp_find_entry+0x278>)
 800b17a:	4613      	mov	r3, r2
 800b17c:	005b      	lsls	r3, r3, #1
 800b17e:	4413      	add	r3, r2
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	4403      	add	r3, r0
 800b184:	3304      	adds	r3, #4
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4299      	cmp	r1, r3
 800b18a:	d102      	bne.n	800b192 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b18c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b190:	e0e5      	b.n	800b35e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b192:	7cfb      	ldrb	r3, [r7, #19]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d13b      	bne.n	800b210 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b198:	7f3a      	ldrb	r2, [r7, #28]
 800b19a:	4973      	ldr	r1, [pc, #460]	; (800b368 <etharp_find_entry+0x278>)
 800b19c:	4613      	mov	r3, r2
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	4413      	add	r3, r2
 800b1a2:	00db      	lsls	r3, r3, #3
 800b1a4:	440b      	add	r3, r1
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d018      	beq.n	800b1de <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800b1ac:	7f3a      	ldrb	r2, [r7, #28]
 800b1ae:	496e      	ldr	r1, [pc, #440]	; (800b368 <etharp_find_entry+0x278>)
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	005b      	lsls	r3, r3, #1
 800b1b4:	4413      	add	r3, r2
 800b1b6:	00db      	lsls	r3, r3, #3
 800b1b8:	440b      	add	r3, r1
 800b1ba:	3312      	adds	r3, #18
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	8b3a      	ldrh	r2, [r7, #24]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d840      	bhi.n	800b246 <etharp_find_entry+0x156>
            old_queue = i;
 800b1c4:	7f3b      	ldrb	r3, [r7, #28]
 800b1c6:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800b1c8:	7f3a      	ldrb	r2, [r7, #28]
 800b1ca:	4967      	ldr	r1, [pc, #412]	; (800b368 <etharp_find_entry+0x278>)
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	005b      	lsls	r3, r3, #1
 800b1d0:	4413      	add	r3, r2
 800b1d2:	00db      	lsls	r3, r3, #3
 800b1d4:	440b      	add	r3, r1
 800b1d6:	3312      	adds	r3, #18
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	833b      	strh	r3, [r7, #24]
 800b1dc:	e033      	b.n	800b246 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b1de:	7f3a      	ldrb	r2, [r7, #28]
 800b1e0:	4961      	ldr	r1, [pc, #388]	; (800b368 <etharp_find_entry+0x278>)
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	005b      	lsls	r3, r3, #1
 800b1e6:	4413      	add	r3, r2
 800b1e8:	00db      	lsls	r3, r3, #3
 800b1ea:	440b      	add	r3, r1
 800b1ec:	3312      	adds	r3, #18
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	8afa      	ldrh	r2, [r7, #22]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d827      	bhi.n	800b246 <etharp_find_entry+0x156>
            old_pending = i;
 800b1f6:	7f3b      	ldrb	r3, [r7, #28]
 800b1f8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800b1fa:	7f3a      	ldrb	r2, [r7, #28]
 800b1fc:	495a      	ldr	r1, [pc, #360]	; (800b368 <etharp_find_entry+0x278>)
 800b1fe:	4613      	mov	r3, r2
 800b200:	005b      	lsls	r3, r3, #1
 800b202:	4413      	add	r3, r2
 800b204:	00db      	lsls	r3, r3, #3
 800b206:	440b      	add	r3, r1
 800b208:	3312      	adds	r3, #18
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	82fb      	strh	r3, [r7, #22]
 800b20e:	e01a      	b.n	800b246 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b210:	7cfb      	ldrb	r3, [r7, #19]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d917      	bls.n	800b246 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b216:	7f3a      	ldrb	r2, [r7, #28]
 800b218:	4953      	ldr	r1, [pc, #332]	; (800b368 <etharp_find_entry+0x278>)
 800b21a:	4613      	mov	r3, r2
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	4413      	add	r3, r2
 800b220:	00db      	lsls	r3, r3, #3
 800b222:	440b      	add	r3, r1
 800b224:	3312      	adds	r3, #18
 800b226:	881b      	ldrh	r3, [r3, #0]
 800b228:	8aba      	ldrh	r2, [r7, #20]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d80b      	bhi.n	800b246 <etharp_find_entry+0x156>
            old_stable = i;
 800b22e:	7f3b      	ldrb	r3, [r7, #28]
 800b230:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800b232:	7f3a      	ldrb	r2, [r7, #28]
 800b234:	494c      	ldr	r1, [pc, #304]	; (800b368 <etharp_find_entry+0x278>)
 800b236:	4613      	mov	r3, r2
 800b238:	005b      	lsls	r3, r3, #1
 800b23a:	4413      	add	r3, r2
 800b23c:	00db      	lsls	r3, r3, #3
 800b23e:	440b      	add	r3, r1
 800b240:	3312      	adds	r3, #18
 800b242:	881b      	ldrh	r3, [r3, #0]
 800b244:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b246:	7f3b      	ldrb	r3, [r7, #28]
 800b248:	3301      	adds	r3, #1
 800b24a:	773b      	strb	r3, [r7, #28]
 800b24c:	7f3b      	ldrb	r3, [r7, #28]
 800b24e:	2b09      	cmp	r3, #9
 800b250:	f67f af68 	bls.w	800b124 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b254:	7afb      	ldrb	r3, [r7, #11]
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d108      	bne.n	800b270 <etharp_find_entry+0x180>
 800b25e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b262:	2b0a      	cmp	r3, #10
 800b264:	d107      	bne.n	800b276 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b266:	7afb      	ldrb	r3, [r7, #11]
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d102      	bne.n	800b276 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800b270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b274:	e073      	b.n	800b35e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b276:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b27a:	2b09      	cmp	r3, #9
 800b27c:	dc02      	bgt.n	800b284 <etharp_find_entry+0x194>
    i = empty;
 800b27e:	7f7b      	ldrb	r3, [r7, #29]
 800b280:	773b      	strb	r3, [r7, #28]
 800b282:	e036      	b.n	800b2f2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b284:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b288:	2b09      	cmp	r3, #9
 800b28a:	dc13      	bgt.n	800b2b4 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800b28c:	7fbb      	ldrb	r3, [r7, #30]
 800b28e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b290:	7f3a      	ldrb	r2, [r7, #28]
 800b292:	4935      	ldr	r1, [pc, #212]	; (800b368 <etharp_find_entry+0x278>)
 800b294:	4613      	mov	r3, r2
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	4413      	add	r3, r2
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	440b      	add	r3, r1
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d018      	beq.n	800b2d6 <etharp_find_entry+0x1e6>
 800b2a4:	4b31      	ldr	r3, [pc, #196]	; (800b36c <etharp_find_entry+0x27c>)
 800b2a6:	f240 126f 	movw	r2, #367	; 0x16f
 800b2aa:	4933      	ldr	r1, [pc, #204]	; (800b378 <etharp_find_entry+0x288>)
 800b2ac:	4831      	ldr	r0, [pc, #196]	; (800b374 <etharp_find_entry+0x284>)
 800b2ae:	f002 fa19 	bl	800d6e4 <iprintf>
 800b2b2:	e010      	b.n	800b2d6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b2b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b2b8:	2b09      	cmp	r3, #9
 800b2ba:	dc02      	bgt.n	800b2c2 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800b2bc:	7ffb      	ldrb	r3, [r7, #31]
 800b2be:	773b      	strb	r3, [r7, #28]
 800b2c0:	e009      	b.n	800b2d6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b2c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b2c6:	2b09      	cmp	r3, #9
 800b2c8:	dc02      	bgt.n	800b2d0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b2ca:	7efb      	ldrb	r3, [r7, #27]
 800b2cc:	773b      	strb	r3, [r7, #28]
 800b2ce:	e002      	b.n	800b2d6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800b2d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2d4:	e043      	b.n	800b35e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b2d6:	7f3b      	ldrb	r3, [r7, #28]
 800b2d8:	2b09      	cmp	r3, #9
 800b2da:	d906      	bls.n	800b2ea <etharp_find_entry+0x1fa>
 800b2dc:	4b23      	ldr	r3, [pc, #140]	; (800b36c <etharp_find_entry+0x27c>)
 800b2de:	f240 1281 	movw	r2, #385	; 0x181
 800b2e2:	4926      	ldr	r1, [pc, #152]	; (800b37c <etharp_find_entry+0x28c>)
 800b2e4:	4823      	ldr	r0, [pc, #140]	; (800b374 <etharp_find_entry+0x284>)
 800b2e6:	f002 f9fd 	bl	800d6e4 <iprintf>
    etharp_free_entry(i);
 800b2ea:	7f3b      	ldrb	r3, [r7, #28]
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff fe25 	bl	800af3c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b2f2:	7f3b      	ldrb	r3, [r7, #28]
 800b2f4:	2b09      	cmp	r3, #9
 800b2f6:	d906      	bls.n	800b306 <etharp_find_entry+0x216>
 800b2f8:	4b1c      	ldr	r3, [pc, #112]	; (800b36c <etharp_find_entry+0x27c>)
 800b2fa:	f240 1285 	movw	r2, #389	; 0x185
 800b2fe:	491f      	ldr	r1, [pc, #124]	; (800b37c <etharp_find_entry+0x28c>)
 800b300:	481c      	ldr	r0, [pc, #112]	; (800b374 <etharp_find_entry+0x284>)
 800b302:	f002 f9ef 	bl	800d6e4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b306:	7f3a      	ldrb	r2, [r7, #28]
 800b308:	4917      	ldr	r1, [pc, #92]	; (800b368 <etharp_find_entry+0x278>)
 800b30a:	4613      	mov	r3, r2
 800b30c:	005b      	lsls	r3, r3, #1
 800b30e:	4413      	add	r3, r2
 800b310:	00db      	lsls	r3, r3, #3
 800b312:	440b      	add	r3, r1
 800b314:	3314      	adds	r3, #20
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d006      	beq.n	800b32a <etharp_find_entry+0x23a>
 800b31c:	4b13      	ldr	r3, [pc, #76]	; (800b36c <etharp_find_entry+0x27c>)
 800b31e:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800b322:	4917      	ldr	r1, [pc, #92]	; (800b380 <etharp_find_entry+0x290>)
 800b324:	4813      	ldr	r0, [pc, #76]	; (800b374 <etharp_find_entry+0x284>)
 800b326:	f002 f9dd 	bl	800d6e4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00a      	beq.n	800b346 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b330:	7f3a      	ldrb	r2, [r7, #28]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6819      	ldr	r1, [r3, #0]
 800b336:	480c      	ldr	r0, [pc, #48]	; (800b368 <etharp_find_entry+0x278>)
 800b338:	4613      	mov	r3, r2
 800b33a:	005b      	lsls	r3, r3, #1
 800b33c:	4413      	add	r3, r2
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	4403      	add	r3, r0
 800b342:	3304      	adds	r3, #4
 800b344:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b346:	7f3a      	ldrb	r2, [r7, #28]
 800b348:	4907      	ldr	r1, [pc, #28]	; (800b368 <etharp_find_entry+0x278>)
 800b34a:	4613      	mov	r3, r2
 800b34c:	005b      	lsls	r3, r3, #1
 800b34e:	4413      	add	r3, r2
 800b350:	00db      	lsls	r3, r3, #3
 800b352:	440b      	add	r3, r1
 800b354:	3312      	adds	r3, #18
 800b356:	2200      	movs	r2, #0
 800b358:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800b35a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3720      	adds	r7, #32
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	2000a194 	.word	0x2000a194
 800b36c:	0800fed8 	.word	0x0800fed8
 800b370:	0800ff10 	.word	0x0800ff10
 800b374:	0800ff50 	.word	0x0800ff50
 800b378:	0800ff78 	.word	0x0800ff78
 800b37c:	0800ff90 	.word	0x0800ff90
 800b380:	0800ffa4 	.word	0x0800ffa4

0800b384 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af02      	add	r7, sp, #8
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
 800b390:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b398:	2b06      	cmp	r3, #6
 800b39a:	d006      	beq.n	800b3aa <etharp_update_arp_entry+0x26>
 800b39c:	4b48      	ldr	r3, [pc, #288]	; (800b4c0 <etharp_update_arp_entry+0x13c>)
 800b39e:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b3a2:	4948      	ldr	r1, [pc, #288]	; (800b4c4 <etharp_update_arp_entry+0x140>)
 800b3a4:	4848      	ldr	r0, [pc, #288]	; (800b4c8 <etharp_update_arp_entry+0x144>)
 800b3a6:	f002 f99d 	bl	800d6e4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d012      	beq.n	800b3d6 <etharp_update_arp_entry+0x52>
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00e      	beq.n	800b3d6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68f9      	ldr	r1, [r7, #12]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f001 f8dc 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800b3c4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d105      	bne.n	800b3d6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b3d2:	2be0      	cmp	r3, #224	; 0xe0
 800b3d4:	d102      	bne.n	800b3dc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b3d6:	f06f 030f 	mvn.w	r3, #15
 800b3da:	e06c      	b.n	800b4b6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b3dc:	78fb      	ldrb	r3, [r7, #3]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	68b8      	ldr	r0, [r7, #8]
 800b3e4:	f7ff fe84 	bl	800b0f0 <etharp_find_entry>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b3ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	da02      	bge.n	800b3fa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b3f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3f8:	e05d      	b.n	800b4b6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b3fa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b3fe:	4933      	ldr	r1, [pc, #204]	; (800b4cc <etharp_update_arp_entry+0x148>)
 800b400:	4613      	mov	r3, r2
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	4413      	add	r3, r2
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	440b      	add	r3, r1
 800b40a:	3314      	adds	r3, #20
 800b40c:	2202      	movs	r2, #2
 800b40e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b410:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b414:	492d      	ldr	r1, [pc, #180]	; (800b4cc <etharp_update_arp_entry+0x148>)
 800b416:	4613      	mov	r3, r2
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	4413      	add	r3, r2
 800b41c:	00db      	lsls	r3, r3, #3
 800b41e:	440b      	add	r3, r1
 800b420:	3308      	adds	r3, #8
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800b426:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b42a:	4613      	mov	r3, r2
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	4413      	add	r3, r2
 800b430:	00db      	lsls	r3, r3, #3
 800b432:	3308      	adds	r3, #8
 800b434:	4a25      	ldr	r2, [pc, #148]	; (800b4cc <etharp_update_arp_entry+0x148>)
 800b436:	4413      	add	r3, r2
 800b438:	3304      	adds	r3, #4
 800b43a:	2206      	movs	r2, #6
 800b43c:	6879      	ldr	r1, [r7, #4]
 800b43e:	4618      	mov	r0, r3
 800b440:	f002 f85e 	bl	800d500 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b444:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b448:	4920      	ldr	r1, [pc, #128]	; (800b4cc <etharp_update_arp_entry+0x148>)
 800b44a:	4613      	mov	r3, r2
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	4413      	add	r3, r2
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	440b      	add	r3, r1
 800b454:	3312      	adds	r3, #18
 800b456:	2200      	movs	r2, #0
 800b458:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b45a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b45e:	491b      	ldr	r1, [pc, #108]	; (800b4cc <etharp_update_arp_entry+0x148>)
 800b460:	4613      	mov	r3, r2
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	4413      	add	r3, r2
 800b466:	00db      	lsls	r3, r3, #3
 800b468:	440b      	add	r3, r1
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d021      	beq.n	800b4b4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b470:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b474:	4915      	ldr	r1, [pc, #84]	; (800b4cc <etharp_update_arp_entry+0x148>)
 800b476:	4613      	mov	r3, r2
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	4413      	add	r3, r2
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	440b      	add	r3, r1
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b484:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b488:	4910      	ldr	r1, [pc, #64]	; (800b4cc <etharp_update_arp_entry+0x148>)
 800b48a:	4613      	mov	r3, r2
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	4413      	add	r3, r2
 800b490:	00db      	lsls	r3, r3, #3
 800b492:	440b      	add	r3, r1
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800b49e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6939      	ldr	r1, [r7, #16]
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f001 ff9d 	bl	800d3e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b4ae:	6938      	ldr	r0, [r7, #16]
 800b4b0:	f7fa f9b8 	bl	8005824 <pbuf_free>
  }
  return ERR_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3718      	adds	r7, #24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	0800fed8 	.word	0x0800fed8
 800b4c4:	0800ffd0 	.word	0x0800ffd0
 800b4c8:	0800ff50 	.word	0x0800ff50
 800b4cc:	2000a194 	.word	0x2000a194

0800b4d0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]
 800b4dc:	e01f      	b.n	800b51e <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800b4de:	7bfa      	ldrb	r2, [r7, #15]
 800b4e0:	4913      	ldr	r1, [pc, #76]	; (800b530 <etharp_cleanup_netif+0x60>)
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	005b      	lsls	r3, r3, #1
 800b4e6:	4413      	add	r3, r2
 800b4e8:	00db      	lsls	r3, r3, #3
 800b4ea:	440b      	add	r3, r1
 800b4ec:	3314      	adds	r3, #20
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b4f2:	7bbb      	ldrb	r3, [r7, #14]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00f      	beq.n	800b518 <etharp_cleanup_netif+0x48>
 800b4f8:	7bfa      	ldrb	r2, [r7, #15]
 800b4fa:	490d      	ldr	r1, [pc, #52]	; (800b530 <etharp_cleanup_netif+0x60>)
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	005b      	lsls	r3, r3, #1
 800b500:	4413      	add	r3, r2
 800b502:	00db      	lsls	r3, r3, #3
 800b504:	440b      	add	r3, r1
 800b506:	3308      	adds	r3, #8
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d103      	bne.n	800b518 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	4618      	mov	r0, r3
 800b514:	f7ff fd12 	bl	800af3c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b518:	7bfb      	ldrb	r3, [r7, #15]
 800b51a:	3301      	adds	r3, #1
 800b51c:	73fb      	strb	r3, [r7, #15]
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	2b09      	cmp	r3, #9
 800b522:	d9dc      	bls.n	800b4de <etharp_cleanup_netif+0xe>
    }
  }
}
 800b524:	bf00      	nop
 800b526:	bf00      	nop
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	2000a194 	.word	0x2000a194

0800b534 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b534:	b5b0      	push	{r4, r5, r7, lr}
 800b536:	b08a      	sub	sp, #40	; 0x28
 800b538:	af04      	add	r7, sp, #16
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d107      	bne.n	800b554 <etharp_input+0x20>
 800b544:	4b3d      	ldr	r3, [pc, #244]	; (800b63c <etharp_input+0x108>)
 800b546:	f44f 7222 	mov.w	r2, #648	; 0x288
 800b54a:	493d      	ldr	r1, [pc, #244]	; (800b640 <etharp_input+0x10c>)
 800b54c:	483d      	ldr	r0, [pc, #244]	; (800b644 <etharp_input+0x110>)
 800b54e:	f002 f8c9 	bl	800d6e4 <iprintf>
 800b552:	e06f      	b.n	800b634 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	881b      	ldrh	r3, [r3, #0]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b564:	d10c      	bne.n	800b580 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b56a:	2b06      	cmp	r3, #6
 800b56c:	d108      	bne.n	800b580 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b572:	2b04      	cmp	r3, #4
 800b574:	d104      	bne.n	800b580 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	885b      	ldrh	r3, [r3, #2]
 800b57a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b57c:	2b08      	cmp	r3, #8
 800b57e:	d003      	beq.n	800b588 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7fa f94f 	bl	8005824 <pbuf_free>
    return;
 800b586:	e055      	b.n	800b634 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	330e      	adds	r3, #14
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	3318      	adds	r3, #24
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	3304      	adds	r3, #4
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d102      	bne.n	800b5a8 <etharp_input+0x74>
    for_us = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	75fb      	strb	r3, [r7, #23]
 800b5a6:	e009      	b.n	800b5bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	bf0c      	ite	eq
 800b5b4:	2301      	moveq	r3, #1
 800b5b6:	2300      	movne	r3, #0
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f103 0208 	add.w	r2, r3, #8
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <etharp_input+0x98>
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e000      	b.n	800b5ce <etharp_input+0x9a>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	f107 010c 	add.w	r1, r7, #12
 800b5d2:	6838      	ldr	r0, [r7, #0]
 800b5d4:	f7ff fed6 	bl	800b384 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	88db      	ldrh	r3, [r3, #6]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5e2:	d003      	beq.n	800b5ec <etharp_input+0xb8>
 800b5e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e8:	d01e      	beq.n	800b628 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800b5ea:	e020      	b.n	800b62e <etharp_input+0xfa>
    if (for_us) {
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d01c      	beq.n	800b62c <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	3208      	adds	r2, #8
      etharp_raw(netif,
 800b60c:	2102      	movs	r1, #2
 800b60e:	9103      	str	r1, [sp, #12]
 800b610:	f107 010c 	add.w	r1, r7, #12
 800b614:	9102      	str	r1, [sp, #8]
 800b616:	9201      	str	r2, [sp, #4]
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	462b      	mov	r3, r5
 800b61c:	4622      	mov	r2, r4
 800b61e:	4601      	mov	r1, r0
 800b620:	6838      	ldr	r0, [r7, #0]
 800b622:	f000 fae1 	bl	800bbe8 <etharp_raw>
    break;
 800b626:	e001      	b.n	800b62c <etharp_input+0xf8>
    break;
 800b628:	bf00      	nop
 800b62a:	e000      	b.n	800b62e <etharp_input+0xfa>
    break;
 800b62c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7fa f8f8 	bl	8005824 <pbuf_free>
}
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bdb0      	pop	{r4, r5, r7, pc}
 800b63a:	bf00      	nop
 800b63c:	0800fed8 	.word	0x0800fed8
 800b640:	08010028 	.word	0x08010028
 800b644:	0800ff50 	.word	0x0800ff50

0800b648 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af02      	add	r7, sp, #8
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	4613      	mov	r3, r2
 800b654:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b656:	79fa      	ldrb	r2, [r7, #7]
 800b658:	4944      	ldr	r1, [pc, #272]	; (800b76c <etharp_output_to_arp_index+0x124>)
 800b65a:	4613      	mov	r3, r2
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	4413      	add	r3, r2
 800b660:	00db      	lsls	r3, r3, #3
 800b662:	440b      	add	r3, r1
 800b664:	3314      	adds	r3, #20
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d806      	bhi.n	800b67a <etharp_output_to_arp_index+0x32>
 800b66c:	4b40      	ldr	r3, [pc, #256]	; (800b770 <etharp_output_to_arp_index+0x128>)
 800b66e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800b672:	4940      	ldr	r1, [pc, #256]	; (800b774 <etharp_output_to_arp_index+0x12c>)
 800b674:	4840      	ldr	r0, [pc, #256]	; (800b778 <etharp_output_to_arp_index+0x130>)
 800b676:	f002 f835 	bl	800d6e4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b67a:	79fa      	ldrb	r2, [r7, #7]
 800b67c:	493b      	ldr	r1, [pc, #236]	; (800b76c <etharp_output_to_arp_index+0x124>)
 800b67e:	4613      	mov	r3, r2
 800b680:	005b      	lsls	r3, r3, #1
 800b682:	4413      	add	r3, r2
 800b684:	00db      	lsls	r3, r3, #3
 800b686:	440b      	add	r3, r1
 800b688:	3314      	adds	r3, #20
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d153      	bne.n	800b738 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b690:	79fa      	ldrb	r2, [r7, #7]
 800b692:	4936      	ldr	r1, [pc, #216]	; (800b76c <etharp_output_to_arp_index+0x124>)
 800b694:	4613      	mov	r3, r2
 800b696:	005b      	lsls	r3, r3, #1
 800b698:	4413      	add	r3, r2
 800b69a:	00db      	lsls	r3, r3, #3
 800b69c:	440b      	add	r3, r1
 800b69e:	3312      	adds	r3, #18
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b6a6:	d919      	bls.n	800b6dc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b6a8:	79fa      	ldrb	r2, [r7, #7]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	005b      	lsls	r3, r3, #1
 800b6ae:	4413      	add	r3, r2
 800b6b0:	00db      	lsls	r3, r3, #3
 800b6b2:	4a2e      	ldr	r2, [pc, #184]	; (800b76c <etharp_output_to_arp_index+0x124>)
 800b6b4:	4413      	add	r3, r2
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f000 fb42 	bl	800bd44 <etharp_request>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d138      	bne.n	800b738 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b6c6:	79fa      	ldrb	r2, [r7, #7]
 800b6c8:	4928      	ldr	r1, [pc, #160]	; (800b76c <etharp_output_to_arp_index+0x124>)
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	4413      	add	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	440b      	add	r3, r1
 800b6d4:	3314      	adds	r3, #20
 800b6d6:	2203      	movs	r2, #3
 800b6d8:	701a      	strb	r2, [r3, #0]
 800b6da:	e02d      	b.n	800b738 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b6dc:	79fa      	ldrb	r2, [r7, #7]
 800b6de:	4923      	ldr	r1, [pc, #140]	; (800b76c <etharp_output_to_arp_index+0x124>)
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	4413      	add	r3, r2
 800b6e6:	00db      	lsls	r3, r3, #3
 800b6e8:	440b      	add	r3, r1
 800b6ea:	3312      	adds	r3, #18
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b6f2:	d321      	bcc.n	800b738 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b6f4:	79fa      	ldrb	r2, [r7, #7]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	005b      	lsls	r3, r3, #1
 800b6fa:	4413      	add	r3, r2
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	4a1b      	ldr	r2, [pc, #108]	; (800b76c <etharp_output_to_arp_index+0x124>)
 800b700:	4413      	add	r3, r2
 800b702:	1d19      	adds	r1, r3, #4
 800b704:	79fa      	ldrb	r2, [r7, #7]
 800b706:	4613      	mov	r3, r2
 800b708:	005b      	lsls	r3, r3, #1
 800b70a:	4413      	add	r3, r2
 800b70c:	00db      	lsls	r3, r3, #3
 800b70e:	3308      	adds	r3, #8
 800b710:	4a16      	ldr	r2, [pc, #88]	; (800b76c <etharp_output_to_arp_index+0x124>)
 800b712:	4413      	add	r3, r2
 800b714:	3304      	adds	r3, #4
 800b716:	461a      	mov	r2, r3
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f000 faf1 	bl	800bd00 <etharp_request_dst>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d109      	bne.n	800b738 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b724:	79fa      	ldrb	r2, [r7, #7]
 800b726:	4911      	ldr	r1, [pc, #68]	; (800b76c <etharp_output_to_arp_index+0x124>)
 800b728:	4613      	mov	r3, r2
 800b72a:	005b      	lsls	r3, r3, #1
 800b72c:	4413      	add	r3, r2
 800b72e:	00db      	lsls	r3, r3, #3
 800b730:	440b      	add	r3, r1
 800b732:	3314      	adds	r3, #20
 800b734:	2203      	movs	r2, #3
 800b736:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800b73e:	79fa      	ldrb	r2, [r7, #7]
 800b740:	4613      	mov	r3, r2
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	4413      	add	r3, r2
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	3308      	adds	r3, #8
 800b74a:	4a08      	ldr	r2, [pc, #32]	; (800b76c <etharp_output_to_arp_index+0x124>)
 800b74c:	4413      	add	r3, r2
 800b74e:	3304      	adds	r3, #4
 800b750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b754:	9200      	str	r2, [sp, #0]
 800b756:	460a      	mov	r2, r1
 800b758:	68b9      	ldr	r1, [r7, #8]
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f001 fe44 	bl	800d3e8 <ethernet_output>
 800b760:	4603      	mov	r3, r0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	2000a194 	.word	0x2000a194
 800b770:	0800fed8 	.word	0x0800fed8
 800b774:	08010048 	.word	0x08010048
 800b778:	0800ff50 	.word	0x0800ff50

0800b77c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08a      	sub	sp, #40	; 0x28
 800b780:	af02      	add	r7, sp, #8
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d106      	bne.n	800b7a0 <etharp_output+0x24>
 800b792:	4b69      	ldr	r3, [pc, #420]	; (800b938 <etharp_output+0x1bc>)
 800b794:	f240 321b 	movw	r2, #795	; 0x31b
 800b798:	4968      	ldr	r1, [pc, #416]	; (800b93c <etharp_output+0x1c0>)
 800b79a:	4869      	ldr	r0, [pc, #420]	; (800b940 <etharp_output+0x1c4>)
 800b79c:	f001 ffa2 	bl	800d6e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d106      	bne.n	800b7b4 <etharp_output+0x38>
 800b7a6:	4b64      	ldr	r3, [pc, #400]	; (800b938 <etharp_output+0x1bc>)
 800b7a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b7ac:	4965      	ldr	r1, [pc, #404]	; (800b944 <etharp_output+0x1c8>)
 800b7ae:	4864      	ldr	r0, [pc, #400]	; (800b940 <etharp_output+0x1c4>)
 800b7b0:	f001 ff98 	bl	800d6e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d106      	bne.n	800b7c8 <etharp_output+0x4c>
 800b7ba:	4b5f      	ldr	r3, [pc, #380]	; (800b938 <etharp_output+0x1bc>)
 800b7bc:	f240 321d 	movw	r2, #797	; 0x31d
 800b7c0:	4961      	ldr	r1, [pc, #388]	; (800b948 <etharp_output+0x1cc>)
 800b7c2:	485f      	ldr	r0, [pc, #380]	; (800b940 <etharp_output+0x1c4>)
 800b7c4:	f001 ff8e 	bl	800d6e4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68f9      	ldr	r1, [r7, #12]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 fed4 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b7da:	4b5c      	ldr	r3, [pc, #368]	; (800b94c <etharp_output+0x1d0>)
 800b7dc:	61fb      	str	r3, [r7, #28]
 800b7de:	e09b      	b.n	800b918 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7e8:	2be0      	cmp	r3, #224	; 0xe0
 800b7ea:	d118      	bne.n	800b81e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b7f4:	235e      	movs	r3, #94	; 0x5e
 800b7f6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b802:	b2db      	uxtb	r3, r3
 800b804:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3302      	adds	r3, #2
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	3303      	adds	r3, #3
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b816:	f107 0310 	add.w	r3, r7, #16
 800b81a:	61fb      	str	r3, [r7, #28]
 800b81c:	e07c      	b.n	800b918 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	3304      	adds	r3, #4
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	405a      	eors	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3308      	adds	r3, #8
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4013      	ands	r3, r2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d012      	beq.n	800b85c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b83c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b840:	4293      	cmp	r3, r2
 800b842:	d00b      	beq.n	800b85c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	330c      	adds	r3, #12
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	330c      	adds	r3, #12
 800b852:	61bb      	str	r3, [r7, #24]
 800b854:	e002      	b.n	800b85c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b856:	f06f 0303 	mvn.w	r3, #3
 800b85a:	e069      	b.n	800b930 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b85c:	4b3c      	ldr	r3, [pc, #240]	; (800b950 <etharp_output+0x1d4>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	4619      	mov	r1, r3
 800b862:	4a3c      	ldr	r2, [pc, #240]	; (800b954 <etharp_output+0x1d8>)
 800b864:	460b      	mov	r3, r1
 800b866:	005b      	lsls	r3, r3, #1
 800b868:	440b      	add	r3, r1
 800b86a:	00db      	lsls	r3, r3, #3
 800b86c:	4413      	add	r3, r2
 800b86e:	3314      	adds	r3, #20
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d917      	bls.n	800b8a6 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	4b35      	ldr	r3, [pc, #212]	; (800b950 <etharp_output+0x1d4>)
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	4618      	mov	r0, r3
 800b880:	4934      	ldr	r1, [pc, #208]	; (800b954 <etharp_output+0x1d8>)
 800b882:	4603      	mov	r3, r0
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	4403      	add	r3, r0
 800b888:	00db      	lsls	r3, r3, #3
 800b88a:	440b      	add	r3, r1
 800b88c:	3304      	adds	r3, #4
 800b88e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b890:	429a      	cmp	r2, r3
 800b892:	d108      	bne.n	800b8a6 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b894:	4b2e      	ldr	r3, [pc, #184]	; (800b950 <etharp_output+0x1d4>)
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	461a      	mov	r2, r3
 800b89a:	68b9      	ldr	r1, [r7, #8]
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7ff fed3 	bl	800b648 <etharp_output_to_arp_index>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	e044      	b.n	800b930 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	75fb      	strb	r3, [r7, #23]
 800b8aa:	e02a      	b.n	800b902 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b8ac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b8b0:	4928      	ldr	r1, [pc, #160]	; (800b954 <etharp_output+0x1d8>)
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	005b      	lsls	r3, r3, #1
 800b8b6:	4413      	add	r3, r2
 800b8b8:	00db      	lsls	r3, r3, #3
 800b8ba:	440b      	add	r3, r1
 800b8bc:	3314      	adds	r3, #20
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d918      	bls.n	800b8f6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	6819      	ldr	r1, [r3, #0]
 800b8c8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b8cc:	4821      	ldr	r0, [pc, #132]	; (800b954 <etharp_output+0x1d8>)
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	4413      	add	r3, r2
 800b8d4:	00db      	lsls	r3, r3, #3
 800b8d6:	4403      	add	r3, r0
 800b8d8:	3304      	adds	r3, #4
 800b8da:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b8dc:	4299      	cmp	r1, r3
 800b8de:	d10a      	bne.n	800b8f6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800b8e0:	7dfa      	ldrb	r2, [r7, #23]
 800b8e2:	4b1b      	ldr	r3, [pc, #108]	; (800b950 <etharp_output+0x1d4>)
 800b8e4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	68b9      	ldr	r1, [r7, #8]
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f7ff feab 	bl	800b648 <etharp_output_to_arp_index>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	e01c      	b.n	800b930 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b8f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	75fb      	strb	r3, [r7, #23]
 800b902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b906:	2b09      	cmp	r3, #9
 800b908:	ddd0      	ble.n	800b8ac <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	69b9      	ldr	r1, [r7, #24]
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 f822 	bl	800b958 <etharp_query>
 800b914:	4603      	mov	r3, r0
 800b916:	e00b      	b.n	800b930 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800b91e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	68b9      	ldr	r1, [r7, #8]
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f001 fd5d 	bl	800d3e8 <ethernet_output>
 800b92e:	4603      	mov	r3, r0
}
 800b930:	4618      	mov	r0, r3
 800b932:	3720      	adds	r7, #32
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	0800fed8 	.word	0x0800fed8
 800b93c:	08010028 	.word	0x08010028
 800b940:	0800ff50 	.word	0x0800ff50
 800b944:	08010078 	.word	0x08010078
 800b948:	08010018 	.word	0x08010018
 800b94c:	08010640 	.word	0x08010640
 800b950:	2000a284 	.word	0x2000a284
 800b954:	2000a194 	.word	0x2000a194

0800b958 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08c      	sub	sp, #48	; 0x30
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	3329      	adds	r3, #41	; 0x29
 800b968:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b96a:	23ff      	movs	r3, #255	; 0xff
 800b96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68f9      	ldr	r1, [r7, #12]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 fdfe 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d10c      	bne.n	800b9a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b98e:	2be0      	cmp	r3, #224	; 0xe0
 800b990:	d006      	beq.n	800b9a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d102      	bne.n	800b9a6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b9a0:	f06f 030f 	mvn.w	r3, #15
 800b9a4:	e10e      	b.n	800bbc4 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	68b8      	ldr	r0, [r7, #8]
 800b9ac:	f7ff fba0 	bl	800b0f0 <etharp_find_entry>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800b9b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	da02      	bge.n	800b9c2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800b9bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9c0:	e100      	b.n	800bbc4 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b9c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b9c6:	4981      	ldr	r1, [pc, #516]	; (800bbcc <etharp_query+0x274>)
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	005b      	lsls	r3, r3, #1
 800b9cc:	4413      	add	r3, r2
 800b9ce:	00db      	lsls	r3, r3, #3
 800b9d0:	440b      	add	r3, r1
 800b9d2:	3314      	adds	r3, #20
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d117      	bne.n	800ba0a <etharp_query+0xb2>
    is_new_entry = 1;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b9de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b9e2:	497a      	ldr	r1, [pc, #488]	; (800bbcc <etharp_query+0x274>)
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	4413      	add	r3, r2
 800b9ea:	00db      	lsls	r3, r3, #3
 800b9ec:	440b      	add	r3, r1
 800b9ee:	3314      	adds	r3, #20
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b9f4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b9f8:	4974      	ldr	r1, [pc, #464]	; (800bbcc <etharp_query+0x274>)
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	4413      	add	r3, r2
 800ba00:	00db      	lsls	r3, r3, #3
 800ba02:	440b      	add	r3, r1
 800ba04:	3308      	adds	r3, #8
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ba0a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ba0e:	496f      	ldr	r1, [pc, #444]	; (800bbcc <etharp_query+0x274>)
 800ba10:	4613      	mov	r3, r2
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	4413      	add	r3, r2
 800ba16:	00db      	lsls	r3, r3, #3
 800ba18:	440b      	add	r3, r1
 800ba1a:	3314      	adds	r3, #20
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d012      	beq.n	800ba48 <etharp_query+0xf0>
 800ba22:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ba26:	4969      	ldr	r1, [pc, #420]	; (800bbcc <etharp_query+0x274>)
 800ba28:	4613      	mov	r3, r2
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	4413      	add	r3, r2
 800ba2e:	00db      	lsls	r3, r3, #3
 800ba30:	440b      	add	r3, r1
 800ba32:	3314      	adds	r3, #20
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d806      	bhi.n	800ba48 <etharp_query+0xf0>
 800ba3a:	4b65      	ldr	r3, [pc, #404]	; (800bbd0 <etharp_query+0x278>)
 800ba3c:	f240 32c7 	movw	r2, #967	; 0x3c7
 800ba40:	4964      	ldr	r1, [pc, #400]	; (800bbd4 <etharp_query+0x27c>)
 800ba42:	4865      	ldr	r0, [pc, #404]	; (800bbd8 <etharp_query+0x280>)
 800ba44:	f001 fe4e 	bl	800d6e4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d102      	bne.n	800ba54 <etharp_query+0xfc>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10c      	bne.n	800ba6e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ba54:	68b9      	ldr	r1, [r7, #8]
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 f974 	bl	800bd44 <etharp_request>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d102      	bne.n	800ba6e <etharp_query+0x116>
      return result;
 800ba68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba6c:	e0aa      	b.n	800bbc4 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d106      	bne.n	800ba82 <etharp_query+0x12a>
 800ba74:	4b56      	ldr	r3, [pc, #344]	; (800bbd0 <etharp_query+0x278>)
 800ba76:	f240 32db 	movw	r2, #987	; 0x3db
 800ba7a:	4958      	ldr	r1, [pc, #352]	; (800bbdc <etharp_query+0x284>)
 800ba7c:	4856      	ldr	r0, [pc, #344]	; (800bbd8 <etharp_query+0x280>)
 800ba7e:	f001 fe31 	bl	800d6e4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ba82:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ba86:	4951      	ldr	r1, [pc, #324]	; (800bbcc <etharp_query+0x274>)
 800ba88:	4613      	mov	r3, r2
 800ba8a:	005b      	lsls	r3, r3, #1
 800ba8c:	4413      	add	r3, r2
 800ba8e:	00db      	lsls	r3, r3, #3
 800ba90:	440b      	add	r3, r1
 800ba92:	3314      	adds	r3, #20
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d918      	bls.n	800bacc <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800ba9a:	7cfa      	ldrb	r2, [r7, #19]
 800ba9c:	4b50      	ldr	r3, [pc, #320]	; (800bbe0 <etharp_query+0x288>)
 800ba9e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800baa0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800baa4:	4613      	mov	r3, r2
 800baa6:	005b      	lsls	r3, r3, #1
 800baa8:	4413      	add	r3, r2
 800baaa:	00db      	lsls	r3, r3, #3
 800baac:	3308      	adds	r3, #8
 800baae:	4a47      	ldr	r2, [pc, #284]	; (800bbcc <etharp_query+0x274>)
 800bab0:	4413      	add	r3, r2
 800bab2:	3304      	adds	r3, #4
 800bab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bab8:	9200      	str	r2, [sp, #0]
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f001 fc92 	bl	800d3e8 <ethernet_output>
 800bac4:	4603      	mov	r3, r0
 800bac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800baca:	e079      	b.n	800bbc0 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bacc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bad0:	493e      	ldr	r1, [pc, #248]	; (800bbcc <etharp_query+0x274>)
 800bad2:	4613      	mov	r3, r2
 800bad4:	005b      	lsls	r3, r3, #1
 800bad6:	4413      	add	r3, r2
 800bad8:	00db      	lsls	r3, r3, #3
 800bada:	440b      	add	r3, r1
 800badc:	3314      	adds	r3, #20
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d16d      	bne.n	800bbc0 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	61fb      	str	r3, [r7, #28]
    while (p) {
 800baec:	e01a      	b.n	800bb24 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	895a      	ldrh	r2, [r3, #10]
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	891b      	ldrh	r3, [r3, #8]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d10a      	bne.n	800bb10 <etharp_query+0x1b8>
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d006      	beq.n	800bb10 <etharp_query+0x1b8>
 800bb02:	4b33      	ldr	r3, [pc, #204]	; (800bbd0 <etharp_query+0x278>)
 800bb04:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800bb08:	4936      	ldr	r1, [pc, #216]	; (800bbe4 <etharp_query+0x28c>)
 800bb0a:	4833      	ldr	r0, [pc, #204]	; (800bbd8 <etharp_query+0x280>)
 800bb0c:	f001 fdea 	bl	800d6e4 <iprintf>
      if (p->type != PBUF_ROM) {
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	7b1b      	ldrb	r3, [r3, #12]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d002      	beq.n	800bb1e <etharp_query+0x1c6>
        copy_needed = 1;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	61bb      	str	r3, [r7, #24]
        break;
 800bb1c:	e005      	b.n	800bb2a <etharp_query+0x1d2>
      }
      p = p->next;
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1e1      	bne.n	800baee <etharp_query+0x196>
    }
    if (copy_needed) {
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d017      	beq.n	800bb60 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	891b      	ldrh	r3, [r3, #8]
 800bb34:	2200      	movs	r2, #0
 800bb36:	4619      	mov	r1, r3
 800bb38:	2002      	movs	r0, #2
 800bb3a:	f7f9 fafb 	bl	8005134 <pbuf_alloc>
 800bb3e:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d011      	beq.n	800bb6a <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800bb46:	6879      	ldr	r1, [r7, #4]
 800bb48:	69f8      	ldr	r0, [r7, #28]
 800bb4a:	f7f9 ff9d 	bl	8005a88 <pbuf_copy>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00a      	beq.n	800bb6a <etharp_query+0x212>
          pbuf_free(p);
 800bb54:	69f8      	ldr	r0, [r7, #28]
 800bb56:	f7f9 fe65 	bl	8005824 <pbuf_free>
          p = NULL;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	61fb      	str	r3, [r7, #28]
 800bb5e:	e004      	b.n	800bb6a <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800bb64:	69f8      	ldr	r0, [r7, #28]
 800bb66:	f7f9 ff07 	bl	8005978 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d024      	beq.n	800bbba <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800bb70:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bb74:	4915      	ldr	r1, [pc, #84]	; (800bbcc <etharp_query+0x274>)
 800bb76:	4613      	mov	r3, r2
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	4413      	add	r3, r2
 800bb7c:	00db      	lsls	r3, r3, #3
 800bb7e:	440b      	add	r3, r1
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00b      	beq.n	800bb9e <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800bb86:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bb8a:	4910      	ldr	r1, [pc, #64]	; (800bbcc <etharp_query+0x274>)
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	005b      	lsls	r3, r3, #1
 800bb90:	4413      	add	r3, r2
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	440b      	add	r3, r1
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7f9 fe43 	bl	8005824 <pbuf_free>
      }
      arp_table[i].q = p;
 800bb9e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bba2:	490a      	ldr	r1, [pc, #40]	; (800bbcc <etharp_query+0x274>)
 800bba4:	4613      	mov	r3, r2
 800bba6:	005b      	lsls	r3, r3, #1
 800bba8:	4413      	add	r3, r2
 800bbaa:	00db      	lsls	r3, r3, #3
 800bbac:	440b      	add	r3, r1
 800bbae:	69fa      	ldr	r2, [r7, #28]
 800bbb0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbb8:	e002      	b.n	800bbc0 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800bbba:	23ff      	movs	r3, #255	; 0xff
 800bbbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800bbc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3728      	adds	r7, #40	; 0x28
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	2000a194 	.word	0x2000a194
 800bbd0:	0800fed8 	.word	0x0800fed8
 800bbd4:	08010084 	.word	0x08010084
 800bbd8:	0800ff50 	.word	0x0800ff50
 800bbdc:	08010078 	.word	0x08010078
 800bbe0:	2000a284 	.word	0x2000a284
 800bbe4:	080100ac 	.word	0x080100ac

0800bbe8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08a      	sub	sp, #40	; 0x28
 800bbec:	af02      	add	r7, sp, #8
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
 800bbf4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d106      	bne.n	800bc0e <etharp_raw+0x26>
 800bc00:	4b3a      	ldr	r3, [pc, #232]	; (800bcec <etharp_raw+0x104>)
 800bc02:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800bc06:	493a      	ldr	r1, [pc, #232]	; (800bcf0 <etharp_raw+0x108>)
 800bc08:	483a      	ldr	r0, [pc, #232]	; (800bcf4 <etharp_raw+0x10c>)
 800bc0a:	f001 fd6b 	bl	800d6e4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800bc0e:	2200      	movs	r2, #0
 800bc10:	211c      	movs	r1, #28
 800bc12:	2002      	movs	r0, #2
 800bc14:	f7f9 fa8e 	bl	8005134 <pbuf_alloc>
 800bc18:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d102      	bne.n	800bc26 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800bc20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc24:	e05d      	b.n	800bce2 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	895b      	ldrh	r3, [r3, #10]
 800bc2a:	2b1b      	cmp	r3, #27
 800bc2c:	d806      	bhi.n	800bc3c <etharp_raw+0x54>
 800bc2e:	4b2f      	ldr	r3, [pc, #188]	; (800bcec <etharp_raw+0x104>)
 800bc30:	f240 4263 	movw	r2, #1123	; 0x463
 800bc34:	4930      	ldr	r1, [pc, #192]	; (800bcf8 <etharp_raw+0x110>)
 800bc36:	482f      	ldr	r0, [pc, #188]	; (800bcf4 <etharp_raw+0x10c>)
 800bc38:	f001 fd54 	bl	800d6e4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800bc42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7f8 fcba 	bl	80045be <lwip_htons>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc58:	2b06      	cmp	r3, #6
 800bc5a:	d006      	beq.n	800bc6a <etharp_raw+0x82>
 800bc5c:	4b23      	ldr	r3, [pc, #140]	; (800bcec <etharp_raw+0x104>)
 800bc5e:	f240 426a 	movw	r2, #1130	; 0x46a
 800bc62:	4926      	ldr	r1, [pc, #152]	; (800bcfc <etharp_raw+0x114>)
 800bc64:	4823      	ldr	r0, [pc, #140]	; (800bcf4 <etharp_raw+0x10c>)
 800bc66:	f001 fd3d 	bl	800d6e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	2206      	movs	r2, #6
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f001 fc44 	bl	800d500 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	3312      	adds	r3, #18
 800bc7c:	2206      	movs	r2, #6
 800bc7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc80:	4618      	mov	r0, r3
 800bc82:	f001 fc3d 	bl	800d500 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	330e      	adds	r3, #14
 800bc8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc8c:	6812      	ldr	r2, [r2, #0]
 800bc8e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	3318      	adds	r3, #24
 800bc94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc96:	6812      	ldr	r2, [r2, #0]
 800bc98:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f042 0201 	orr.w	r2, r2, #1
 800bca6:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f042 0208 	orr.w	r2, r2, #8
 800bcb0:	709a      	strb	r2, [r3, #2]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	2206      	movs	r2, #6
 800bcba:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	2204      	movs	r2, #4
 800bcc0:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bcc2:	f640 0306 	movw	r3, #2054	; 0x806
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68ba      	ldr	r2, [r7, #8]
 800bccc:	69b9      	ldr	r1, [r7, #24]
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f001 fb8a 	bl	800d3e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bcd4:	69b8      	ldr	r0, [r7, #24]
 800bcd6:	f7f9 fda5 	bl	8005824 <pbuf_free>
  p = NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bcde:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3720      	adds	r7, #32
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	0800fed8 	.word	0x0800fed8
 800bcf0:	08010028 	.word	0x08010028
 800bcf4:	0800ff50 	.word	0x0800ff50
 800bcf8:	080100c8 	.word	0x080100c8
 800bcfc:	080100fc 	.word	0x080100fc

0800bd00 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b088      	sub	sp, #32
 800bd04:	af04      	add	r7, sp, #16
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	9203      	str	r2, [sp, #12]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	9202      	str	r2, [sp, #8]
 800bd24:	4a06      	ldr	r2, [pc, #24]	; (800bd40 <etharp_request_dst+0x40>)
 800bd26:	9201      	str	r2, [sp, #4]
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f7ff ff5a 	bl	800bbe8 <etharp_raw>
 800bd34:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	08010648 	.word	0x08010648

0800bd44 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bd4e:	4a05      	ldr	r2, [pc, #20]	; (800bd64 <etharp_request+0x20>)
 800bd50:	6839      	ldr	r1, [r7, #0]
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7ff ffd4 	bl	800bd00 <etharp_request_dst>
 800bd58:	4603      	mov	r3, r0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	08010640 	.word	0x08010640

0800bd68 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08e      	sub	sp, #56	; 0x38
 800bd6c:	af04      	add	r7, sp, #16
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bd72:	4b7a      	ldr	r3, [pc, #488]	; (800bf5c <icmp_input+0x1f4>)
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	f003 030f 	and.w	r3, r3, #15
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800bd88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd8a:	2b13      	cmp	r3, #19
 800bd8c:	f240 80d1 	bls.w	800bf32 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	895b      	ldrh	r3, [r3, #10]
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	f240 80ce 	bls.w	800bf36 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800bda4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 80bb 	beq.w	800bf24 <icmp_input+0x1bc>
 800bdae:	2b08      	cmp	r3, #8
 800bdb0:	f040 80bb 	bne.w	800bf2a <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800bdb4:	4b6a      	ldr	r3, [pc, #424]	; (800bf60 <icmp_input+0x1f8>)
 800bdb6:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bdb8:	4b68      	ldr	r3, [pc, #416]	; (800bf5c <icmp_input+0x1f4>)
 800bdba:	695b      	ldr	r3, [r3, #20]
 800bdbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdc0:	2be0      	cmp	r3, #224	; 0xe0
 800bdc2:	f000 80bf 	beq.w	800bf44 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bdc6:	4b65      	ldr	r3, [pc, #404]	; (800bf5c <icmp_input+0x1f4>)
 800bdc8:	695b      	ldr	r3, [r3, #20]
 800bdca:	4a64      	ldr	r2, [pc, #400]	; (800bf5c <icmp_input+0x1f4>)
 800bdcc:	6812      	ldr	r2, [r2, #0]
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 fbd3 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f040 80b5 	bne.w	800bf48 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	891b      	ldrh	r3, [r3, #8]
 800bde2:	2b07      	cmp	r3, #7
 800bde4:	f240 80a9 	bls.w	800bf3a <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800bde8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdea:	330e      	adds	r3, #14
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	b21b      	sxth	r3, r3
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7f9 fcf2 	bl	80057dc <pbuf_header>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d046      	beq.n	800be8c <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	891a      	ldrh	r2, [r3, #8]
 800be02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be04:	4413      	add	r3, r2
 800be06:	b29b      	uxth	r3, r3
 800be08:	2200      	movs	r2, #0
 800be0a:	4619      	mov	r1, r3
 800be0c:	2002      	movs	r0, #2
 800be0e:	f7f9 f991 	bl	8005134 <pbuf_alloc>
 800be12:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 8098 	beq.w	800bf4c <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	895b      	ldrh	r3, [r3, #10]
 800be20:	461a      	mov	r2, r3
 800be22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be24:	3308      	adds	r3, #8
 800be26:	429a      	cmp	r2, r3
 800be28:	d203      	bcs.n	800be32 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800be2a:	69b8      	ldr	r0, [r7, #24]
 800be2c:	f7f9 fcfa 	bl	8005824 <pbuf_free>
        goto icmperr;
 800be30:	e08d      	b.n	800bf4e <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be3a:	4618      	mov	r0, r3
 800be3c:	f001 fb60 	bl	800d500 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800be40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be42:	425b      	negs	r3, r3
 800be44:	b29b      	uxth	r3, r3
 800be46:	b21b      	sxth	r3, r3
 800be48:	4619      	mov	r1, r3
 800be4a:	69b8      	ldr	r0, [r7, #24]
 800be4c:	f7f9 fcc6 	bl	80057dc <pbuf_header>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d009      	beq.n	800be6a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800be56:	4b43      	ldr	r3, [pc, #268]	; (800bf64 <icmp_input+0x1fc>)
 800be58:	22af      	movs	r2, #175	; 0xaf
 800be5a:	4943      	ldr	r1, [pc, #268]	; (800bf68 <icmp_input+0x200>)
 800be5c:	4843      	ldr	r0, [pc, #268]	; (800bf6c <icmp_input+0x204>)
 800be5e:	f001 fc41 	bl	800d6e4 <iprintf>
        pbuf_free(r);
 800be62:	69b8      	ldr	r0, [r7, #24]
 800be64:	f7f9 fcde 	bl	8005824 <pbuf_free>
        goto icmperr;
 800be68:	e071      	b.n	800bf4e <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800be6a:	6879      	ldr	r1, [r7, #4]
 800be6c:	69b8      	ldr	r0, [r7, #24]
 800be6e:	f7f9 fe0b 	bl	8005a88 <pbuf_copy>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d003      	beq.n	800be80 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800be78:	69b8      	ldr	r0, [r7, #24]
 800be7a:	f7f9 fcd3 	bl	8005824 <pbuf_free>
        goto icmperr;
 800be7e:	e066      	b.n	800bf4e <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7f9 fccf 	bl	8005824 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	607b      	str	r3, [r7, #4]
 800be8a:	e015      	b.n	800beb8 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800be8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be8e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800be92:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800be96:	33f2      	adds	r3, #242	; 0xf2
 800be98:	b29b      	uxth	r3, r3
 800be9a:	b21b      	sxth	r3, r3
 800be9c:	4619      	mov	r1, r3
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7f9 fc9c 	bl	80057dc <pbuf_header>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d006      	beq.n	800beb8 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800beaa:	4b2e      	ldr	r3, [pc, #184]	; (800bf64 <icmp_input+0x1fc>)
 800beac:	22c0      	movs	r2, #192	; 0xc0
 800beae:	4930      	ldr	r1, [pc, #192]	; (800bf70 <icmp_input+0x208>)
 800beb0:	482e      	ldr	r0, [pc, #184]	; (800bf6c <icmp_input+0x204>)
 800beb2:	f001 fc17 	bl	800d6e4 <iprintf>
        goto icmperr;
 800beb6:	e04a      	b.n	800bf4e <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800bebe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7f9 fc89 	bl	80057dc <pbuf_header>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d12b      	bne.n	800bf28 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bede:	4b1f      	ldr	r3, [pc, #124]	; (800bf5c <icmp_input+0x1f4>)
 800bee0:	691a      	ldr	r2, [r3, #16]
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	2200      	movs	r2, #0
 800bef0:	709a      	strb	r2, [r3, #2]
 800bef2:	2200      	movs	r2, #0
 800bef4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	22ff      	movs	r2, #255	; 0xff
 800befa:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	2200      	movs	r2, #0
 800bf00:	729a      	strb	r2, [r3, #10]
 800bf02:	2200      	movs	r2, #0
 800bf04:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	9302      	str	r3, [sp, #8]
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	2300      	movs	r3, #0
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	23ff      	movs	r3, #255	; 0xff
 800bf14:	2200      	movs	r2, #0
 800bf16:	69f9      	ldr	r1, [r7, #28]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fa5d 	bl	800c3d8 <ip4_output_if>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800bf22:	e001      	b.n	800bf28 <icmp_input+0x1c0>
    break;
 800bf24:	bf00      	nop
 800bf26:	e000      	b.n	800bf2a <icmp_input+0x1c2>
    break;
 800bf28:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7f9 fc7a 	bl	8005824 <pbuf_free>
  return;
 800bf30:	e011      	b.n	800bf56 <icmp_input+0x1ee>
    goto lenerr;
 800bf32:	bf00      	nop
 800bf34:	e002      	b.n	800bf3c <icmp_input+0x1d4>
    goto lenerr;
 800bf36:	bf00      	nop
 800bf38:	e000      	b.n	800bf3c <icmp_input+0x1d4>
      goto lenerr;
 800bf3a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f7f9 fc71 	bl	8005824 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bf42:	e008      	b.n	800bf56 <icmp_input+0x1ee>
      goto icmperr;
 800bf44:	bf00      	nop
 800bf46:	e002      	b.n	800bf4e <icmp_input+0x1e6>
      goto icmperr;
 800bf48:	bf00      	nop
 800bf4a:	e000      	b.n	800bf4e <icmp_input+0x1e6>
        goto icmperr;
 800bf4c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7f9 fc68 	bl	8005824 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bf54:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bf56:	3728      	adds	r7, #40	; 0x28
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	20004a18 	.word	0x20004a18
 800bf60:	20004a2c 	.word	0x20004a2c
 800bf64:	08010140 	.word	0x08010140
 800bf68:	08010178 	.word	0x08010178
 800bf6c:	080101b0 	.word	0x080101b0
 800bf70:	080101d8 	.word	0x080101d8

0800bf74 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bf80:	78fb      	ldrb	r3, [r7, #3]
 800bf82:	461a      	mov	r2, r3
 800bf84:	2103      	movs	r1, #3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f814 	bl	800bfb4 <icmp_send_response>
}
 800bf8c:	bf00      	nop
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bfa0:	78fb      	ldrb	r3, [r7, #3]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	210b      	movs	r1, #11
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f804 	bl	800bfb4 <icmp_send_response>
}
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08c      	sub	sp, #48	; 0x30
 800bfb8:	af04      	add	r7, sp, #16
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2124      	movs	r1, #36	; 0x24
 800bfc8:	2001      	movs	r0, #1
 800bfca:	f7f9 f8b3 	bl	8005134 <pbuf_alloc>
 800bfce:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d04c      	beq.n	800c070 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	895b      	ldrh	r3, [r3, #10]
 800bfda:	2b23      	cmp	r3, #35	; 0x23
 800bfdc:	d806      	bhi.n	800bfec <icmp_send_response+0x38>
 800bfde:	4b26      	ldr	r3, [pc, #152]	; (800c078 <icmp_send_response+0xc4>)
 800bfe0:	f240 1261 	movw	r2, #353	; 0x161
 800bfe4:	4925      	ldr	r1, [pc, #148]	; (800c07c <icmp_send_response+0xc8>)
 800bfe6:	4826      	ldr	r0, [pc, #152]	; (800c080 <icmp_send_response+0xcc>)
 800bfe8:	f001 fb7c 	bl	800d6e4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	78fa      	ldrb	r2, [r7, #3]
 800bffc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	78ba      	ldrb	r2, [r7, #2]
 800c002:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2200      	movs	r2, #0
 800c008:	711a      	strb	r2, [r3, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	2200      	movs	r2, #0
 800c012:	719a      	strb	r2, [r3, #6]
 800c014:	2200      	movs	r2, #0
 800c016:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	f103 0008 	add.w	r0, r3, #8
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	221c      	movs	r2, #28
 800c026:	4619      	mov	r1, r3
 800c028:	f001 fa6a 	bl	800d500 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c032:	f107 030c 	add.w	r3, r7, #12
 800c036:	4618      	mov	r0, r3
 800c038:	f000 f824 	bl	800c084 <ip4_route>
 800c03c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d011      	beq.n	800c068 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	2200      	movs	r2, #0
 800c048:	709a      	strb	r2, [r3, #2]
 800c04a:	2200      	movs	r2, #0
 800c04c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c04e:	f107 020c 	add.w	r2, r7, #12
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	9302      	str	r3, [sp, #8]
 800c056:	2301      	movs	r3, #1
 800c058:	9301      	str	r3, [sp, #4]
 800c05a:	2300      	movs	r3, #0
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	23ff      	movs	r3, #255	; 0xff
 800c060:	2100      	movs	r1, #0
 800c062:	69f8      	ldr	r0, [r7, #28]
 800c064:	f000 f9b8 	bl	800c3d8 <ip4_output_if>
  }
  pbuf_free(q);
 800c068:	69f8      	ldr	r0, [r7, #28]
 800c06a:	f7f9 fbdb 	bl	8005824 <pbuf_free>
 800c06e:	e000      	b.n	800c072 <icmp_send_response+0xbe>
    return;
 800c070:	bf00      	nop
}
 800c072:	3720      	adds	r7, #32
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	08010140 	.word	0x08010140
 800c07c:	0801020c 	.word	0x0801020c
 800c080:	080101b0 	.word	0x080101b0

0800c084 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c08c:	4b30      	ldr	r3, [pc, #192]	; (800c150 <ip4_route+0xcc>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	60fb      	str	r3, [r7, #12]
 800c092:	e036      	b.n	800c102 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d02b      	beq.n	800c0fc <ip4_route+0x78>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c0aa:	089b      	lsrs	r3, r3, #2
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d022      	beq.n	800c0fc <ip4_route+0x78>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d01d      	beq.n	800c0fc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	3304      	adds	r3, #4
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	405a      	eors	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3308      	adds	r3, #8
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d101      	bne.n	800c0dc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	e033      	b.n	800c144 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c0e2:	f003 0302 	and.w	r3, r3, #2
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d108      	bne.n	800c0fc <ip4_route+0x78>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	330c      	adds	r3, #12
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d101      	bne.n	800c0fc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	e023      	b.n	800c144 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	60fb      	str	r3, [r7, #12]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1c5      	bne.n	800c094 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c108:	4b12      	ldr	r3, [pc, #72]	; (800c154 <ip4_route+0xd0>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d015      	beq.n	800c13c <ip4_route+0xb8>
 800c110:	4b10      	ldr	r3, [pc, #64]	; (800c154 <ip4_route+0xd0>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c118:	f003 0301 	and.w	r3, r3, #1
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00d      	beq.n	800c13c <ip4_route+0xb8>
 800c120:	4b0c      	ldr	r3, [pc, #48]	; (800c154 <ip4_route+0xd0>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c128:	f003 0304 	and.w	r3, r3, #4
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d005      	beq.n	800c13c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800c130:	4b08      	ldr	r3, [pc, #32]	; (800c154 <ip4_route+0xd0>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3304      	adds	r3, #4
 800c136:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d101      	bne.n	800c140 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c13c:	2300      	movs	r3, #0
 800c13e:	e001      	b.n	800c144 <ip4_route+0xc0>
  }

  return netif_default;
 800c140:	4b04      	ldr	r3, [pc, #16]	; (800c154 <ip4_route+0xd0>)
 800c142:	681b      	ldr	r3, [r3, #0]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	bc80      	pop	{r7}
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	2000a128 	.word	0x2000a128
 800c154:	2000a12c 	.word	0x2000a12c

0800c158 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	091b      	lsrs	r3, r3, #4
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	2b04      	cmp	r3, #4
 800c172:	d004      	beq.n	800c17e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7f9 fb55 	bl	8005824 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	e124      	b.n	800c3c8 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	b29b      	uxth	r3, r3
 800c184:	f003 030f 	and.w	r3, r3, #15
 800c188:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800c18a:	897b      	ldrh	r3, [r7, #10]
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	885b      	ldrh	r3, [r3, #2]
 800c194:	b29b      	uxth	r3, r3
 800c196:	4618      	mov	r0, r3
 800c198:	f7f8 fa11 	bl	80045be <lwip_htons>
 800c19c:	4603      	mov	r3, r0
 800c19e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	891b      	ldrh	r3, [r3, #8]
 800c1a4:	893a      	ldrh	r2, [r7, #8]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d204      	bcs.n	800c1b4 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800c1aa:	893b      	ldrh	r3, [r7, #8]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7f9 f9c4 	bl	800553c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	895b      	ldrh	r3, [r3, #10]
 800c1b8:	897a      	ldrh	r2, [r7, #10]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d807      	bhi.n	800c1ce <ip4_input+0x76>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	891b      	ldrh	r3, [r3, #8]
 800c1c2:	893a      	ldrh	r2, [r7, #8]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d802      	bhi.n	800c1ce <ip4_input+0x76>
 800c1c8:	897b      	ldrh	r3, [r7, #10]
 800c1ca:	2b13      	cmp	r3, #19
 800c1cc:	d804      	bhi.n	800c1d8 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7f9 fb28 	bl	8005824 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	e0f7      	b.n	800c3c8 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	4a7c      	ldr	r2, [pc, #496]	; (800c3d0 <ip4_input+0x278>)
 800c1de:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	4a7a      	ldr	r2, [pc, #488]	; (800c3d0 <ip4_input+0x278>)
 800c1e6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c1e8:	4b79      	ldr	r3, [pc, #484]	; (800c3d0 <ip4_input+0x278>)
 800c1ea:	695b      	ldr	r3, [r3, #20]
 800c1ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1f0:	2be0      	cmp	r3, #224	; 0xe0
 800c1f2:	d112      	bne.n	800c21a <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d007      	beq.n	800c214 <ip4_input+0xbc>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	3304      	adds	r3, #4
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d002      	beq.n	800c214 <ip4_input+0xbc>
      netif = inp;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	613b      	str	r3, [r7, #16]
 800c212:	e041      	b.n	800c298 <ip4_input+0x140>
    } else {
      netif = NULL;
 800c214:	2300      	movs	r3, #0
 800c216:	613b      	str	r3, [r7, #16]
 800c218:	e03e      	b.n	800c298 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800c21a:	2301      	movs	r3, #1
 800c21c:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c228:	f003 0301 	and.w	r3, r3, #1
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d014      	beq.n	800c25c <ip4_input+0x104>
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	3304      	adds	r3, #4
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00f      	beq.n	800c25c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c23c:	4b64      	ldr	r3, [pc, #400]	; (800c3d0 <ip4_input+0x278>)
 800c23e:	695a      	ldr	r2, [r3, #20]
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	3304      	adds	r3, #4
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	429a      	cmp	r2, r3
 800c248:	d026      	beq.n	800c298 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c24a:	4b61      	ldr	r3, [pc, #388]	; (800c3d0 <ip4_input+0x278>)
 800c24c:	695b      	ldr	r3, [r3, #20]
 800c24e:	6939      	ldr	r1, [r7, #16]
 800c250:	4618      	mov	r0, r3
 800c252:	f000 f993 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800c256:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d11d      	bne.n	800c298 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00d      	beq.n	800c27e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800c262:	4b5b      	ldr	r3, [pc, #364]	; (800c3d0 <ip4_input+0x278>)
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	b2db      	uxtb	r3, r3
 800c268:	2b7f      	cmp	r3, #127	; 0x7f
 800c26a:	d102      	bne.n	800c272 <ip4_input+0x11a>
          netif = NULL;
 800c26c:	2300      	movs	r3, #0
 800c26e:	613b      	str	r3, [r7, #16]
          break;
 800c270:	e012      	b.n	800c298 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800c276:	4b57      	ldr	r3, [pc, #348]	; (800c3d4 <ip4_input+0x27c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	613b      	str	r3, [r7, #16]
 800c27c:	e002      	b.n	800c284 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d102      	bne.n	800c292 <ip4_input+0x13a>
        netif = netif->next;
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1c4      	bne.n	800c222 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c298:	4b4d      	ldr	r3, [pc, #308]	; (800c3d0 <ip4_input+0x278>)
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 f96c 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d105      	bne.n	800c2b6 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c2aa:	4b49      	ldr	r3, [pc, #292]	; (800c3d0 <ip4_input+0x278>)
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c2b2:	2be0      	cmp	r3, #224	; 0xe0
 800c2b4:	d104      	bne.n	800c2c0 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7f9 fab4 	bl	8005824 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	e083      	b.n	800c3c8 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d104      	bne.n	800c2d0 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f7f9 faac 	bl	8005824 <pbuf_free>
    return ERR_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	e07b      	b.n	800c3c8 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	88db      	ldrh	r3, [r3, #6]
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c2dc:	4013      	ands	r3, r2
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00b      	beq.n	800c2fa <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fd1e 	bl	800cd24 <ip4_reass>
 800c2e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <ip4_input+0x19c>
      return ERR_OK;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	e069      	b.n	800c3c8 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c2fa:	4a35      	ldr	r2, [pc, #212]	; (800c3d0 <ip4_input+0x278>)
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c300:	4a33      	ldr	r2, [pc, #204]	; (800c3d0 <ip4_input+0x278>)
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c306:	4a32      	ldr	r2, [pc, #200]	; (800c3d0 <ip4_input+0x278>)
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	b29b      	uxth	r3, r3
 800c312:	f003 030f 	and.w	r3, r3, #15
 800c316:	b29b      	uxth	r3, r3
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	4b2c      	ldr	r3, [pc, #176]	; (800c3d0 <ip4_input+0x278>)
 800c31e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800c320:	897b      	ldrh	r3, [r7, #10]
 800c322:	425b      	negs	r3, r3
 800c324:	b29b      	uxth	r3, r3
 800c326:	b21b      	sxth	r3, r3
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7f9 fa56 	bl	80057dc <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	7a5b      	ldrb	r3, [r3, #9]
 800c334:	2b11      	cmp	r3, #17
 800c336:	d006      	beq.n	800c346 <ip4_input+0x1ee>
 800c338:	2b11      	cmp	r3, #17
 800c33a:	dc13      	bgt.n	800c364 <ip4_input+0x20c>
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d00c      	beq.n	800c35a <ip4_input+0x202>
 800c340:	2b06      	cmp	r3, #6
 800c342:	d005      	beq.n	800c350 <ip4_input+0x1f8>
 800c344:	e00e      	b.n	800c364 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7fe fa91 	bl	800a870 <udp_input>
      break;
 800c34e:	e028      	b.n	800c3a2 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7fa ff44 	bl	80071e0 <tcp_input>
      break;
 800c358:	e023      	b.n	800c3a2 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f7ff fd03 	bl	800bd68 <icmp_input>
      break;
 800c362:	e01e      	b.n	800c3a2 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c364:	4b1a      	ldr	r3, [pc, #104]	; (800c3d0 <ip4_input+0x278>)
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	6939      	ldr	r1, [r7, #16]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 f906 	bl	800c57c <ip4_addr_isbroadcast_u32>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d112      	bne.n	800c39c <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c376:	4b16      	ldr	r3, [pc, #88]	; (800c3d0 <ip4_input+0x278>)
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c37e:	2be0      	cmp	r3, #224	; 0xe0
 800c380:	d00c      	beq.n	800c39c <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800c382:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7f9 fa39 	bl	8005800 <pbuf_header_force>
        p->payload = iphdr;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	697a      	ldr	r2, [r7, #20]
 800c392:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c394:	2102      	movs	r1, #2
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7ff fdec 	bl	800bf74 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7f9 fa41 	bl	8005824 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c3a2:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <ip4_input+0x278>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c3a8:	4b09      	ldr	r3, [pc, #36]	; (800c3d0 <ip4_input+0x278>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c3ae:	4b08      	ldr	r3, [pc, #32]	; (800c3d0 <ip4_input+0x278>)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c3b4:	4b06      	ldr	r3, [pc, #24]	; (800c3d0 <ip4_input+0x278>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c3ba:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <ip4_input+0x278>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c3c0:	4b03      	ldr	r3, [pc, #12]	; (800c3d0 <ip4_input+0x278>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20004a18 	.word	0x20004a18
 800c3d4:	2000a128 	.word	0x2000a128

0800c3d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08a      	sub	sp, #40	; 0x28
 800c3dc:	af04      	add	r7, sp, #16
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d009      	beq.n	800c404 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d003      	beq.n	800c3fe <ip4_output_if+0x26>
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d102      	bne.n	800c404 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	3304      	adds	r3, #4
 800c402:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c404:	78fa      	ldrb	r2, [r7, #3]
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	9302      	str	r3, [sp, #8]
 800c40a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	4613      	mov	r3, r2
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	6979      	ldr	r1, [r7, #20]
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 f805 	bl	800c42c <ip4_output_if_src>
 800c422:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c424:	4618      	mov	r0, r3
 800c426:	3718      	adds	r7, #24
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b088      	sub	sp, #32
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
 800c438:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	89db      	ldrh	r3, [r3, #14]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d006      	beq.n	800c450 <ip4_output_if_src+0x24>
 800c442:	4b48      	ldr	r3, [pc, #288]	; (800c564 <ip4_output_if_src+0x138>)
 800c444:	f240 3233 	movw	r2, #819	; 0x333
 800c448:	4947      	ldr	r1, [pc, #284]	; (800c568 <ip4_output_if_src+0x13c>)
 800c44a:	4848      	ldr	r0, [pc, #288]	; (800c56c <ip4_output_if_src+0x140>)
 800c44c:	f001 f94a 	bl	800d6e4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d060      	beq.n	800c518 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c456:	2314      	movs	r3, #20
 800c458:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800c45a:	2114      	movs	r1, #20
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7f9 f9bd 	bl	80057dc <pbuf_header>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c468:	f06f 0301 	mvn.w	r3, #1
 800c46c:	e075      	b.n	800c55a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	895b      	ldrh	r3, [r3, #10]
 800c478:	2b13      	cmp	r3, #19
 800c47a:	d806      	bhi.n	800c48a <ip4_output_if_src+0x5e>
 800c47c:	4b39      	ldr	r3, [pc, #228]	; (800c564 <ip4_output_if_src+0x138>)
 800c47e:	f44f 7258 	mov.w	r2, #864	; 0x360
 800c482:	493b      	ldr	r1, [pc, #236]	; (800c570 <ip4_output_if_src+0x144>)
 800c484:	4839      	ldr	r0, [pc, #228]	; (800c56c <ip4_output_if_src+0x140>)
 800c486:	f001 f92d 	bl	800d6e4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	78fa      	ldrb	r2, [r7, #3]
 800c48e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c496:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c4a0:	8b7b      	ldrh	r3, [r7, #26]
 800c4a2:	089b      	lsrs	r3, r3, #2
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c4b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	891b      	ldrh	r3, [r3, #8]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7f8 f87d 	bl	80045be <lwip_htons>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	719a      	strb	r2, [r3, #6]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c4d6:	4b27      	ldr	r3, [pc, #156]	; (800c574 <ip4_output_if_src+0x148>)
 800c4d8:	881b      	ldrh	r3, [r3, #0]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7f8 f86f 	bl	80045be <lwip_htons>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c4e8:	4b22      	ldr	r3, [pc, #136]	; (800c574 <ip4_output_if_src+0x148>)
 800c4ea:	881b      	ldrh	r3, [r3, #0]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	4b20      	ldr	r3, [pc, #128]	; (800c574 <ip4_output_if_src+0x148>)
 800c4f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d104      	bne.n	800c504 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c4fa:	4b1f      	ldr	r3, [pc, #124]	; (800c578 <ip4_output_if_src+0x14c>)
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	60da      	str	r2, [r3, #12]
 800c502:	e003      	b.n	800c50c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	2200      	movs	r2, #0
 800c510:	729a      	strb	r2, [r3, #10]
 800c512:	2200      	movs	r2, #0
 800c514:	72da      	strb	r2, [r3, #11]
 800c516:	e008      	b.n	800c52a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c524:	f107 0314 	add.w	r3, r7, #20
 800c528:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00c      	beq.n	800c54c <ip4_output_if_src+0x120>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	891a      	ldrh	r2, [r3, #8]
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d906      	bls.n	800c54c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f000 fd9a 	bl	800d07c <ip4_frag>
 800c548:	4603      	mov	r3, r0
 800c54a:	e006      	b.n	800c55a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	68f9      	ldr	r1, [r7, #12]
 800c554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c556:	4798      	blx	r3
 800c558:	4603      	mov	r3, r0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3720      	adds	r7, #32
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	08010238 	.word	0x08010238
 800c568:	0801026c 	.word	0x0801026c
 800c56c:	08010278 	.word	0x08010278
 800c570:	080102a0 	.word	0x080102a0
 800c574:	2000a286 	.word	0x2000a286
 800c578:	0801063c 	.word	0x0801063c

0800c57c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c590:	d002      	beq.n	800c598 <ip4_addr_isbroadcast_u32+0x1c>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c598:	2301      	movs	r3, #1
 800c59a:	e02a      	b.n	800c5f2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c5a2:	f003 0302 	and.w	r3, r3, #2
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e021      	b.n	800c5f2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d101      	bne.n	800c5be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	e019      	b.n	800c5f2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	405a      	eors	r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4013      	ands	r3, r2
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10d      	bne.n	800c5f0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	3308      	adds	r3, #8
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	43da      	mvns	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	3308      	adds	r3, #8
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d101      	bne.n	800c5f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e000      	b.n	800c5f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c5f0:	2300      	movs	r3, #0
  }
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bc80      	pop	{r7}
 800c5fa:	4770      	bx	lr

0800c5fc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800c604:	2210      	movs	r2, #16
 800c606:	4904      	ldr	r1, [pc, #16]	; (800c618 <ip4addr_ntoa+0x1c>)
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f807 	bl	800c61c <ip4addr_ntoa_r>
 800c60e:	4603      	mov	r3, r0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	2000a288 	.word	0x2000a288

0800c61c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b08d      	sub	sp, #52	; 0x34
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800c628:	2300      	movs	r3, #0
 800c62a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800c636:	f107 0318 	add.w	r3, r7, #24
 800c63a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800c63c:	2300      	movs	r3, #0
 800c63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c642:	e058      	b.n	800c6f6 <ip4addr_ntoa_r+0xda>
    i = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64c:	781a      	ldrb	r2, [r3, #0]
 800c64e:	4b32      	ldr	r3, [pc, #200]	; (800c718 <ip4addr_ntoa_r+0xfc>)
 800c650:	fba3 1302 	umull	r1, r3, r3, r2
 800c654:	08d9      	lsrs	r1, r3, #3
 800c656:	460b      	mov	r3, r1
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	440b      	add	r3, r1
 800c65c:	005b      	lsls	r3, r3, #1
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	4a2c      	ldr	r2, [pc, #176]	; (800c718 <ip4addr_ntoa_r+0xfc>)
 800c668:	fba2 2303 	umull	r2, r3, r2, r3
 800c66c:	08db      	lsrs	r3, r3, #3
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c672:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800c674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800c67e:	4619      	mov	r1, r3
 800c680:	7ffb      	ldrb	r3, [r7, #31]
 800c682:	3330      	adds	r3, #48	; 0x30
 800c684:	b2da      	uxtb	r2, r3
 800c686:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800c68a:	443b      	add	r3, r7
 800c68c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1d8      	bne.n	800c64a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800c698:	e011      	b.n	800c6be <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	1c5a      	adds	r2, r3, #1
 800c69e:	623a      	str	r2, [r7, #32]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	dc01      	bgt.n	800c6aa <ip4addr_ntoa_r+0x8e>
        return NULL;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	e030      	b.n	800c70c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800c6aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b0:	1c59      	adds	r1, r3, #1
 800c6b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c6b4:	3230      	adds	r2, #48	; 0x30
 800c6b6:	443a      	add	r2, r7
 800c6b8:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800c6bc:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800c6be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6c2:	1e5a      	subs	r2, r3, #1
 800c6c4:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1e6      	bne.n	800c69a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	623a      	str	r2, [r7, #32]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	dc01      	bgt.n	800c6dc <ip4addr_ntoa_r+0xc0>
      return NULL;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	e017      	b.n	800c70c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800c6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6de:	1c5a      	adds	r2, r3, #1
 800c6e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6e2:	222e      	movs	r2, #46	; 0x2e
 800c6e4:	701a      	strb	r2, [r3, #0]
    ap++;
 800c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800c6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6fa:	2b03      	cmp	r3, #3
 800c6fc:	d9a2      	bls.n	800c644 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	3b01      	subs	r3, #1
 800c702:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c706:	2200      	movs	r2, #0
 800c708:	701a      	strb	r2, [r3, #0]
  return buf;
 800c70a:	68bb      	ldr	r3, [r7, #8]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3734      	adds	r7, #52	; 0x34
 800c710:	46bd      	mov	sp, r7
 800c712:	bc80      	pop	{r7}
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	cccccccd 	.word	0xcccccccd

0800c71c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c722:	2300      	movs	r3, #0
 800c724:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c726:	4b12      	ldr	r3, [pc, #72]	; (800c770 <ip_reass_tmr+0x54>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c72c:	e018      	b.n	800c760 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	7fdb      	ldrb	r3, [r3, #31]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00b      	beq.n	800c74e <ip_reass_tmr+0x32>
      r->timer--;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	7fdb      	ldrb	r3, [r3, #31]
 800c73a:	3b01      	subs	r3, #1
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	60fb      	str	r3, [r7, #12]
 800c74c:	e008      	b.n	800c760 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c758:	68b9      	ldr	r1, [r7, #8]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f80a 	bl	800c774 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1e3      	bne.n	800c72e <ip_reass_tmr+0x12>
     }
   }
}
 800c766:	bf00      	nop
 800c768:	bf00      	nop
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	2000a298 	.word	0x2000a298

0800c774 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	429a      	cmp	r2, r3
 800c788:	d105      	bne.n	800c796 <ip_reass_free_complete_datagram+0x22>
 800c78a:	4b45      	ldr	r3, [pc, #276]	; (800c8a0 <ip_reass_free_complete_datagram+0x12c>)
 800c78c:	22ab      	movs	r2, #171	; 0xab
 800c78e:	4945      	ldr	r1, [pc, #276]	; (800c8a4 <ip_reass_free_complete_datagram+0x130>)
 800c790:	4845      	ldr	r0, [pc, #276]	; (800c8a8 <ip_reass_free_complete_datagram+0x134>)
 800c792:	f000 ffa7 	bl	800d6e4 <iprintf>
  if (prev != NULL) {
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00a      	beq.n	800c7b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d005      	beq.n	800c7b2 <ip_reass_free_complete_datagram+0x3e>
 800c7a6:	4b3e      	ldr	r3, [pc, #248]	; (800c8a0 <ip_reass_free_complete_datagram+0x12c>)
 800c7a8:	22ad      	movs	r2, #173	; 0xad
 800c7aa:	4940      	ldr	r1, [pc, #256]	; (800c8ac <ip_reass_free_complete_datagram+0x138>)
 800c7ac:	483e      	ldr	r0, [pc, #248]	; (800c8a8 <ip_reass_free_complete_datagram+0x134>)
 800c7ae:	f000 ff99 	bl	800d6e4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	889b      	ldrh	r3, [r3, #4]
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d12a      	bne.n	800c81a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	6858      	ldr	r0, [r3, #4]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3308      	adds	r3, #8
 800c7da:	2214      	movs	r2, #20
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f000 fe8f 	bl	800d500 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c7e2:	2101      	movs	r1, #1
 800c7e4:	69b8      	ldr	r0, [r7, #24]
 800c7e6:	f7ff fbd5 	bl	800bf94 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c7ea:	69b8      	ldr	r0, [r7, #24]
 800c7ec:	f7f9 f8ae 	bl	800594c <pbuf_clen>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c7f4:	8bfa      	ldrh	r2, [r7, #30]
 800c7f6:	8a7b      	ldrh	r3, [r7, #18]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7fe:	db05      	blt.n	800c80c <ip_reass_free_complete_datagram+0x98>
 800c800:	4b27      	ldr	r3, [pc, #156]	; (800c8a0 <ip_reass_free_complete_datagram+0x12c>)
 800c802:	22bc      	movs	r2, #188	; 0xbc
 800c804:	492a      	ldr	r1, [pc, #168]	; (800c8b0 <ip_reass_free_complete_datagram+0x13c>)
 800c806:	4828      	ldr	r0, [pc, #160]	; (800c8a8 <ip_reass_free_complete_datagram+0x134>)
 800c808:	f000 ff6c 	bl	800d6e4 <iprintf>
    pbufs_freed += clen;
 800c80c:	8bfa      	ldrh	r2, [r7, #30]
 800c80e:	8a7b      	ldrh	r3, [r7, #18]
 800c810:	4413      	add	r3, r2
 800c812:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c814:	69b8      	ldr	r0, [r7, #24]
 800c816:	f7f9 f805 	bl	8005824 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c820:	e01f      	b.n	800c862 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f7f9 f88a 	bl	800594c <pbuf_clen>
 800c838:	4603      	mov	r3, r0
 800c83a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c83c:	8bfa      	ldrh	r2, [r7, #30]
 800c83e:	8a7b      	ldrh	r3, [r7, #18]
 800c840:	4413      	add	r3, r2
 800c842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c846:	db05      	blt.n	800c854 <ip_reass_free_complete_datagram+0xe0>
 800c848:	4b15      	ldr	r3, [pc, #84]	; (800c8a0 <ip_reass_free_complete_datagram+0x12c>)
 800c84a:	22cc      	movs	r2, #204	; 0xcc
 800c84c:	4918      	ldr	r1, [pc, #96]	; (800c8b0 <ip_reass_free_complete_datagram+0x13c>)
 800c84e:	4816      	ldr	r0, [pc, #88]	; (800c8a8 <ip_reass_free_complete_datagram+0x134>)
 800c850:	f000 ff48 	bl	800d6e4 <iprintf>
    pbufs_freed += clen;
 800c854:	8bfa      	ldrh	r2, [r7, #30]
 800c856:	8a7b      	ldrh	r3, [r7, #18]
 800c858:	4413      	add	r3, r2
 800c85a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f7f8 ffe1 	bl	8005824 <pbuf_free>
  while (p != NULL) {
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1dc      	bne.n	800c822 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f8c2 	bl	800c9f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800c870:	4b10      	ldr	r3, [pc, #64]	; (800c8b4 <ip_reass_free_complete_datagram+0x140>)
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	8bfa      	ldrh	r2, [r7, #30]
 800c876:	429a      	cmp	r2, r3
 800c878:	d905      	bls.n	800c886 <ip_reass_free_complete_datagram+0x112>
 800c87a:	4b09      	ldr	r3, [pc, #36]	; (800c8a0 <ip_reass_free_complete_datagram+0x12c>)
 800c87c:	22d2      	movs	r2, #210	; 0xd2
 800c87e:	490e      	ldr	r1, [pc, #56]	; (800c8b8 <ip_reass_free_complete_datagram+0x144>)
 800c880:	4809      	ldr	r0, [pc, #36]	; (800c8a8 <ip_reass_free_complete_datagram+0x134>)
 800c882:	f000 ff2f 	bl	800d6e4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800c886:	4b0b      	ldr	r3, [pc, #44]	; (800c8b4 <ip_reass_free_complete_datagram+0x140>)
 800c888:	881a      	ldrh	r2, [r3, #0]
 800c88a:	8bfb      	ldrh	r3, [r7, #30]
 800c88c:	1ad3      	subs	r3, r2, r3
 800c88e:	b29a      	uxth	r2, r3
 800c890:	4b08      	ldr	r3, [pc, #32]	; (800c8b4 <ip_reass_free_complete_datagram+0x140>)
 800c892:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c894:	8bfb      	ldrh	r3, [r7, #30]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3720      	adds	r7, #32
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	080102d0 	.word	0x080102d0
 800c8a4:	0801030c 	.word	0x0801030c
 800c8a8:	08010318 	.word	0x08010318
 800c8ac:	08010340 	.word	0x08010340
 800c8b0:	08010354 	.word	0x08010354
 800c8b4:	2000a29c 	.word	0x2000a29c
 800c8b8:	08010374 	.word	0x08010374

0800c8bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08a      	sub	sp, #40	; 0x28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c8da:	4b28      	ldr	r3, [pc, #160]	; (800c97c <ip_reass_remove_oldest_datagram+0xc0>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c8e0:	e030      	b.n	800c944 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e4:	695a      	ldr	r2, [r3, #20]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d10c      	bne.n	800c908 <ip_reass_remove_oldest_datagram+0x4c>
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f0:	699a      	ldr	r2, [r3, #24]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	691b      	ldr	r3, [r3, #16]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d106      	bne.n	800c908 <ip_reass_remove_oldest_datagram+0x4c>
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fc:	899a      	ldrh	r2, [r3, #12]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	889b      	ldrh	r3, [r3, #4]
 800c902:	b29b      	uxth	r3, r3
 800c904:	429a      	cmp	r2, r3
 800c906:	d014      	beq.n	800c932 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	3301      	adds	r3, #1
 800c90c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c90e:	6a3b      	ldr	r3, [r7, #32]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d104      	bne.n	800c91e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	61bb      	str	r3, [r7, #24]
 800c91c:	e009      	b.n	800c932 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	7fda      	ldrb	r2, [r3, #31]
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	7fdb      	ldrb	r3, [r3, #31]
 800c926:	429a      	cmp	r2, r3
 800c928:	d803      	bhi.n	800c932 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d001      	beq.n	800c93e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1cb      	bne.n	800c8e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c94a:	6a3b      	ldr	r3, [r7, #32]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d008      	beq.n	800c962 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c950:	69b9      	ldr	r1, [r7, #24]
 800c952:	6a38      	ldr	r0, [r7, #32]
 800c954:	f7ff ff0e 	bl	800c774 <ip_reass_free_complete_datagram>
 800c958:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	4413      	add	r3, r2
 800c960:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	da02      	bge.n	800c970 <ip_reass_remove_oldest_datagram+0xb4>
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	dcac      	bgt.n	800c8ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c970:	697b      	ldr	r3, [r7, #20]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3728      	adds	r7, #40	; 0x28
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	2000a298 	.word	0x2000a298

0800c980 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c98a:	2004      	movs	r0, #4
 800c98c:	f7f8 f9c0 	bl	8004d10 <memp_malloc>
 800c990:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d110      	bne.n	800c9ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff ff8e 	bl	800c8bc <ip_reass_remove_oldest_datagram>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	dc03      	bgt.n	800c9b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c9a8:	2004      	movs	r0, #4
 800c9aa:	f7f8 f9b1 	bl	8004d10 <memp_malloc>
 800c9ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d101      	bne.n	800c9ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e016      	b.n	800c9e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c9ba:	2220      	movs	r2, #32
 800c9bc:	2100      	movs	r1, #0
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f000 fdac 	bl	800d51c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2203      	movs	r2, #3
 800c9c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c9ca:	4b09      	ldr	r3, [pc, #36]	; (800c9f0 <ip_reass_enqueue_new_datagram+0x70>)
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c9d2:	4a07      	ldr	r2, [pc, #28]	; (800c9f0 <ip_reass_enqueue_new_datagram+0x70>)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	3308      	adds	r3, #8
 800c9dc:	2214      	movs	r2, #20
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 fd8d 	bl	800d500 <memcpy>
  return ipr;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	2000a298 	.word	0x2000a298

0800c9f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c9fe:	4b10      	ldr	r3, [pc, #64]	; (800ca40 <ip_reass_dequeue_datagram+0x4c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d104      	bne.n	800ca12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a0c      	ldr	r2, [pc, #48]	; (800ca40 <ip_reass_dequeue_datagram+0x4c>)
 800ca0e:	6013      	str	r3, [r2, #0]
 800ca10:	e00d      	b.n	800ca2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d106      	bne.n	800ca26 <ip_reass_dequeue_datagram+0x32>
 800ca18:	4b0a      	ldr	r3, [pc, #40]	; (800ca44 <ip_reass_dequeue_datagram+0x50>)
 800ca1a:	f240 1245 	movw	r2, #325	; 0x145
 800ca1e:	490a      	ldr	r1, [pc, #40]	; (800ca48 <ip_reass_dequeue_datagram+0x54>)
 800ca20:	480a      	ldr	r0, [pc, #40]	; (800ca4c <ip_reass_dequeue_datagram+0x58>)
 800ca22:	f000 fe5f 	bl	800d6e4 <iprintf>
    prev->next = ipr->next;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	2004      	movs	r0, #4
 800ca32:	f7f8 f9b9 	bl	8004da8 <memp_free>
}
 800ca36:	bf00      	nop
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	2000a298 	.word	0x2000a298
 800ca44:	080102d0 	.word	0x080102d0
 800ca48:	08010390 	.word	0x08010390
 800ca4c:	08010318 	.word	0x08010318

0800ca50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08c      	sub	sp, #48	; 0x30
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ca60:	2301      	movs	r3, #1
 800ca62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	885b      	ldrh	r3, [r3, #2]
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7f7 fda4 	bl	80045be <lwip_htons>
 800ca76:	4603      	mov	r3, r0
 800ca78:	461a      	mov	r2, r3
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	f003 030f 	and.w	r3, r3, #15
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	88db      	ldrh	r3, [r3, #6]
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7f7 fd92 	bl	80045be <lwip_htons>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caae:	2200      	movs	r2, #0
 800cab0:	701a      	strb	r2, [r3, #0]
 800cab2:	2200      	movs	r2, #0
 800cab4:	705a      	strb	r2, [r3, #1]
 800cab6:	2200      	movs	r2, #0
 800cab8:	709a      	strb	r2, [r3, #2]
 800caba:	2200      	movs	r2, #0
 800cabc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800cabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac0:	8b3a      	ldrh	r2, [r7, #24]
 800cac2:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800cac4:	8b3a      	ldrh	r2, [r7, #24]
 800cac6:	8b7b      	ldrh	r3, [r7, #26]
 800cac8:	4413      	add	r3, r2
 800caca:	b29a      	uxth	r2, r3
 800cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cace:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	627b      	str	r3, [r7, #36]	; 0x24
 800cad6:	e061      	b.n	800cb9c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	889b      	ldrh	r3, [r3, #4]
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	889b      	ldrh	r3, [r3, #4]
 800cae8:	b29b      	uxth	r3, r3
 800caea:	429a      	cmp	r2, r3
 800caec:	d232      	bcs.n	800cb54 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800caee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf2:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800caf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d01f      	beq.n	800cb3a <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafc:	889b      	ldrh	r3, [r3, #4]
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb02:	88db      	ldrh	r3, [r3, #6]
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	429a      	cmp	r2, r3
 800cb08:	f0c0 80e3 	bcc.w	800ccd2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	88db      	ldrh	r3, [r3, #6]
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	889b      	ldrh	r3, [r3, #4]
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	f200 80da 	bhi.w	800ccd2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800cb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800cb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb26:	88db      	ldrh	r3, [r3, #6]
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2c:	889b      	ldrh	r3, [r3, #4]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d037      	beq.n	800cba4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800cb38:	e034      	b.n	800cba4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	88db      	ldrh	r3, [r3, #6]
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	889b      	ldrh	r3, [r3, #4]
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	429a      	cmp	r2, r3
 800cb48:	f200 80c5 	bhi.w	800ccd6 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	605a      	str	r2, [r3, #4]
      break;
 800cb52:	e027      	b.n	800cba4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb56:	889b      	ldrh	r3, [r3, #4]
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	889b      	ldrh	r3, [r3, #4]
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	429a      	cmp	r2, r3
 800cb62:	f000 80ba 	beq.w	800ccda <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	889b      	ldrh	r3, [r3, #4]
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	88db      	ldrh	r3, [r3, #6]
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	429a      	cmp	r2, r3
 800cb74:	f0c0 80b3 	bcc.w	800ccde <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800cb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d009      	beq.n	800cb92 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	88db      	ldrh	r3, [r3, #6]
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	889b      	ldrh	r3, [r3, #4]
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d001      	beq.n	800cb92 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d19a      	bne.n	800cad8 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800cba2:	e000      	b.n	800cba6 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800cba4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d12d      	bne.n	800cc08 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d01c      	beq.n	800cbec <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb4:	88db      	ldrh	r3, [r3, #6]
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	889b      	ldrh	r3, [r3, #4]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d906      	bls.n	800cbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800cbc2:	4b51      	ldr	r3, [pc, #324]	; (800cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cbc4:	f240 12ab 	movw	r2, #427	; 0x1ab
 800cbc8:	4950      	ldr	r1, [pc, #320]	; (800cd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cbca:	4851      	ldr	r0, [pc, #324]	; (800cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cbcc:	f000 fd8a 	bl	800d6e4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800cbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd8:	88db      	ldrh	r3, [r3, #6]
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	889b      	ldrh	r3, [r3, #4]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d010      	beq.n	800cc08 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	623b      	str	r3, [r7, #32]
 800cbea:	e00d      	b.n	800cc08 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d006      	beq.n	800cc02 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800cbf4:	4b44      	ldr	r3, [pc, #272]	; (800cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cbf6:	f240 12b3 	movw	r2, #435	; 0x1b3
 800cbfa:	4946      	ldr	r1, [pc, #280]	; (800cd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cbfc:	4844      	ldr	r0, [pc, #272]	; (800cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cbfe:	f000 fd71 	bl	800d6e4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	68ba      	ldr	r2, [r7, #8]
 800cc06:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d105      	bne.n	800cc1a <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	7f9b      	ldrb	r3, [r3, #30]
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d059      	beq.n	800ccce <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800cc1a:	6a3b      	ldr	r3, [r7, #32]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d04f      	beq.n	800ccc0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d006      	beq.n	800cc36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	889b      	ldrh	r3, [r3, #4]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	623b      	str	r3, [r7, #32]
 800cc3a:	e041      	b.n	800ccc0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800cc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800cc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800cc46:	e012      	b.n	800cc6e <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800cc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc50:	88db      	ldrh	r3, [r3, #6]
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	889b      	ldrh	r3, [r3, #4]
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d002      	beq.n	800cc64 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	623b      	str	r3, [r7, #32]
            break;
 800cc62:	e007      	b.n	800cc74 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1e9      	bne.n	800cc48 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d022      	beq.n	800ccc0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d106      	bne.n	800cc90 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800cc82:	4b21      	ldr	r3, [pc, #132]	; (800cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cc84:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800cc88:	4923      	ldr	r1, [pc, #140]	; (800cd18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800cc8a:	4821      	ldr	r0, [pc, #132]	; (800cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cc8c:	f000 fd2a 	bl	800d6e4 <iprintf>
          LWIP_ASSERT("sanity check",
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d106      	bne.n	800ccaa <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800cc9c:	4b1a      	ldr	r3, [pc, #104]	; (800cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cc9e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800cca2:	491d      	ldr	r1, [pc, #116]	; (800cd18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800cca4:	481a      	ldr	r0, [pc, #104]	; (800cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cca6:	f000 fd1d 	bl	800d6e4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ccaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d006      	beq.n	800ccc0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800ccb2:	4b15      	ldr	r3, [pc, #84]	; (800cd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800ccb4:	f240 12d7 	movw	r2, #471	; 0x1d7
 800ccb8:	4918      	ldr	r1, [pc, #96]	; (800cd1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ccba:	4815      	ldr	r0, [pc, #84]	; (800cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ccbc:	f000 fd12 	bl	800d6e4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ccc0:	6a3b      	ldr	r3, [r7, #32]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	bf14      	ite	ne
 800ccc6:	2301      	movne	r3, #1
 800ccc8:	2300      	moveq	r3, #0
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	e018      	b.n	800cd00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e016      	b.n	800cd00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800ccd2:	bf00      	nop
 800ccd4:	e004      	b.n	800cce0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800ccd6:	bf00      	nop
 800ccd8:	e002      	b.n	800cce0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800ccda:	bf00      	nop
 800ccdc:	e000      	b.n	800cce0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800ccde:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800cce0:	68b8      	ldr	r0, [r7, #8]
 800cce2:	f7f8 fe33 	bl	800594c <pbuf_clen>
 800cce6:	4603      	mov	r3, r0
 800cce8:	461a      	mov	r2, r3
 800ccea:	4b0d      	ldr	r3, [pc, #52]	; (800cd20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ccec:	881b      	ldrh	r3, [r3, #0]
 800ccee:	1a9b      	subs	r3, r3, r2
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	4b0b      	ldr	r3, [pc, #44]	; (800cd20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ccf4:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800ccf6:	68b8      	ldr	r0, [r7, #8]
 800ccf8:	f7f8 fd94 	bl	8005824 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ccfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3730      	adds	r7, #48	; 0x30
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	080102d0 	.word	0x080102d0
 800cd0c:	080103ac 	.word	0x080103ac
 800cd10:	08010318 	.word	0x08010318
 800cd14:	080103cc 	.word	0x080103cc
 800cd18:	08010404 	.word	0x08010404
 800cd1c:	08010414 	.word	0x08010414
 800cd20:	2000a29c 	.word	0x2000a29c

0800cd24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08e      	sub	sp, #56	; 0x38
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800cd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	f003 030f 	and.w	r3, r3, #15
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	2b14      	cmp	r3, #20
 800cd3e:	f040 8131 	bne.w	800cfa4 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800cd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd44:	88db      	ldrh	r3, [r3, #6]
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7f7 fc38 	bl	80045be <lwip_htons>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	00db      	lsls	r3, r3, #3
 800cd58:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	885b      	ldrh	r3, [r3, #2]
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7f7 fc2c 	bl	80045be <lwip_htons>
 800cd66:	4603      	mov	r3, r0
 800cd68:	461a      	mov	r2, r3
 800cd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	f003 030f 	and.w	r3, r3, #15
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7f8 fde4 	bl	800594c <pbuf_clen>
 800cd84:	4603      	mov	r3, r0
 800cd86:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800cd88:	4b8e      	ldr	r3, [pc, #568]	; (800cfc4 <ip4_reass+0x2a0>)
 800cd8a:	881b      	ldrh	r3, [r3, #0]
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd90:	4413      	add	r3, r2
 800cd92:	2b0a      	cmp	r3, #10
 800cd94:	dd10      	ble.n	800cdb8 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cd96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd98:	4619      	mov	r1, r3
 800cd9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd9c:	f7ff fd8e 	bl	800c8bc <ip_reass_remove_oldest_datagram>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 8100 	beq.w	800cfa8 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800cda8:	4b86      	ldr	r3, [pc, #536]	; (800cfc4 <ip4_reass+0x2a0>)
 800cdaa:	881b      	ldrh	r3, [r3, #0]
 800cdac:	461a      	mov	r2, r3
 800cdae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdb0:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cdb2:	2b0a      	cmp	r3, #10
 800cdb4:	f300 80f8 	bgt.w	800cfa8 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cdb8:	4b83      	ldr	r3, [pc, #524]	; (800cfc8 <ip4_reass+0x2a4>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	633b      	str	r3, [r7, #48]	; 0x30
 800cdbe:	e015      	b.n	800cdec <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc2:	695a      	ldr	r2, [r3, #20]
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d10c      	bne.n	800cde6 <ip4_reass+0xc2>
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	699a      	ldr	r2, [r3, #24]
 800cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d106      	bne.n	800cde6 <ip4_reass+0xc2>
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdda:	899a      	ldrh	r2, [r3, #12]
 800cddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdde:	889b      	ldrh	r3, [r3, #4]
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d006      	beq.n	800cdf4 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	633b      	str	r3, [r7, #48]	; 0x30
 800cdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1e6      	bne.n	800cdc0 <ip4_reass+0x9c>
 800cdf2:	e000      	b.n	800cdf6 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800cdf4:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d109      	bne.n	800ce10 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800cdfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdfe:	4619      	mov	r1, r3
 800ce00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce02:	f7ff fdbd 	bl	800c980 <ip_reass_enqueue_new_datagram>
 800ce06:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ce08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d11c      	bne.n	800ce48 <ip4_reass+0x124>
      goto nullreturn;
 800ce0e:	e0d0      	b.n	800cfb2 <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce12:	88db      	ldrh	r3, [r3, #6]
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7f7 fbd1 	bl	80045be <lwip_htons>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d110      	bne.n	800ce48 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	89db      	ldrh	r3, [r3, #14]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7f7 fbc7 	bl	80045be <lwip_htons>
 800ce30:	4603      	mov	r3, r0
 800ce32:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d006      	beq.n	800ce48 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3c:	3308      	adds	r3, #8
 800ce3e:	2214      	movs	r2, #20
 800ce40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 fb5c 	bl	800d500 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4a:	88db      	ldrh	r3, [r3, #6]
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	f003 0320 	and.w	r3, r3, #32
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	bf0c      	ite	eq
 800ce56:	2301      	moveq	r3, #1
 800ce58:	2300      	movne	r3, #0
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00e      	beq.n	800ce82 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800ce64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ce66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce68:	4413      	add	r3, r2
 800ce6a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ce6c:	8b7a      	ldrh	r2, [r7, #26]
 800ce6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ce70:	429a      	cmp	r2, r3
 800ce72:	f0c0 809b 	bcc.w	800cfac <ip4_reass+0x288>
 800ce76:	8b7b      	ldrh	r3, [r7, #26]
 800ce78:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	f200 8095 	bhi.w	800cfac <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ce82:	69fa      	ldr	r2, [r7, #28]
 800ce84:	6879      	ldr	r1, [r7, #4]
 800ce86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce88:	f7ff fde2 	bl	800ca50 <ip_reass_chain_frag_into_datagram_and_validate>
 800ce8c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce94:	f000 808c 	beq.w	800cfb0 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ce98:	4b4a      	ldr	r3, [pc, #296]	; (800cfc4 <ip4_reass+0x2a0>)
 800ce9a:	881a      	ldrh	r2, [r3, #0]
 800ce9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce9e:	4413      	add	r3, r2
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	4b48      	ldr	r3, [pc, #288]	; (800cfc4 <ip4_reass+0x2a0>)
 800cea4:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00d      	beq.n	800cec8 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800ceac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ceae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceb0:	4413      	add	r3, r2
 800ceb2:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	8a7a      	ldrh	r2, [r7, #18]
 800ceb8:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ceba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebc:	7f9b      	ldrb	r3, [r3, #30]
 800cebe:	f043 0301 	orr.w	r3, r3, #1
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec6:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d168      	bne.n	800cfa0 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800cece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced0:	8b9b      	ldrh	r3, [r3, #28]
 800ced2:	3314      	adds	r3, #20
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced8:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800cee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ceec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceee:	3308      	adds	r3, #8
 800cef0:	2214      	movs	r2, #20
 800cef2:	4619      	mov	r1, r3
 800cef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cef6:	f000 fb03 	bl	800d500 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800cefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefc:	8b9b      	ldrh	r3, [r3, #28]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7f7 fb5d 	bl	80045be <lwip_htons>
 800cf04:	4603      	mov	r3, r0
 800cf06:	461a      	mov	r2, r3
 800cf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0e:	2200      	movs	r2, #0
 800cf10:	719a      	strb	r2, [r3, #6]
 800cf12:	2200      	movs	r2, #0
 800cf14:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf18:	2200      	movs	r2, #0
 800cf1a:	729a      	strb	r2, [r3, #10]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800cf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800cf26:	e00e      	b.n	800cf46 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800cf28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800cf2e:	f06f 0113 	mvn.w	r1, #19
 800cf32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cf34:	f7f8 fc52 	bl	80057dc <pbuf_header>
      pbuf_cat(p, r);
 800cf38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7f8 fd3e 	bl	80059bc <pbuf_cat>
      r = iprh->next_pbuf;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800cf46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1ed      	bne.n	800cf28 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800cf4c:	4b1e      	ldr	r3, [pc, #120]	; (800cfc8 <ip4_reass+0x2a4>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d102      	bne.n	800cf5c <ip4_reass+0x238>
      ipr_prev = NULL;
 800cf56:	2300      	movs	r3, #0
 800cf58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf5a:	e010      	b.n	800cf7e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cf5c:	4b1a      	ldr	r3, [pc, #104]	; (800cfc8 <ip4_reass+0x2a4>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf62:	e007      	b.n	800cf74 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800cf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d006      	beq.n	800cf7c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1f4      	bne.n	800cf64 <ip4_reass+0x240>
 800cf7a:	e000      	b.n	800cf7e <ip4_reass+0x25a>
          break;
 800cf7c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cf7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf82:	f7ff fd37 	bl	800c9f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7f8 fce0 	bl	800594c <pbuf_clen>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	461a      	mov	r2, r3
 800cf90:	4b0c      	ldr	r3, [pc, #48]	; (800cfc4 <ip4_reass+0x2a0>)
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	1a9b      	subs	r3, r3, r2
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	4b0a      	ldr	r3, [pc, #40]	; (800cfc4 <ip4_reass+0x2a0>)
 800cf9a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	e00c      	b.n	800cfba <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	e00a      	b.n	800cfba <ip4_reass+0x296>
    goto nullreturn;
 800cfa4:	bf00      	nop
 800cfa6:	e004      	b.n	800cfb2 <ip4_reass+0x28e>
      goto nullreturn;
 800cfa8:	bf00      	nop
 800cfaa:	e002      	b.n	800cfb2 <ip4_reass+0x28e>
      goto nullreturn;
 800cfac:	bf00      	nop
 800cfae:	e000      	b.n	800cfb2 <ip4_reass+0x28e>
    goto nullreturn;
 800cfb0:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7f8 fc36 	bl	8005824 <pbuf_free>
  return NULL;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3738      	adds	r7, #56	; 0x38
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	2000a29c 	.word	0x2000a29c
 800cfc8:	2000a298 	.word	0x2000a298

0800cfcc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800cfd0:	2005      	movs	r0, #5
 800cfd2:	f7f7 fe9d 	bl	8004d10 <memp_malloc>
 800cfd6:	4603      	mov	r3, r0
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d106      	bne.n	800cff8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800cfea:	4b07      	ldr	r3, [pc, #28]	; (800d008 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800cfec:	f240 22ae 	movw	r2, #686	; 0x2ae
 800cff0:	4906      	ldr	r1, [pc, #24]	; (800d00c <ip_frag_free_pbuf_custom_ref+0x30>)
 800cff2:	4807      	ldr	r0, [pc, #28]	; (800d010 <ip_frag_free_pbuf_custom_ref+0x34>)
 800cff4:	f000 fb76 	bl	800d6e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800cff8:	6879      	ldr	r1, [r7, #4]
 800cffa:	2005      	movs	r0, #5
 800cffc:	f7f7 fed4 	bl	8004da8 <memp_free>
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	080102d0 	.word	0x080102d0
 800d00c:	08010438 	.word	0x08010438
 800d010:	08010318 	.word	0x08010318

0800d014 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d106      	bne.n	800d034 <ipfrag_free_pbuf_custom+0x20>
 800d026:	4b11      	ldr	r3, [pc, #68]	; (800d06c <ipfrag_free_pbuf_custom+0x58>)
 800d028:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800d02c:	4910      	ldr	r1, [pc, #64]	; (800d070 <ipfrag_free_pbuf_custom+0x5c>)
 800d02e:	4811      	ldr	r0, [pc, #68]	; (800d074 <ipfrag_free_pbuf_custom+0x60>)
 800d030:	f000 fb58 	bl	800d6e4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d006      	beq.n	800d04a <ipfrag_free_pbuf_custom+0x36>
 800d03c:	4b0b      	ldr	r3, [pc, #44]	; (800d06c <ipfrag_free_pbuf_custom+0x58>)
 800d03e:	f240 22b9 	movw	r2, #697	; 0x2b9
 800d042:	490d      	ldr	r1, [pc, #52]	; (800d078 <ipfrag_free_pbuf_custom+0x64>)
 800d044:	480b      	ldr	r0, [pc, #44]	; (800d074 <ipfrag_free_pbuf_custom+0x60>)
 800d046:	f000 fb4d 	bl	800d6e4 <iprintf>
  if (pcr->original != NULL) {
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d004      	beq.n	800d05c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	4618      	mov	r0, r3
 800d058:	f7f8 fbe4 	bl	8005824 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	f7ff ffbd 	bl	800cfdc <ip_frag_free_pbuf_custom_ref>
}
 800d062:	bf00      	nop
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	080102d0 	.word	0x080102d0
 800d070:	08010444 	.word	0x08010444
 800d074:	08010318 	.word	0x08010318
 800d078:	08010450 	.word	0x08010450

0800d07c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b092      	sub	sp, #72	; 0x48
 800d080:	af02      	add	r7, sp, #8
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d090:	3b14      	subs	r3, #20
 800d092:	2b00      	cmp	r3, #0
 800d094:	da00      	bge.n	800d098 <ip4_frag+0x1c>
 800d096:	3307      	adds	r3, #7
 800d098:	10db      	asrs	r3, r3, #3
 800d09a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d09c:	2314      	movs	r3, #20
 800d09e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800d0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a8:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	f003 030f 	and.w	r3, r3, #15
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	2b14      	cmp	r3, #20
 800d0b6:	d009      	beq.n	800d0cc <ip4_frag+0x50>
 800d0b8:	4b7a      	ldr	r3, [pc, #488]	; (800d2a4 <ip4_frag+0x228>)
 800d0ba:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d0be:	497a      	ldr	r1, [pc, #488]	; (800d2a8 <ip4_frag+0x22c>)
 800d0c0:	487a      	ldr	r0, [pc, #488]	; (800d2ac <ip4_frag+0x230>)
 800d0c2:	f000 fb0f 	bl	800d6e4 <iprintf>
 800d0c6:	f06f 0305 	mvn.w	r3, #5
 800d0ca:	e0e6      	b.n	800d29a <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ce:	88db      	ldrh	r3, [r3, #6]
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7f7 fa73 	bl	80045be <lwip_htons>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800d0dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d0de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0e2:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d0e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d0e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d009      	beq.n	800d102 <ip4_frag+0x86>
 800d0ee:	4b6d      	ldr	r3, [pc, #436]	; (800d2a4 <ip4_frag+0x228>)
 800d0f0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d0f4:	496e      	ldr	r1, [pc, #440]	; (800d2b0 <ip4_frag+0x234>)
 800d0f6:	486d      	ldr	r0, [pc, #436]	; (800d2ac <ip4_frag+0x230>)
 800d0f8:	f000 faf4 	bl	800d6e4 <iprintf>
 800d0fc:	f06f 0305 	mvn.w	r3, #5
 800d100:	e0cb      	b.n	800d29a <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	891b      	ldrh	r3, [r3, #8]
 800d106:	3b14      	subs	r3, #20
 800d108:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800d10a:	e0bd      	b.n	800d288 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d10c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d10e:	00da      	lsls	r2, r3, #3
 800d110:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d112:	4293      	cmp	r3, r2
 800d114:	bfa8      	it	ge
 800d116:	4613      	movge	r3, r2
 800d118:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d11a:	2200      	movs	r2, #0
 800d11c:	2114      	movs	r1, #20
 800d11e:	2002      	movs	r0, #2
 800d120:	f7f8 f808 	bl	8005134 <pbuf_alloc>
 800d124:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f000 80b3 	beq.w	800d294 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	895b      	ldrh	r3, [r3, #10]
 800d132:	2b13      	cmp	r3, #19
 800d134:	d806      	bhi.n	800d144 <ip4_frag+0xc8>
 800d136:	4b5b      	ldr	r3, [pc, #364]	; (800d2a4 <ip4_frag+0x228>)
 800d138:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d13c:	495d      	ldr	r1, [pc, #372]	; (800d2b4 <ip4_frag+0x238>)
 800d13e:	485b      	ldr	r0, [pc, #364]	; (800d2ac <ip4_frag+0x230>)
 800d140:	f000 fad0 	bl	800d6e4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	2214      	movs	r2, #20
 800d14a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d14c:	4618      	mov	r0, r3
 800d14e:	f000 f9d7 	bl	800d500 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d152:	6a3b      	ldr	r3, [r7, #32]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800d158:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d15a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800d15c:	e04f      	b.n	800d1fe <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	895a      	ldrh	r2, [r3, #10]
 800d162:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d168:	8b7a      	ldrh	r2, [r7, #26]
 800d16a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d16c:	4293      	cmp	r3, r2
 800d16e:	bf28      	it	cs
 800d170:	4613      	movcs	r3, r2
 800d172:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d174:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d176:	2b00      	cmp	r3, #0
 800d178:	d105      	bne.n	800d186 <ip4_frag+0x10a>
        poff = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	60fb      	str	r3, [r7, #12]
        continue;
 800d184:	e03b      	b.n	800d1fe <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d186:	f7ff ff21 	bl	800cfcc <ip_frag_alloc_pbuf_custom_ref>
 800d18a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d103      	bne.n	800d19a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800d192:	6a38      	ldr	r0, [r7, #32]
 800d194:	f7f8 fb46 	bl	8005824 <pbuf_free>
        goto memerr;
 800d198:	e07d      	b.n	800d296 <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d19a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d1a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d1a2:	4413      	add	r3, r2
 800d1a4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d1a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d1a8:	9201      	str	r2, [sp, #4]
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2202      	movs	r2, #2
 800d1b0:	2004      	movs	r0, #4
 800d1b2:	f7f8 f959 	bl	8005468 <pbuf_alloced_custom>
 800d1b6:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d106      	bne.n	800d1cc <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d1be:	6978      	ldr	r0, [r7, #20]
 800d1c0:	f7ff ff0c 	bl	800cfdc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d1c4:	6a38      	ldr	r0, [r7, #32]
 800d1c6:	f7f8 fb2d 	bl	8005824 <pbuf_free>
        goto memerr;
 800d1ca:	e064      	b.n	800d296 <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f7f8 fbd3 	bl	8005978 <pbuf_ref>
      pcr->original = p;
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	4a37      	ldr	r2, [pc, #220]	; (800d2b8 <ip4_frag+0x23c>)
 800d1dc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d1de:	6939      	ldr	r1, [r7, #16]
 800d1e0:	6a38      	ldr	r0, [r7, #32]
 800d1e2:	f7f8 fbeb 	bl	80059bc <pbuf_cat>
      left_to_copy -= newpbuflen;
 800d1e6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800d1e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800d1ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d004      	beq.n	800d1fe <ip4_frag+0x182>
        poff = 0;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d1fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1ac      	bne.n	800d15e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800d204:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d206:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d208:	4413      	add	r3, r2
 800d20a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d210:	f1a3 0213 	sub.w	r2, r3, #19
 800d214:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d216:	429a      	cmp	r2, r3
 800d218:	bfcc      	ite	gt
 800d21a:	2301      	movgt	r3, #1
 800d21c:	2300      	movle	r3, #0
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d222:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d228:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d103      	bne.n	800d238 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800d230:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d232:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d236:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d238:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7f7 f9bf 	bl	80045be <lwip_htons>
 800d240:	4603      	mov	r3, r0
 800d242:	461a      	mov	r2, r3
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800d248:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d24a:	3314      	adds	r3, #20
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	4618      	mov	r0, r3
 800d250:	f7f7 f9b5 	bl	80045be <lwip_htons>
 800d254:	4603      	mov	r3, r0
 800d256:	461a      	mov	r2, r3
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	2200      	movs	r2, #0
 800d260:	729a      	strb	r2, [r3, #10]
 800d262:	2200      	movs	r2, #0
 800d264:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	695b      	ldr	r3, [r3, #20]
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	6a39      	ldr	r1, [r7, #32]
 800d26e:	68b8      	ldr	r0, [r7, #8]
 800d270:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d272:	6a38      	ldr	r0, [r7, #32]
 800d274:	f7f8 fad6 	bl	8005824 <pbuf_free>
    left -= fragsize;
 800d278:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d27a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800d280:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800d282:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d284:	4413      	add	r3, r2
 800d286:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800d288:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f47f af3e 	bne.w	800d10c <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d290:	2300      	movs	r3, #0
 800d292:	e002      	b.n	800d29a <ip4_frag+0x21e>
      goto memerr;
 800d294:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3740      	adds	r7, #64	; 0x40
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	080102d0 	.word	0x080102d0
 800d2a8:	0801045c 	.word	0x0801045c
 800d2ac:	08010318 	.word	0x08010318
 800d2b0:	08010484 	.word	0x08010484
 800d2b4:	080104a0 	.word	0x080104a0
 800d2b8:	0800d015 	.word	0x0800d015

0800d2bc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800d2c6:	230e      	movs	r3, #14
 800d2c8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	895b      	ldrh	r3, [r3, #10]
 800d2ce:	2b0e      	cmp	r3, #14
 800d2d0:	d977      	bls.n	800d3c2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	7b1a      	ldrb	r2, [r3, #12]
 800d2dc:	7b5b      	ldrb	r3, [r3, #13]
 800d2de:	021b      	lsls	r3, r3, #8
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	f003 0301 	and.w	r3, r3, #1
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d023      	beq.n	800d338 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d10f      	bne.n	800d318 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	785b      	ldrb	r3, [r3, #1]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d11b      	bne.n	800d338 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d304:	2b5e      	cmp	r3, #94	; 0x5e
 800d306:	d117      	bne.n	800d338 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	7b5b      	ldrb	r3, [r3, #13]
 800d30c:	f043 0310 	orr.w	r3, r3, #16
 800d310:	b2da      	uxtb	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	735a      	strb	r2, [r3, #13]
 800d316:	e00f      	b.n	800d338 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	2206      	movs	r2, #6
 800d31c:	4931      	ldr	r1, [pc, #196]	; (800d3e4 <ethernet_input+0x128>)
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 f8de 	bl	800d4e0 <memcmp>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	7b5b      	ldrb	r3, [r3, #13]
 800d32e:	f043 0308 	orr.w	r3, r3, #8
 800d332:	b2da      	uxtb	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d338:	89fb      	ldrh	r3, [r7, #14]
 800d33a:	2b08      	cmp	r3, #8
 800d33c:	d003      	beq.n	800d346 <ethernet_input+0x8a>
 800d33e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d342:	d01e      	beq.n	800d382 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d344:	e046      	b.n	800d3d4 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d34c:	f003 0308 	and.w	r3, r3, #8
 800d350:	2b00      	cmp	r3, #0
 800d352:	d038      	beq.n	800d3c6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	895b      	ldrh	r3, [r3, #10]
 800d358:	461a      	mov	r2, r3
 800d35a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d35e:	429a      	cmp	r2, r3
 800d360:	db33      	blt.n	800d3ca <ethernet_input+0x10e>
 800d362:	8afb      	ldrh	r3, [r7, #22]
 800d364:	425b      	negs	r3, r3
 800d366:	b29b      	uxth	r3, r3
 800d368:	b21b      	sxth	r3, r3
 800d36a:	4619      	mov	r1, r3
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f7f8 fa35 	bl	80057dc <pbuf_header>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d128      	bne.n	800d3ca <ethernet_input+0x10e>
        ip4_input(p, netif);
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7fe feec 	bl	800c158 <ip4_input>
      break;
 800d380:	e01d      	b.n	800d3be <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d388:	f003 0308 	and.w	r3, r3, #8
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d01e      	beq.n	800d3ce <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	895b      	ldrh	r3, [r3, #10]
 800d394:	461a      	mov	r2, r3
 800d396:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	db19      	blt.n	800d3d2 <ethernet_input+0x116>
 800d39e:	8afb      	ldrh	r3, [r7, #22]
 800d3a0:	425b      	negs	r3, r3
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	b21b      	sxth	r3, r3
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7f8 fa17 	bl	80057dc <pbuf_header>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d10e      	bne.n	800d3d2 <ethernet_input+0x116>
        etharp_input(p, netif);
 800d3b4:	6839      	ldr	r1, [r7, #0]
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7fe f8bc 	bl	800b534 <etharp_input>
      break;
 800d3bc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e00c      	b.n	800d3dc <ethernet_input+0x120>
    goto free_and_return;
 800d3c2:	bf00      	nop
 800d3c4:	e006      	b.n	800d3d4 <ethernet_input+0x118>
        goto free_and_return;
 800d3c6:	bf00      	nop
 800d3c8:	e004      	b.n	800d3d4 <ethernet_input+0x118>
        goto free_and_return;
 800d3ca:	bf00      	nop
 800d3cc:	e002      	b.n	800d3d4 <ethernet_input+0x118>
        goto free_and_return;
 800d3ce:	bf00      	nop
 800d3d0:	e000      	b.n	800d3d4 <ethernet_input+0x118>
        goto free_and_return;
 800d3d2:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7f8 fa25 	bl	8005824 <pbuf_free>
  return ERR_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3718      	adds	r7, #24
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	08010640 	.word	0x08010640

0800d3e8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b086      	sub	sp, #24
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d3f6:	8c3b      	ldrh	r3, [r7, #32]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7f7 f8e0 	bl	80045be <lwip_htons>
 800d3fe:	4603      	mov	r3, r0
 800d400:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d402:	210e      	movs	r1, #14
 800d404:	68b8      	ldr	r0, [r7, #8]
 800d406:	f7f8 f9e9 	bl	80057dc <pbuf_header>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d125      	bne.n	800d45c <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	8afa      	ldrh	r2, [r7, #22]
 800d41a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	2206      	movs	r2, #6
 800d420:	6839      	ldr	r1, [r7, #0]
 800d422:	4618      	mov	r0, r3
 800d424:	f000 f86c 	bl	800d500 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	3306      	adds	r3, #6
 800d42c:	2206      	movs	r2, #6
 800d42e:	6879      	ldr	r1, [r7, #4]
 800d430:	4618      	mov	r0, r3
 800d432:	f000 f865 	bl	800d500 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d43c:	2b06      	cmp	r3, #6
 800d43e:	d006      	beq.n	800d44e <ethernet_output+0x66>
 800d440:	4b0a      	ldr	r3, [pc, #40]	; (800d46c <ethernet_output+0x84>)
 800d442:	f240 122b 	movw	r2, #299	; 0x12b
 800d446:	490a      	ldr	r1, [pc, #40]	; (800d470 <ethernet_output+0x88>)
 800d448:	480a      	ldr	r0, [pc, #40]	; (800d474 <ethernet_output+0x8c>)
 800d44a:	f000 f94b 	bl	800d6e4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	699b      	ldr	r3, [r3, #24]
 800d452:	68b9      	ldr	r1, [r7, #8]
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	4798      	blx	r3
 800d458:	4603      	mov	r3, r0
 800d45a:	e002      	b.n	800d462 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d45c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d45e:	f06f 0301 	mvn.w	r3, #1
}
 800d462:	4618      	mov	r0, r3
 800d464:	3718      	adds	r7, #24
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	080104c0 	.word	0x080104c0
 800d470:	080104f8 	.word	0x080104f8
 800d474:	0801052c 	.word	0x0801052c

0800d478 <__libc_init_array>:
 800d478:	b570      	push	{r4, r5, r6, lr}
 800d47a:	2600      	movs	r6, #0
 800d47c:	4d0c      	ldr	r5, [pc, #48]	; (800d4b0 <__libc_init_array+0x38>)
 800d47e:	4c0d      	ldr	r4, [pc, #52]	; (800d4b4 <__libc_init_array+0x3c>)
 800d480:	1b64      	subs	r4, r4, r5
 800d482:	10a4      	asrs	r4, r4, #2
 800d484:	42a6      	cmp	r6, r4
 800d486:	d109      	bne.n	800d49c <__libc_init_array+0x24>
 800d488:	f001 f9b2 	bl	800e7f0 <_init>
 800d48c:	2600      	movs	r6, #0
 800d48e:	4d0a      	ldr	r5, [pc, #40]	; (800d4b8 <__libc_init_array+0x40>)
 800d490:	4c0a      	ldr	r4, [pc, #40]	; (800d4bc <__libc_init_array+0x44>)
 800d492:	1b64      	subs	r4, r4, r5
 800d494:	10a4      	asrs	r4, r4, #2
 800d496:	42a6      	cmp	r6, r4
 800d498:	d105      	bne.n	800d4a6 <__libc_init_array+0x2e>
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
 800d49c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4a0:	4798      	blx	r3
 800d4a2:	3601      	adds	r6, #1
 800d4a4:	e7ee      	b.n	800d484 <__libc_init_array+0xc>
 800d4a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4aa:	4798      	blx	r3
 800d4ac:	3601      	adds	r6, #1
 800d4ae:	e7f2      	b.n	800d496 <__libc_init_array+0x1e>
 800d4b0:	080106f0 	.word	0x080106f0
 800d4b4:	080106f0 	.word	0x080106f0
 800d4b8:	080106f0 	.word	0x080106f0
 800d4bc:	080106f4 	.word	0x080106f4

0800d4c0 <malloc>:
 800d4c0:	4b02      	ldr	r3, [pc, #8]	; (800d4cc <malloc+0xc>)
 800d4c2:	4601      	mov	r1, r0
 800d4c4:	6818      	ldr	r0, [r3, #0]
 800d4c6:	f000 b899 	b.w	800d5fc <_malloc_r>
 800d4ca:	bf00      	nop
 800d4cc:	20000018 	.word	0x20000018

0800d4d0 <free>:
 800d4d0:	4b02      	ldr	r3, [pc, #8]	; (800d4dc <free+0xc>)
 800d4d2:	4601      	mov	r1, r0
 800d4d4:	6818      	ldr	r0, [r3, #0]
 800d4d6:	f000 b829 	b.w	800d52c <_free_r>
 800d4da:	bf00      	nop
 800d4dc:	20000018 	.word	0x20000018

0800d4e0 <memcmp>:
 800d4e0:	b510      	push	{r4, lr}
 800d4e2:	3901      	subs	r1, #1
 800d4e4:	4402      	add	r2, r0
 800d4e6:	4290      	cmp	r0, r2
 800d4e8:	d101      	bne.n	800d4ee <memcmp+0xe>
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	e005      	b.n	800d4fa <memcmp+0x1a>
 800d4ee:	7803      	ldrb	r3, [r0, #0]
 800d4f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d4f4:	42a3      	cmp	r3, r4
 800d4f6:	d001      	beq.n	800d4fc <memcmp+0x1c>
 800d4f8:	1b18      	subs	r0, r3, r4
 800d4fa:	bd10      	pop	{r4, pc}
 800d4fc:	3001      	adds	r0, #1
 800d4fe:	e7f2      	b.n	800d4e6 <memcmp+0x6>

0800d500 <memcpy>:
 800d500:	440a      	add	r2, r1
 800d502:	4291      	cmp	r1, r2
 800d504:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d508:	d100      	bne.n	800d50c <memcpy+0xc>
 800d50a:	4770      	bx	lr
 800d50c:	b510      	push	{r4, lr}
 800d50e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d512:	4291      	cmp	r1, r2
 800d514:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d518:	d1f9      	bne.n	800d50e <memcpy+0xe>
 800d51a:	bd10      	pop	{r4, pc}

0800d51c <memset>:
 800d51c:	4603      	mov	r3, r0
 800d51e:	4402      	add	r2, r0
 800d520:	4293      	cmp	r3, r2
 800d522:	d100      	bne.n	800d526 <memset+0xa>
 800d524:	4770      	bx	lr
 800d526:	f803 1b01 	strb.w	r1, [r3], #1
 800d52a:	e7f9      	b.n	800d520 <memset+0x4>

0800d52c <_free_r>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	4605      	mov	r5, r0
 800d530:	2900      	cmp	r1, #0
 800d532:	d040      	beq.n	800d5b6 <_free_r+0x8a>
 800d534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d538:	1f0c      	subs	r4, r1, #4
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	bfb8      	it	lt
 800d53e:	18e4      	addlt	r4, r4, r3
 800d540:	f000 fa10 	bl	800d964 <__malloc_lock>
 800d544:	4a1c      	ldr	r2, [pc, #112]	; (800d5b8 <_free_r+0x8c>)
 800d546:	6813      	ldr	r3, [r2, #0]
 800d548:	b933      	cbnz	r3, 800d558 <_free_r+0x2c>
 800d54a:	6063      	str	r3, [r4, #4]
 800d54c:	6014      	str	r4, [r2, #0]
 800d54e:	4628      	mov	r0, r5
 800d550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d554:	f000 ba0c 	b.w	800d970 <__malloc_unlock>
 800d558:	42a3      	cmp	r3, r4
 800d55a:	d908      	bls.n	800d56e <_free_r+0x42>
 800d55c:	6820      	ldr	r0, [r4, #0]
 800d55e:	1821      	adds	r1, r4, r0
 800d560:	428b      	cmp	r3, r1
 800d562:	bf01      	itttt	eq
 800d564:	6819      	ldreq	r1, [r3, #0]
 800d566:	685b      	ldreq	r3, [r3, #4]
 800d568:	1809      	addeq	r1, r1, r0
 800d56a:	6021      	streq	r1, [r4, #0]
 800d56c:	e7ed      	b.n	800d54a <_free_r+0x1e>
 800d56e:	461a      	mov	r2, r3
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	b10b      	cbz	r3, 800d578 <_free_r+0x4c>
 800d574:	42a3      	cmp	r3, r4
 800d576:	d9fa      	bls.n	800d56e <_free_r+0x42>
 800d578:	6811      	ldr	r1, [r2, #0]
 800d57a:	1850      	adds	r0, r2, r1
 800d57c:	42a0      	cmp	r0, r4
 800d57e:	d10b      	bne.n	800d598 <_free_r+0x6c>
 800d580:	6820      	ldr	r0, [r4, #0]
 800d582:	4401      	add	r1, r0
 800d584:	1850      	adds	r0, r2, r1
 800d586:	4283      	cmp	r3, r0
 800d588:	6011      	str	r1, [r2, #0]
 800d58a:	d1e0      	bne.n	800d54e <_free_r+0x22>
 800d58c:	6818      	ldr	r0, [r3, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	4401      	add	r1, r0
 800d592:	6011      	str	r1, [r2, #0]
 800d594:	6053      	str	r3, [r2, #4]
 800d596:	e7da      	b.n	800d54e <_free_r+0x22>
 800d598:	d902      	bls.n	800d5a0 <_free_r+0x74>
 800d59a:	230c      	movs	r3, #12
 800d59c:	602b      	str	r3, [r5, #0]
 800d59e:	e7d6      	b.n	800d54e <_free_r+0x22>
 800d5a0:	6820      	ldr	r0, [r4, #0]
 800d5a2:	1821      	adds	r1, r4, r0
 800d5a4:	428b      	cmp	r3, r1
 800d5a6:	bf01      	itttt	eq
 800d5a8:	6819      	ldreq	r1, [r3, #0]
 800d5aa:	685b      	ldreq	r3, [r3, #4]
 800d5ac:	1809      	addeq	r1, r1, r0
 800d5ae:	6021      	streq	r1, [r4, #0]
 800d5b0:	6063      	str	r3, [r4, #4]
 800d5b2:	6054      	str	r4, [r2, #4]
 800d5b4:	e7cb      	b.n	800d54e <_free_r+0x22>
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
 800d5b8:	2000a2a0 	.word	0x2000a2a0

0800d5bc <sbrk_aligned>:
 800d5bc:	b570      	push	{r4, r5, r6, lr}
 800d5be:	4e0e      	ldr	r6, [pc, #56]	; (800d5f8 <sbrk_aligned+0x3c>)
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	6831      	ldr	r1, [r6, #0]
 800d5c4:	4605      	mov	r5, r0
 800d5c6:	b911      	cbnz	r1, 800d5ce <sbrk_aligned+0x12>
 800d5c8:	f000 f8a4 	bl	800d714 <_sbrk_r>
 800d5cc:	6030      	str	r0, [r6, #0]
 800d5ce:	4621      	mov	r1, r4
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	f000 f89f 	bl	800d714 <_sbrk_r>
 800d5d6:	1c43      	adds	r3, r0, #1
 800d5d8:	d00a      	beq.n	800d5f0 <sbrk_aligned+0x34>
 800d5da:	1cc4      	adds	r4, r0, #3
 800d5dc:	f024 0403 	bic.w	r4, r4, #3
 800d5e0:	42a0      	cmp	r0, r4
 800d5e2:	d007      	beq.n	800d5f4 <sbrk_aligned+0x38>
 800d5e4:	1a21      	subs	r1, r4, r0
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	f000 f894 	bl	800d714 <_sbrk_r>
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	d101      	bne.n	800d5f4 <sbrk_aligned+0x38>
 800d5f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	bd70      	pop	{r4, r5, r6, pc}
 800d5f8:	2000a2a4 	.word	0x2000a2a4

0800d5fc <_malloc_r>:
 800d5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d600:	1ccd      	adds	r5, r1, #3
 800d602:	f025 0503 	bic.w	r5, r5, #3
 800d606:	3508      	adds	r5, #8
 800d608:	2d0c      	cmp	r5, #12
 800d60a:	bf38      	it	cc
 800d60c:	250c      	movcc	r5, #12
 800d60e:	2d00      	cmp	r5, #0
 800d610:	4607      	mov	r7, r0
 800d612:	db01      	blt.n	800d618 <_malloc_r+0x1c>
 800d614:	42a9      	cmp	r1, r5
 800d616:	d905      	bls.n	800d624 <_malloc_r+0x28>
 800d618:	230c      	movs	r3, #12
 800d61a:	2600      	movs	r6, #0
 800d61c:	603b      	str	r3, [r7, #0]
 800d61e:	4630      	mov	r0, r6
 800d620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d624:	4e2e      	ldr	r6, [pc, #184]	; (800d6e0 <_malloc_r+0xe4>)
 800d626:	f000 f99d 	bl	800d964 <__malloc_lock>
 800d62a:	6833      	ldr	r3, [r6, #0]
 800d62c:	461c      	mov	r4, r3
 800d62e:	bb34      	cbnz	r4, 800d67e <_malloc_r+0x82>
 800d630:	4629      	mov	r1, r5
 800d632:	4638      	mov	r0, r7
 800d634:	f7ff ffc2 	bl	800d5bc <sbrk_aligned>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	4604      	mov	r4, r0
 800d63c:	d14d      	bne.n	800d6da <_malloc_r+0xde>
 800d63e:	6834      	ldr	r4, [r6, #0]
 800d640:	4626      	mov	r6, r4
 800d642:	2e00      	cmp	r6, #0
 800d644:	d140      	bne.n	800d6c8 <_malloc_r+0xcc>
 800d646:	6823      	ldr	r3, [r4, #0]
 800d648:	4631      	mov	r1, r6
 800d64a:	4638      	mov	r0, r7
 800d64c:	eb04 0803 	add.w	r8, r4, r3
 800d650:	f000 f860 	bl	800d714 <_sbrk_r>
 800d654:	4580      	cmp	r8, r0
 800d656:	d13a      	bne.n	800d6ce <_malloc_r+0xd2>
 800d658:	6821      	ldr	r1, [r4, #0]
 800d65a:	3503      	adds	r5, #3
 800d65c:	1a6d      	subs	r5, r5, r1
 800d65e:	f025 0503 	bic.w	r5, r5, #3
 800d662:	3508      	adds	r5, #8
 800d664:	2d0c      	cmp	r5, #12
 800d666:	bf38      	it	cc
 800d668:	250c      	movcc	r5, #12
 800d66a:	4638      	mov	r0, r7
 800d66c:	4629      	mov	r1, r5
 800d66e:	f7ff ffa5 	bl	800d5bc <sbrk_aligned>
 800d672:	3001      	adds	r0, #1
 800d674:	d02b      	beq.n	800d6ce <_malloc_r+0xd2>
 800d676:	6823      	ldr	r3, [r4, #0]
 800d678:	442b      	add	r3, r5
 800d67a:	6023      	str	r3, [r4, #0]
 800d67c:	e00e      	b.n	800d69c <_malloc_r+0xa0>
 800d67e:	6822      	ldr	r2, [r4, #0]
 800d680:	1b52      	subs	r2, r2, r5
 800d682:	d41e      	bmi.n	800d6c2 <_malloc_r+0xc6>
 800d684:	2a0b      	cmp	r2, #11
 800d686:	d916      	bls.n	800d6b6 <_malloc_r+0xba>
 800d688:	1961      	adds	r1, r4, r5
 800d68a:	42a3      	cmp	r3, r4
 800d68c:	6025      	str	r5, [r4, #0]
 800d68e:	bf18      	it	ne
 800d690:	6059      	strne	r1, [r3, #4]
 800d692:	6863      	ldr	r3, [r4, #4]
 800d694:	bf08      	it	eq
 800d696:	6031      	streq	r1, [r6, #0]
 800d698:	5162      	str	r2, [r4, r5]
 800d69a:	604b      	str	r3, [r1, #4]
 800d69c:	4638      	mov	r0, r7
 800d69e:	f104 060b 	add.w	r6, r4, #11
 800d6a2:	f000 f965 	bl	800d970 <__malloc_unlock>
 800d6a6:	f026 0607 	bic.w	r6, r6, #7
 800d6aa:	1d23      	adds	r3, r4, #4
 800d6ac:	1af2      	subs	r2, r6, r3
 800d6ae:	d0b6      	beq.n	800d61e <_malloc_r+0x22>
 800d6b0:	1b9b      	subs	r3, r3, r6
 800d6b2:	50a3      	str	r3, [r4, r2]
 800d6b4:	e7b3      	b.n	800d61e <_malloc_r+0x22>
 800d6b6:	6862      	ldr	r2, [r4, #4]
 800d6b8:	42a3      	cmp	r3, r4
 800d6ba:	bf0c      	ite	eq
 800d6bc:	6032      	streq	r2, [r6, #0]
 800d6be:	605a      	strne	r2, [r3, #4]
 800d6c0:	e7ec      	b.n	800d69c <_malloc_r+0xa0>
 800d6c2:	4623      	mov	r3, r4
 800d6c4:	6864      	ldr	r4, [r4, #4]
 800d6c6:	e7b2      	b.n	800d62e <_malloc_r+0x32>
 800d6c8:	4634      	mov	r4, r6
 800d6ca:	6876      	ldr	r6, [r6, #4]
 800d6cc:	e7b9      	b.n	800d642 <_malloc_r+0x46>
 800d6ce:	230c      	movs	r3, #12
 800d6d0:	4638      	mov	r0, r7
 800d6d2:	603b      	str	r3, [r7, #0]
 800d6d4:	f000 f94c 	bl	800d970 <__malloc_unlock>
 800d6d8:	e7a1      	b.n	800d61e <_malloc_r+0x22>
 800d6da:	6025      	str	r5, [r4, #0]
 800d6dc:	e7de      	b.n	800d69c <_malloc_r+0xa0>
 800d6de:	bf00      	nop
 800d6e0:	2000a2a0 	.word	0x2000a2a0

0800d6e4 <iprintf>:
 800d6e4:	b40f      	push	{r0, r1, r2, r3}
 800d6e6:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <iprintf+0x2c>)
 800d6e8:	b513      	push	{r0, r1, r4, lr}
 800d6ea:	681c      	ldr	r4, [r3, #0]
 800d6ec:	b124      	cbz	r4, 800d6f8 <iprintf+0x14>
 800d6ee:	69a3      	ldr	r3, [r4, #24]
 800d6f0:	b913      	cbnz	r3, 800d6f8 <iprintf+0x14>
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	f000 f896 	bl	800d824 <__sinit>
 800d6f8:	ab05      	add	r3, sp, #20
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	9a04      	ldr	r2, [sp, #16]
 800d6fe:	68a1      	ldr	r1, [r4, #8]
 800d700:	9301      	str	r3, [sp, #4]
 800d702:	f000 fabf 	bl	800dc84 <_vfiprintf_r>
 800d706:	b002      	add	sp, #8
 800d708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d70c:	b004      	add	sp, #16
 800d70e:	4770      	bx	lr
 800d710:	20000018 	.word	0x20000018

0800d714 <_sbrk_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	2300      	movs	r3, #0
 800d718:	4d05      	ldr	r5, [pc, #20]	; (800d730 <_sbrk_r+0x1c>)
 800d71a:	4604      	mov	r4, r0
 800d71c:	4608      	mov	r0, r1
 800d71e:	602b      	str	r3, [r5, #0]
 800d720:	f7f3 f9d6 	bl	8000ad0 <_sbrk>
 800d724:	1c43      	adds	r3, r0, #1
 800d726:	d102      	bne.n	800d72e <_sbrk_r+0x1a>
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	b103      	cbz	r3, 800d72e <_sbrk_r+0x1a>
 800d72c:	6023      	str	r3, [r4, #0]
 800d72e:	bd38      	pop	{r3, r4, r5, pc}
 800d730:	2000a2a8 	.word	0x2000a2a8

0800d734 <siprintf>:
 800d734:	b40e      	push	{r1, r2, r3}
 800d736:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d73a:	b500      	push	{lr}
 800d73c:	b09c      	sub	sp, #112	; 0x70
 800d73e:	ab1d      	add	r3, sp, #116	; 0x74
 800d740:	9002      	str	r0, [sp, #8]
 800d742:	9006      	str	r0, [sp, #24]
 800d744:	9107      	str	r1, [sp, #28]
 800d746:	9104      	str	r1, [sp, #16]
 800d748:	4808      	ldr	r0, [pc, #32]	; (800d76c <siprintf+0x38>)
 800d74a:	4909      	ldr	r1, [pc, #36]	; (800d770 <siprintf+0x3c>)
 800d74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d750:	9105      	str	r1, [sp, #20]
 800d752:	6800      	ldr	r0, [r0, #0]
 800d754:	a902      	add	r1, sp, #8
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	f000 f96c 	bl	800da34 <_svfiprintf_r>
 800d75c:	2200      	movs	r2, #0
 800d75e:	9b02      	ldr	r3, [sp, #8]
 800d760:	701a      	strb	r2, [r3, #0]
 800d762:	b01c      	add	sp, #112	; 0x70
 800d764:	f85d eb04 	ldr.w	lr, [sp], #4
 800d768:	b003      	add	sp, #12
 800d76a:	4770      	bx	lr
 800d76c:	20000018 	.word	0x20000018
 800d770:	ffff0208 	.word	0xffff0208

0800d774 <std>:
 800d774:	2300      	movs	r3, #0
 800d776:	b510      	push	{r4, lr}
 800d778:	4604      	mov	r4, r0
 800d77a:	e9c0 3300 	strd	r3, r3, [r0]
 800d77e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d782:	6083      	str	r3, [r0, #8]
 800d784:	8181      	strh	r1, [r0, #12]
 800d786:	6643      	str	r3, [r0, #100]	; 0x64
 800d788:	81c2      	strh	r2, [r0, #14]
 800d78a:	6183      	str	r3, [r0, #24]
 800d78c:	4619      	mov	r1, r3
 800d78e:	2208      	movs	r2, #8
 800d790:	305c      	adds	r0, #92	; 0x5c
 800d792:	f7ff fec3 	bl	800d51c <memset>
 800d796:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <std+0x38>)
 800d798:	6224      	str	r4, [r4, #32]
 800d79a:	6263      	str	r3, [r4, #36]	; 0x24
 800d79c:	4b04      	ldr	r3, [pc, #16]	; (800d7b0 <std+0x3c>)
 800d79e:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7a0:	4b04      	ldr	r3, [pc, #16]	; (800d7b4 <std+0x40>)
 800d7a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7a4:	4b04      	ldr	r3, [pc, #16]	; (800d7b8 <std+0x44>)
 800d7a6:	6323      	str	r3, [r4, #48]	; 0x30
 800d7a8:	bd10      	pop	{r4, pc}
 800d7aa:	bf00      	nop
 800d7ac:	0800e211 	.word	0x0800e211
 800d7b0:	0800e233 	.word	0x0800e233
 800d7b4:	0800e26b 	.word	0x0800e26b
 800d7b8:	0800e28f 	.word	0x0800e28f

0800d7bc <_cleanup_r>:
 800d7bc:	4901      	ldr	r1, [pc, #4]	; (800d7c4 <_cleanup_r+0x8>)
 800d7be:	f000 b8af 	b.w	800d920 <_fwalk_reent>
 800d7c2:	bf00      	nop
 800d7c4:	0800e561 	.word	0x0800e561

0800d7c8 <__sfmoreglue>:
 800d7c8:	2268      	movs	r2, #104	; 0x68
 800d7ca:	b570      	push	{r4, r5, r6, lr}
 800d7cc:	1e4d      	subs	r5, r1, #1
 800d7ce:	4355      	muls	r5, r2
 800d7d0:	460e      	mov	r6, r1
 800d7d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7d6:	f7ff ff11 	bl	800d5fc <_malloc_r>
 800d7da:	4604      	mov	r4, r0
 800d7dc:	b140      	cbz	r0, 800d7f0 <__sfmoreglue+0x28>
 800d7de:	2100      	movs	r1, #0
 800d7e0:	e9c0 1600 	strd	r1, r6, [r0]
 800d7e4:	300c      	adds	r0, #12
 800d7e6:	60a0      	str	r0, [r4, #8]
 800d7e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7ec:	f7ff fe96 	bl	800d51c <memset>
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	bd70      	pop	{r4, r5, r6, pc}

0800d7f4 <__sfp_lock_acquire>:
 800d7f4:	4801      	ldr	r0, [pc, #4]	; (800d7fc <__sfp_lock_acquire+0x8>)
 800d7f6:	f000 b8b3 	b.w	800d960 <__retarget_lock_acquire_recursive>
 800d7fa:	bf00      	nop
 800d7fc:	2000a2ad 	.word	0x2000a2ad

0800d800 <__sfp_lock_release>:
 800d800:	4801      	ldr	r0, [pc, #4]	; (800d808 <__sfp_lock_release+0x8>)
 800d802:	f000 b8ae 	b.w	800d962 <__retarget_lock_release_recursive>
 800d806:	bf00      	nop
 800d808:	2000a2ad 	.word	0x2000a2ad

0800d80c <__sinit_lock_acquire>:
 800d80c:	4801      	ldr	r0, [pc, #4]	; (800d814 <__sinit_lock_acquire+0x8>)
 800d80e:	f000 b8a7 	b.w	800d960 <__retarget_lock_acquire_recursive>
 800d812:	bf00      	nop
 800d814:	2000a2ae 	.word	0x2000a2ae

0800d818 <__sinit_lock_release>:
 800d818:	4801      	ldr	r0, [pc, #4]	; (800d820 <__sinit_lock_release+0x8>)
 800d81a:	f000 b8a2 	b.w	800d962 <__retarget_lock_release_recursive>
 800d81e:	bf00      	nop
 800d820:	2000a2ae 	.word	0x2000a2ae

0800d824 <__sinit>:
 800d824:	b510      	push	{r4, lr}
 800d826:	4604      	mov	r4, r0
 800d828:	f7ff fff0 	bl	800d80c <__sinit_lock_acquire>
 800d82c:	69a3      	ldr	r3, [r4, #24]
 800d82e:	b11b      	cbz	r3, 800d838 <__sinit+0x14>
 800d830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d834:	f7ff bff0 	b.w	800d818 <__sinit_lock_release>
 800d838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d83c:	6523      	str	r3, [r4, #80]	; 0x50
 800d83e:	4b13      	ldr	r3, [pc, #76]	; (800d88c <__sinit+0x68>)
 800d840:	4a13      	ldr	r2, [pc, #76]	; (800d890 <__sinit+0x6c>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	62a2      	str	r2, [r4, #40]	; 0x28
 800d846:	42a3      	cmp	r3, r4
 800d848:	bf08      	it	eq
 800d84a:	2301      	moveq	r3, #1
 800d84c:	4620      	mov	r0, r4
 800d84e:	bf08      	it	eq
 800d850:	61a3      	streq	r3, [r4, #24]
 800d852:	f000 f81f 	bl	800d894 <__sfp>
 800d856:	6060      	str	r0, [r4, #4]
 800d858:	4620      	mov	r0, r4
 800d85a:	f000 f81b 	bl	800d894 <__sfp>
 800d85e:	60a0      	str	r0, [r4, #8]
 800d860:	4620      	mov	r0, r4
 800d862:	f000 f817 	bl	800d894 <__sfp>
 800d866:	2200      	movs	r2, #0
 800d868:	2104      	movs	r1, #4
 800d86a:	60e0      	str	r0, [r4, #12]
 800d86c:	6860      	ldr	r0, [r4, #4]
 800d86e:	f7ff ff81 	bl	800d774 <std>
 800d872:	2201      	movs	r2, #1
 800d874:	2109      	movs	r1, #9
 800d876:	68a0      	ldr	r0, [r4, #8]
 800d878:	f7ff ff7c 	bl	800d774 <std>
 800d87c:	2202      	movs	r2, #2
 800d87e:	2112      	movs	r1, #18
 800d880:	68e0      	ldr	r0, [r4, #12]
 800d882:	f7ff ff77 	bl	800d774 <std>
 800d886:	2301      	movs	r3, #1
 800d888:	61a3      	str	r3, [r4, #24]
 800d88a:	e7d1      	b.n	800d830 <__sinit+0xc>
 800d88c:	08010650 	.word	0x08010650
 800d890:	0800d7bd 	.word	0x0800d7bd

0800d894 <__sfp>:
 800d894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d896:	4607      	mov	r7, r0
 800d898:	f7ff ffac 	bl	800d7f4 <__sfp_lock_acquire>
 800d89c:	4b1e      	ldr	r3, [pc, #120]	; (800d918 <__sfp+0x84>)
 800d89e:	681e      	ldr	r6, [r3, #0]
 800d8a0:	69b3      	ldr	r3, [r6, #24]
 800d8a2:	b913      	cbnz	r3, 800d8aa <__sfp+0x16>
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f7ff ffbd 	bl	800d824 <__sinit>
 800d8aa:	3648      	adds	r6, #72	; 0x48
 800d8ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	d503      	bpl.n	800d8bc <__sfp+0x28>
 800d8b4:	6833      	ldr	r3, [r6, #0]
 800d8b6:	b30b      	cbz	r3, 800d8fc <__sfp+0x68>
 800d8b8:	6836      	ldr	r6, [r6, #0]
 800d8ba:	e7f7      	b.n	800d8ac <__sfp+0x18>
 800d8bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8c0:	b9d5      	cbnz	r5, 800d8f8 <__sfp+0x64>
 800d8c2:	4b16      	ldr	r3, [pc, #88]	; (800d91c <__sfp+0x88>)
 800d8c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8c8:	60e3      	str	r3, [r4, #12]
 800d8ca:	6665      	str	r5, [r4, #100]	; 0x64
 800d8cc:	f000 f847 	bl	800d95e <__retarget_lock_init_recursive>
 800d8d0:	f7ff ff96 	bl	800d800 <__sfp_lock_release>
 800d8d4:	2208      	movs	r2, #8
 800d8d6:	4629      	mov	r1, r5
 800d8d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8e0:	6025      	str	r5, [r4, #0]
 800d8e2:	61a5      	str	r5, [r4, #24]
 800d8e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8e8:	f7ff fe18 	bl	800d51c <memset>
 800d8ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8f8:	3468      	adds	r4, #104	; 0x68
 800d8fa:	e7d9      	b.n	800d8b0 <__sfp+0x1c>
 800d8fc:	2104      	movs	r1, #4
 800d8fe:	4638      	mov	r0, r7
 800d900:	f7ff ff62 	bl	800d7c8 <__sfmoreglue>
 800d904:	4604      	mov	r4, r0
 800d906:	6030      	str	r0, [r6, #0]
 800d908:	2800      	cmp	r0, #0
 800d90a:	d1d5      	bne.n	800d8b8 <__sfp+0x24>
 800d90c:	f7ff ff78 	bl	800d800 <__sfp_lock_release>
 800d910:	230c      	movs	r3, #12
 800d912:	603b      	str	r3, [r7, #0]
 800d914:	e7ee      	b.n	800d8f4 <__sfp+0x60>
 800d916:	bf00      	nop
 800d918:	08010650 	.word	0x08010650
 800d91c:	ffff0001 	.word	0xffff0001

0800d920 <_fwalk_reent>:
 800d920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d924:	4606      	mov	r6, r0
 800d926:	4688      	mov	r8, r1
 800d928:	2700      	movs	r7, #0
 800d92a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d92e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d932:	f1b9 0901 	subs.w	r9, r9, #1
 800d936:	d505      	bpl.n	800d944 <_fwalk_reent+0x24>
 800d938:	6824      	ldr	r4, [r4, #0]
 800d93a:	2c00      	cmp	r4, #0
 800d93c:	d1f7      	bne.n	800d92e <_fwalk_reent+0xe>
 800d93e:	4638      	mov	r0, r7
 800d940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d944:	89ab      	ldrh	r3, [r5, #12]
 800d946:	2b01      	cmp	r3, #1
 800d948:	d907      	bls.n	800d95a <_fwalk_reent+0x3a>
 800d94a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d94e:	3301      	adds	r3, #1
 800d950:	d003      	beq.n	800d95a <_fwalk_reent+0x3a>
 800d952:	4629      	mov	r1, r5
 800d954:	4630      	mov	r0, r6
 800d956:	47c0      	blx	r8
 800d958:	4307      	orrs	r7, r0
 800d95a:	3568      	adds	r5, #104	; 0x68
 800d95c:	e7e9      	b.n	800d932 <_fwalk_reent+0x12>

0800d95e <__retarget_lock_init_recursive>:
 800d95e:	4770      	bx	lr

0800d960 <__retarget_lock_acquire_recursive>:
 800d960:	4770      	bx	lr

0800d962 <__retarget_lock_release_recursive>:
 800d962:	4770      	bx	lr

0800d964 <__malloc_lock>:
 800d964:	4801      	ldr	r0, [pc, #4]	; (800d96c <__malloc_lock+0x8>)
 800d966:	f7ff bffb 	b.w	800d960 <__retarget_lock_acquire_recursive>
 800d96a:	bf00      	nop
 800d96c:	2000a2ac 	.word	0x2000a2ac

0800d970 <__malloc_unlock>:
 800d970:	4801      	ldr	r0, [pc, #4]	; (800d978 <__malloc_unlock+0x8>)
 800d972:	f7ff bff6 	b.w	800d962 <__retarget_lock_release_recursive>
 800d976:	bf00      	nop
 800d978:	2000a2ac 	.word	0x2000a2ac

0800d97c <__ssputs_r>:
 800d97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d980:	688e      	ldr	r6, [r1, #8]
 800d982:	4682      	mov	sl, r0
 800d984:	429e      	cmp	r6, r3
 800d986:	460c      	mov	r4, r1
 800d988:	4690      	mov	r8, r2
 800d98a:	461f      	mov	r7, r3
 800d98c:	d838      	bhi.n	800da00 <__ssputs_r+0x84>
 800d98e:	898a      	ldrh	r2, [r1, #12]
 800d990:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d994:	d032      	beq.n	800d9fc <__ssputs_r+0x80>
 800d996:	6825      	ldr	r5, [r4, #0]
 800d998:	6909      	ldr	r1, [r1, #16]
 800d99a:	3301      	adds	r3, #1
 800d99c:	eba5 0901 	sub.w	r9, r5, r1
 800d9a0:	6965      	ldr	r5, [r4, #20]
 800d9a2:	444b      	add	r3, r9
 800d9a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9ac:	106d      	asrs	r5, r5, #1
 800d9ae:	429d      	cmp	r5, r3
 800d9b0:	bf38      	it	cc
 800d9b2:	461d      	movcc	r5, r3
 800d9b4:	0553      	lsls	r3, r2, #21
 800d9b6:	d531      	bpl.n	800da1c <__ssputs_r+0xa0>
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7ff fe1f 	bl	800d5fc <_malloc_r>
 800d9be:	4606      	mov	r6, r0
 800d9c0:	b950      	cbnz	r0, 800d9d8 <__ssputs_r+0x5c>
 800d9c2:	230c      	movs	r3, #12
 800d9c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9c8:	f8ca 3000 	str.w	r3, [sl]
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9d2:	81a3      	strh	r3, [r4, #12]
 800d9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d8:	464a      	mov	r2, r9
 800d9da:	6921      	ldr	r1, [r4, #16]
 800d9dc:	f7ff fd90 	bl	800d500 <memcpy>
 800d9e0:	89a3      	ldrh	r3, [r4, #12]
 800d9e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9ea:	81a3      	strh	r3, [r4, #12]
 800d9ec:	6126      	str	r6, [r4, #16]
 800d9ee:	444e      	add	r6, r9
 800d9f0:	6026      	str	r6, [r4, #0]
 800d9f2:	463e      	mov	r6, r7
 800d9f4:	6165      	str	r5, [r4, #20]
 800d9f6:	eba5 0509 	sub.w	r5, r5, r9
 800d9fa:	60a5      	str	r5, [r4, #8]
 800d9fc:	42be      	cmp	r6, r7
 800d9fe:	d900      	bls.n	800da02 <__ssputs_r+0x86>
 800da00:	463e      	mov	r6, r7
 800da02:	4632      	mov	r2, r6
 800da04:	4641      	mov	r1, r8
 800da06:	6820      	ldr	r0, [r4, #0]
 800da08:	f000 fe6c 	bl	800e6e4 <memmove>
 800da0c:	68a3      	ldr	r3, [r4, #8]
 800da0e:	2000      	movs	r0, #0
 800da10:	1b9b      	subs	r3, r3, r6
 800da12:	60a3      	str	r3, [r4, #8]
 800da14:	6823      	ldr	r3, [r4, #0]
 800da16:	4433      	add	r3, r6
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	e7db      	b.n	800d9d4 <__ssputs_r+0x58>
 800da1c:	462a      	mov	r2, r5
 800da1e:	f000 fe7b 	bl	800e718 <_realloc_r>
 800da22:	4606      	mov	r6, r0
 800da24:	2800      	cmp	r0, #0
 800da26:	d1e1      	bne.n	800d9ec <__ssputs_r+0x70>
 800da28:	4650      	mov	r0, sl
 800da2a:	6921      	ldr	r1, [r4, #16]
 800da2c:	f7ff fd7e 	bl	800d52c <_free_r>
 800da30:	e7c7      	b.n	800d9c2 <__ssputs_r+0x46>
	...

0800da34 <_svfiprintf_r>:
 800da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da38:	4698      	mov	r8, r3
 800da3a:	898b      	ldrh	r3, [r1, #12]
 800da3c:	4607      	mov	r7, r0
 800da3e:	061b      	lsls	r3, r3, #24
 800da40:	460d      	mov	r5, r1
 800da42:	4614      	mov	r4, r2
 800da44:	b09d      	sub	sp, #116	; 0x74
 800da46:	d50e      	bpl.n	800da66 <_svfiprintf_r+0x32>
 800da48:	690b      	ldr	r3, [r1, #16]
 800da4a:	b963      	cbnz	r3, 800da66 <_svfiprintf_r+0x32>
 800da4c:	2140      	movs	r1, #64	; 0x40
 800da4e:	f7ff fdd5 	bl	800d5fc <_malloc_r>
 800da52:	6028      	str	r0, [r5, #0]
 800da54:	6128      	str	r0, [r5, #16]
 800da56:	b920      	cbnz	r0, 800da62 <_svfiprintf_r+0x2e>
 800da58:	230c      	movs	r3, #12
 800da5a:	603b      	str	r3, [r7, #0]
 800da5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da60:	e0d1      	b.n	800dc06 <_svfiprintf_r+0x1d2>
 800da62:	2340      	movs	r3, #64	; 0x40
 800da64:	616b      	str	r3, [r5, #20]
 800da66:	2300      	movs	r3, #0
 800da68:	9309      	str	r3, [sp, #36]	; 0x24
 800da6a:	2320      	movs	r3, #32
 800da6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da70:	2330      	movs	r3, #48	; 0x30
 800da72:	f04f 0901 	mov.w	r9, #1
 800da76:	f8cd 800c 	str.w	r8, [sp, #12]
 800da7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dc20 <_svfiprintf_r+0x1ec>
 800da7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da82:	4623      	mov	r3, r4
 800da84:	469a      	mov	sl, r3
 800da86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da8a:	b10a      	cbz	r2, 800da90 <_svfiprintf_r+0x5c>
 800da8c:	2a25      	cmp	r2, #37	; 0x25
 800da8e:	d1f9      	bne.n	800da84 <_svfiprintf_r+0x50>
 800da90:	ebba 0b04 	subs.w	fp, sl, r4
 800da94:	d00b      	beq.n	800daae <_svfiprintf_r+0x7a>
 800da96:	465b      	mov	r3, fp
 800da98:	4622      	mov	r2, r4
 800da9a:	4629      	mov	r1, r5
 800da9c:	4638      	mov	r0, r7
 800da9e:	f7ff ff6d 	bl	800d97c <__ssputs_r>
 800daa2:	3001      	adds	r0, #1
 800daa4:	f000 80aa 	beq.w	800dbfc <_svfiprintf_r+0x1c8>
 800daa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daaa:	445a      	add	r2, fp
 800daac:	9209      	str	r2, [sp, #36]	; 0x24
 800daae:	f89a 3000 	ldrb.w	r3, [sl]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f000 80a2 	beq.w	800dbfc <_svfiprintf_r+0x1c8>
 800dab8:	2300      	movs	r3, #0
 800daba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dabe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dac2:	f10a 0a01 	add.w	sl, sl, #1
 800dac6:	9304      	str	r3, [sp, #16]
 800dac8:	9307      	str	r3, [sp, #28]
 800daca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dace:	931a      	str	r3, [sp, #104]	; 0x68
 800dad0:	4654      	mov	r4, sl
 800dad2:	2205      	movs	r2, #5
 800dad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dad8:	4851      	ldr	r0, [pc, #324]	; (800dc20 <_svfiprintf_r+0x1ec>)
 800dada:	f000 fdf5 	bl	800e6c8 <memchr>
 800dade:	9a04      	ldr	r2, [sp, #16]
 800dae0:	b9d8      	cbnz	r0, 800db1a <_svfiprintf_r+0xe6>
 800dae2:	06d0      	lsls	r0, r2, #27
 800dae4:	bf44      	itt	mi
 800dae6:	2320      	movmi	r3, #32
 800dae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daec:	0711      	lsls	r1, r2, #28
 800daee:	bf44      	itt	mi
 800daf0:	232b      	movmi	r3, #43	; 0x2b
 800daf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daf6:	f89a 3000 	ldrb.w	r3, [sl]
 800dafa:	2b2a      	cmp	r3, #42	; 0x2a
 800dafc:	d015      	beq.n	800db2a <_svfiprintf_r+0xf6>
 800dafe:	4654      	mov	r4, sl
 800db00:	2000      	movs	r0, #0
 800db02:	f04f 0c0a 	mov.w	ip, #10
 800db06:	9a07      	ldr	r2, [sp, #28]
 800db08:	4621      	mov	r1, r4
 800db0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db0e:	3b30      	subs	r3, #48	; 0x30
 800db10:	2b09      	cmp	r3, #9
 800db12:	d94e      	bls.n	800dbb2 <_svfiprintf_r+0x17e>
 800db14:	b1b0      	cbz	r0, 800db44 <_svfiprintf_r+0x110>
 800db16:	9207      	str	r2, [sp, #28]
 800db18:	e014      	b.n	800db44 <_svfiprintf_r+0x110>
 800db1a:	eba0 0308 	sub.w	r3, r0, r8
 800db1e:	fa09 f303 	lsl.w	r3, r9, r3
 800db22:	4313      	orrs	r3, r2
 800db24:	46a2      	mov	sl, r4
 800db26:	9304      	str	r3, [sp, #16]
 800db28:	e7d2      	b.n	800dad0 <_svfiprintf_r+0x9c>
 800db2a:	9b03      	ldr	r3, [sp, #12]
 800db2c:	1d19      	adds	r1, r3, #4
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	9103      	str	r1, [sp, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	bfbb      	ittet	lt
 800db36:	425b      	neglt	r3, r3
 800db38:	f042 0202 	orrlt.w	r2, r2, #2
 800db3c:	9307      	strge	r3, [sp, #28]
 800db3e:	9307      	strlt	r3, [sp, #28]
 800db40:	bfb8      	it	lt
 800db42:	9204      	strlt	r2, [sp, #16]
 800db44:	7823      	ldrb	r3, [r4, #0]
 800db46:	2b2e      	cmp	r3, #46	; 0x2e
 800db48:	d10c      	bne.n	800db64 <_svfiprintf_r+0x130>
 800db4a:	7863      	ldrb	r3, [r4, #1]
 800db4c:	2b2a      	cmp	r3, #42	; 0x2a
 800db4e:	d135      	bne.n	800dbbc <_svfiprintf_r+0x188>
 800db50:	9b03      	ldr	r3, [sp, #12]
 800db52:	3402      	adds	r4, #2
 800db54:	1d1a      	adds	r2, r3, #4
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	9203      	str	r2, [sp, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	bfb8      	it	lt
 800db5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800db62:	9305      	str	r3, [sp, #20]
 800db64:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800dc24 <_svfiprintf_r+0x1f0>
 800db68:	2203      	movs	r2, #3
 800db6a:	4650      	mov	r0, sl
 800db6c:	7821      	ldrb	r1, [r4, #0]
 800db6e:	f000 fdab 	bl	800e6c8 <memchr>
 800db72:	b140      	cbz	r0, 800db86 <_svfiprintf_r+0x152>
 800db74:	2340      	movs	r3, #64	; 0x40
 800db76:	eba0 000a 	sub.w	r0, r0, sl
 800db7a:	fa03 f000 	lsl.w	r0, r3, r0
 800db7e:	9b04      	ldr	r3, [sp, #16]
 800db80:	3401      	adds	r4, #1
 800db82:	4303      	orrs	r3, r0
 800db84:	9304      	str	r3, [sp, #16]
 800db86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db8a:	2206      	movs	r2, #6
 800db8c:	4826      	ldr	r0, [pc, #152]	; (800dc28 <_svfiprintf_r+0x1f4>)
 800db8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db92:	f000 fd99 	bl	800e6c8 <memchr>
 800db96:	2800      	cmp	r0, #0
 800db98:	d038      	beq.n	800dc0c <_svfiprintf_r+0x1d8>
 800db9a:	4b24      	ldr	r3, [pc, #144]	; (800dc2c <_svfiprintf_r+0x1f8>)
 800db9c:	bb1b      	cbnz	r3, 800dbe6 <_svfiprintf_r+0x1b2>
 800db9e:	9b03      	ldr	r3, [sp, #12]
 800dba0:	3307      	adds	r3, #7
 800dba2:	f023 0307 	bic.w	r3, r3, #7
 800dba6:	3308      	adds	r3, #8
 800dba8:	9303      	str	r3, [sp, #12]
 800dbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbac:	4433      	add	r3, r6
 800dbae:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb0:	e767      	b.n	800da82 <_svfiprintf_r+0x4e>
 800dbb2:	460c      	mov	r4, r1
 800dbb4:	2001      	movs	r0, #1
 800dbb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbba:	e7a5      	b.n	800db08 <_svfiprintf_r+0xd4>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f04f 0c0a 	mov.w	ip, #10
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	3401      	adds	r4, #1
 800dbc6:	9305      	str	r3, [sp, #20]
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbce:	3a30      	subs	r2, #48	; 0x30
 800dbd0:	2a09      	cmp	r2, #9
 800dbd2:	d903      	bls.n	800dbdc <_svfiprintf_r+0x1a8>
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d0c5      	beq.n	800db64 <_svfiprintf_r+0x130>
 800dbd8:	9105      	str	r1, [sp, #20]
 800dbda:	e7c3      	b.n	800db64 <_svfiprintf_r+0x130>
 800dbdc:	4604      	mov	r4, r0
 800dbde:	2301      	movs	r3, #1
 800dbe0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbe4:	e7f0      	b.n	800dbc8 <_svfiprintf_r+0x194>
 800dbe6:	ab03      	add	r3, sp, #12
 800dbe8:	9300      	str	r3, [sp, #0]
 800dbea:	462a      	mov	r2, r5
 800dbec:	4638      	mov	r0, r7
 800dbee:	4b10      	ldr	r3, [pc, #64]	; (800dc30 <_svfiprintf_r+0x1fc>)
 800dbf0:	a904      	add	r1, sp, #16
 800dbf2:	f3af 8000 	nop.w
 800dbf6:	1c42      	adds	r2, r0, #1
 800dbf8:	4606      	mov	r6, r0
 800dbfa:	d1d6      	bne.n	800dbaa <_svfiprintf_r+0x176>
 800dbfc:	89ab      	ldrh	r3, [r5, #12]
 800dbfe:	065b      	lsls	r3, r3, #25
 800dc00:	f53f af2c 	bmi.w	800da5c <_svfiprintf_r+0x28>
 800dc04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc06:	b01d      	add	sp, #116	; 0x74
 800dc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0c:	ab03      	add	r3, sp, #12
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	462a      	mov	r2, r5
 800dc12:	4638      	mov	r0, r7
 800dc14:	4b06      	ldr	r3, [pc, #24]	; (800dc30 <_svfiprintf_r+0x1fc>)
 800dc16:	a904      	add	r1, sp, #16
 800dc18:	f000 f9d4 	bl	800dfc4 <_printf_i>
 800dc1c:	e7eb      	b.n	800dbf6 <_svfiprintf_r+0x1c2>
 800dc1e:	bf00      	nop
 800dc20:	080106b4 	.word	0x080106b4
 800dc24:	080106ba 	.word	0x080106ba
 800dc28:	080106be 	.word	0x080106be
 800dc2c:	00000000 	.word	0x00000000
 800dc30:	0800d97d 	.word	0x0800d97d

0800dc34 <__sfputc_r>:
 800dc34:	6893      	ldr	r3, [r2, #8]
 800dc36:	b410      	push	{r4}
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	6093      	str	r3, [r2, #8]
 800dc3e:	da07      	bge.n	800dc50 <__sfputc_r+0x1c>
 800dc40:	6994      	ldr	r4, [r2, #24]
 800dc42:	42a3      	cmp	r3, r4
 800dc44:	db01      	blt.n	800dc4a <__sfputc_r+0x16>
 800dc46:	290a      	cmp	r1, #10
 800dc48:	d102      	bne.n	800dc50 <__sfputc_r+0x1c>
 800dc4a:	bc10      	pop	{r4}
 800dc4c:	f000 bb24 	b.w	800e298 <__swbuf_r>
 800dc50:	6813      	ldr	r3, [r2, #0]
 800dc52:	1c58      	adds	r0, r3, #1
 800dc54:	6010      	str	r0, [r2, #0]
 800dc56:	7019      	strb	r1, [r3, #0]
 800dc58:	4608      	mov	r0, r1
 800dc5a:	bc10      	pop	{r4}
 800dc5c:	4770      	bx	lr

0800dc5e <__sfputs_r>:
 800dc5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc60:	4606      	mov	r6, r0
 800dc62:	460f      	mov	r7, r1
 800dc64:	4614      	mov	r4, r2
 800dc66:	18d5      	adds	r5, r2, r3
 800dc68:	42ac      	cmp	r4, r5
 800dc6a:	d101      	bne.n	800dc70 <__sfputs_r+0x12>
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	e007      	b.n	800dc80 <__sfputs_r+0x22>
 800dc70:	463a      	mov	r2, r7
 800dc72:	4630      	mov	r0, r6
 800dc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc78:	f7ff ffdc 	bl	800dc34 <__sfputc_r>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d1f3      	bne.n	800dc68 <__sfputs_r+0xa>
 800dc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc84 <_vfiprintf_r>:
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	460d      	mov	r5, r1
 800dc8a:	4614      	mov	r4, r2
 800dc8c:	4698      	mov	r8, r3
 800dc8e:	4606      	mov	r6, r0
 800dc90:	b09d      	sub	sp, #116	; 0x74
 800dc92:	b118      	cbz	r0, 800dc9c <_vfiprintf_r+0x18>
 800dc94:	6983      	ldr	r3, [r0, #24]
 800dc96:	b90b      	cbnz	r3, 800dc9c <_vfiprintf_r+0x18>
 800dc98:	f7ff fdc4 	bl	800d824 <__sinit>
 800dc9c:	4b89      	ldr	r3, [pc, #548]	; (800dec4 <_vfiprintf_r+0x240>)
 800dc9e:	429d      	cmp	r5, r3
 800dca0:	d11b      	bne.n	800dcda <_vfiprintf_r+0x56>
 800dca2:	6875      	ldr	r5, [r6, #4]
 800dca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dca6:	07d9      	lsls	r1, r3, #31
 800dca8:	d405      	bmi.n	800dcb6 <_vfiprintf_r+0x32>
 800dcaa:	89ab      	ldrh	r3, [r5, #12]
 800dcac:	059a      	lsls	r2, r3, #22
 800dcae:	d402      	bmi.n	800dcb6 <_vfiprintf_r+0x32>
 800dcb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcb2:	f7ff fe55 	bl	800d960 <__retarget_lock_acquire_recursive>
 800dcb6:	89ab      	ldrh	r3, [r5, #12]
 800dcb8:	071b      	lsls	r3, r3, #28
 800dcba:	d501      	bpl.n	800dcc0 <_vfiprintf_r+0x3c>
 800dcbc:	692b      	ldr	r3, [r5, #16]
 800dcbe:	b9eb      	cbnz	r3, 800dcfc <_vfiprintf_r+0x78>
 800dcc0:	4629      	mov	r1, r5
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	f000 fb4c 	bl	800e360 <__swsetup_r>
 800dcc8:	b1c0      	cbz	r0, 800dcfc <_vfiprintf_r+0x78>
 800dcca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dccc:	07dc      	lsls	r4, r3, #31
 800dcce:	d50e      	bpl.n	800dcee <_vfiprintf_r+0x6a>
 800dcd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcd4:	b01d      	add	sp, #116	; 0x74
 800dcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcda:	4b7b      	ldr	r3, [pc, #492]	; (800dec8 <_vfiprintf_r+0x244>)
 800dcdc:	429d      	cmp	r5, r3
 800dcde:	d101      	bne.n	800dce4 <_vfiprintf_r+0x60>
 800dce0:	68b5      	ldr	r5, [r6, #8]
 800dce2:	e7df      	b.n	800dca4 <_vfiprintf_r+0x20>
 800dce4:	4b79      	ldr	r3, [pc, #484]	; (800decc <_vfiprintf_r+0x248>)
 800dce6:	429d      	cmp	r5, r3
 800dce8:	bf08      	it	eq
 800dcea:	68f5      	ldreq	r5, [r6, #12]
 800dcec:	e7da      	b.n	800dca4 <_vfiprintf_r+0x20>
 800dcee:	89ab      	ldrh	r3, [r5, #12]
 800dcf0:	0598      	lsls	r0, r3, #22
 800dcf2:	d4ed      	bmi.n	800dcd0 <_vfiprintf_r+0x4c>
 800dcf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcf6:	f7ff fe34 	bl	800d962 <__retarget_lock_release_recursive>
 800dcfa:	e7e9      	b.n	800dcd0 <_vfiprintf_r+0x4c>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800dd00:	2320      	movs	r3, #32
 800dd02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd06:	2330      	movs	r3, #48	; 0x30
 800dd08:	f04f 0901 	mov.w	r9, #1
 800dd0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ded0 <_vfiprintf_r+0x24c>
 800dd14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd18:	4623      	mov	r3, r4
 800dd1a:	469a      	mov	sl, r3
 800dd1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd20:	b10a      	cbz	r2, 800dd26 <_vfiprintf_r+0xa2>
 800dd22:	2a25      	cmp	r2, #37	; 0x25
 800dd24:	d1f9      	bne.n	800dd1a <_vfiprintf_r+0x96>
 800dd26:	ebba 0b04 	subs.w	fp, sl, r4
 800dd2a:	d00b      	beq.n	800dd44 <_vfiprintf_r+0xc0>
 800dd2c:	465b      	mov	r3, fp
 800dd2e:	4622      	mov	r2, r4
 800dd30:	4629      	mov	r1, r5
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7ff ff93 	bl	800dc5e <__sfputs_r>
 800dd38:	3001      	adds	r0, #1
 800dd3a:	f000 80aa 	beq.w	800de92 <_vfiprintf_r+0x20e>
 800dd3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd40:	445a      	add	r2, fp
 800dd42:	9209      	str	r2, [sp, #36]	; 0x24
 800dd44:	f89a 3000 	ldrb.w	r3, [sl]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 80a2 	beq.w	800de92 <_vfiprintf_r+0x20e>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd58:	f10a 0a01 	add.w	sl, sl, #1
 800dd5c:	9304      	str	r3, [sp, #16]
 800dd5e:	9307      	str	r3, [sp, #28]
 800dd60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd64:	931a      	str	r3, [sp, #104]	; 0x68
 800dd66:	4654      	mov	r4, sl
 800dd68:	2205      	movs	r2, #5
 800dd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd6e:	4858      	ldr	r0, [pc, #352]	; (800ded0 <_vfiprintf_r+0x24c>)
 800dd70:	f000 fcaa 	bl	800e6c8 <memchr>
 800dd74:	9a04      	ldr	r2, [sp, #16]
 800dd76:	b9d8      	cbnz	r0, 800ddb0 <_vfiprintf_r+0x12c>
 800dd78:	06d1      	lsls	r1, r2, #27
 800dd7a:	bf44      	itt	mi
 800dd7c:	2320      	movmi	r3, #32
 800dd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd82:	0713      	lsls	r3, r2, #28
 800dd84:	bf44      	itt	mi
 800dd86:	232b      	movmi	r3, #43	; 0x2b
 800dd88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd8c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd90:	2b2a      	cmp	r3, #42	; 0x2a
 800dd92:	d015      	beq.n	800ddc0 <_vfiprintf_r+0x13c>
 800dd94:	4654      	mov	r4, sl
 800dd96:	2000      	movs	r0, #0
 800dd98:	f04f 0c0a 	mov.w	ip, #10
 800dd9c:	9a07      	ldr	r2, [sp, #28]
 800dd9e:	4621      	mov	r1, r4
 800dda0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dda4:	3b30      	subs	r3, #48	; 0x30
 800dda6:	2b09      	cmp	r3, #9
 800dda8:	d94e      	bls.n	800de48 <_vfiprintf_r+0x1c4>
 800ddaa:	b1b0      	cbz	r0, 800ddda <_vfiprintf_r+0x156>
 800ddac:	9207      	str	r2, [sp, #28]
 800ddae:	e014      	b.n	800ddda <_vfiprintf_r+0x156>
 800ddb0:	eba0 0308 	sub.w	r3, r0, r8
 800ddb4:	fa09 f303 	lsl.w	r3, r9, r3
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	46a2      	mov	sl, r4
 800ddbc:	9304      	str	r3, [sp, #16]
 800ddbe:	e7d2      	b.n	800dd66 <_vfiprintf_r+0xe2>
 800ddc0:	9b03      	ldr	r3, [sp, #12]
 800ddc2:	1d19      	adds	r1, r3, #4
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	9103      	str	r1, [sp, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	bfbb      	ittet	lt
 800ddcc:	425b      	neglt	r3, r3
 800ddce:	f042 0202 	orrlt.w	r2, r2, #2
 800ddd2:	9307      	strge	r3, [sp, #28]
 800ddd4:	9307      	strlt	r3, [sp, #28]
 800ddd6:	bfb8      	it	lt
 800ddd8:	9204      	strlt	r2, [sp, #16]
 800ddda:	7823      	ldrb	r3, [r4, #0]
 800dddc:	2b2e      	cmp	r3, #46	; 0x2e
 800ddde:	d10c      	bne.n	800ddfa <_vfiprintf_r+0x176>
 800dde0:	7863      	ldrb	r3, [r4, #1]
 800dde2:	2b2a      	cmp	r3, #42	; 0x2a
 800dde4:	d135      	bne.n	800de52 <_vfiprintf_r+0x1ce>
 800dde6:	9b03      	ldr	r3, [sp, #12]
 800dde8:	3402      	adds	r4, #2
 800ddea:	1d1a      	adds	r2, r3, #4
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	9203      	str	r2, [sp, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bfb8      	it	lt
 800ddf4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ddf8:	9305      	str	r3, [sp, #20]
 800ddfa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ded4 <_vfiprintf_r+0x250>
 800ddfe:	2203      	movs	r2, #3
 800de00:	4650      	mov	r0, sl
 800de02:	7821      	ldrb	r1, [r4, #0]
 800de04:	f000 fc60 	bl	800e6c8 <memchr>
 800de08:	b140      	cbz	r0, 800de1c <_vfiprintf_r+0x198>
 800de0a:	2340      	movs	r3, #64	; 0x40
 800de0c:	eba0 000a 	sub.w	r0, r0, sl
 800de10:	fa03 f000 	lsl.w	r0, r3, r0
 800de14:	9b04      	ldr	r3, [sp, #16]
 800de16:	3401      	adds	r4, #1
 800de18:	4303      	orrs	r3, r0
 800de1a:	9304      	str	r3, [sp, #16]
 800de1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de20:	2206      	movs	r2, #6
 800de22:	482d      	ldr	r0, [pc, #180]	; (800ded8 <_vfiprintf_r+0x254>)
 800de24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de28:	f000 fc4e 	bl	800e6c8 <memchr>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	d03f      	beq.n	800deb0 <_vfiprintf_r+0x22c>
 800de30:	4b2a      	ldr	r3, [pc, #168]	; (800dedc <_vfiprintf_r+0x258>)
 800de32:	bb1b      	cbnz	r3, 800de7c <_vfiprintf_r+0x1f8>
 800de34:	9b03      	ldr	r3, [sp, #12]
 800de36:	3307      	adds	r3, #7
 800de38:	f023 0307 	bic.w	r3, r3, #7
 800de3c:	3308      	adds	r3, #8
 800de3e:	9303      	str	r3, [sp, #12]
 800de40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de42:	443b      	add	r3, r7
 800de44:	9309      	str	r3, [sp, #36]	; 0x24
 800de46:	e767      	b.n	800dd18 <_vfiprintf_r+0x94>
 800de48:	460c      	mov	r4, r1
 800de4a:	2001      	movs	r0, #1
 800de4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800de50:	e7a5      	b.n	800dd9e <_vfiprintf_r+0x11a>
 800de52:	2300      	movs	r3, #0
 800de54:	f04f 0c0a 	mov.w	ip, #10
 800de58:	4619      	mov	r1, r3
 800de5a:	3401      	adds	r4, #1
 800de5c:	9305      	str	r3, [sp, #20]
 800de5e:	4620      	mov	r0, r4
 800de60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de64:	3a30      	subs	r2, #48	; 0x30
 800de66:	2a09      	cmp	r2, #9
 800de68:	d903      	bls.n	800de72 <_vfiprintf_r+0x1ee>
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d0c5      	beq.n	800ddfa <_vfiprintf_r+0x176>
 800de6e:	9105      	str	r1, [sp, #20]
 800de70:	e7c3      	b.n	800ddfa <_vfiprintf_r+0x176>
 800de72:	4604      	mov	r4, r0
 800de74:	2301      	movs	r3, #1
 800de76:	fb0c 2101 	mla	r1, ip, r1, r2
 800de7a:	e7f0      	b.n	800de5e <_vfiprintf_r+0x1da>
 800de7c:	ab03      	add	r3, sp, #12
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	462a      	mov	r2, r5
 800de82:	4630      	mov	r0, r6
 800de84:	4b16      	ldr	r3, [pc, #88]	; (800dee0 <_vfiprintf_r+0x25c>)
 800de86:	a904      	add	r1, sp, #16
 800de88:	f3af 8000 	nop.w
 800de8c:	4607      	mov	r7, r0
 800de8e:	1c78      	adds	r0, r7, #1
 800de90:	d1d6      	bne.n	800de40 <_vfiprintf_r+0x1bc>
 800de92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de94:	07d9      	lsls	r1, r3, #31
 800de96:	d405      	bmi.n	800dea4 <_vfiprintf_r+0x220>
 800de98:	89ab      	ldrh	r3, [r5, #12]
 800de9a:	059a      	lsls	r2, r3, #22
 800de9c:	d402      	bmi.n	800dea4 <_vfiprintf_r+0x220>
 800de9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dea0:	f7ff fd5f 	bl	800d962 <__retarget_lock_release_recursive>
 800dea4:	89ab      	ldrh	r3, [r5, #12]
 800dea6:	065b      	lsls	r3, r3, #25
 800dea8:	f53f af12 	bmi.w	800dcd0 <_vfiprintf_r+0x4c>
 800deac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deae:	e711      	b.n	800dcd4 <_vfiprintf_r+0x50>
 800deb0:	ab03      	add	r3, sp, #12
 800deb2:	9300      	str	r3, [sp, #0]
 800deb4:	462a      	mov	r2, r5
 800deb6:	4630      	mov	r0, r6
 800deb8:	4b09      	ldr	r3, [pc, #36]	; (800dee0 <_vfiprintf_r+0x25c>)
 800deba:	a904      	add	r1, sp, #16
 800debc:	f000 f882 	bl	800dfc4 <_printf_i>
 800dec0:	e7e4      	b.n	800de8c <_vfiprintf_r+0x208>
 800dec2:	bf00      	nop
 800dec4:	08010674 	.word	0x08010674
 800dec8:	08010694 	.word	0x08010694
 800decc:	08010654 	.word	0x08010654
 800ded0:	080106b4 	.word	0x080106b4
 800ded4:	080106ba 	.word	0x080106ba
 800ded8:	080106be 	.word	0x080106be
 800dedc:	00000000 	.word	0x00000000
 800dee0:	0800dc5f 	.word	0x0800dc5f

0800dee4 <_printf_common>:
 800dee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee8:	4616      	mov	r6, r2
 800deea:	4699      	mov	r9, r3
 800deec:	688a      	ldr	r2, [r1, #8]
 800deee:	690b      	ldr	r3, [r1, #16]
 800def0:	4607      	mov	r7, r0
 800def2:	4293      	cmp	r3, r2
 800def4:	bfb8      	it	lt
 800def6:	4613      	movlt	r3, r2
 800def8:	6033      	str	r3, [r6, #0]
 800defa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800defe:	460c      	mov	r4, r1
 800df00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df04:	b10a      	cbz	r2, 800df0a <_printf_common+0x26>
 800df06:	3301      	adds	r3, #1
 800df08:	6033      	str	r3, [r6, #0]
 800df0a:	6823      	ldr	r3, [r4, #0]
 800df0c:	0699      	lsls	r1, r3, #26
 800df0e:	bf42      	ittt	mi
 800df10:	6833      	ldrmi	r3, [r6, #0]
 800df12:	3302      	addmi	r3, #2
 800df14:	6033      	strmi	r3, [r6, #0]
 800df16:	6825      	ldr	r5, [r4, #0]
 800df18:	f015 0506 	ands.w	r5, r5, #6
 800df1c:	d106      	bne.n	800df2c <_printf_common+0x48>
 800df1e:	f104 0a19 	add.w	sl, r4, #25
 800df22:	68e3      	ldr	r3, [r4, #12]
 800df24:	6832      	ldr	r2, [r6, #0]
 800df26:	1a9b      	subs	r3, r3, r2
 800df28:	42ab      	cmp	r3, r5
 800df2a:	dc28      	bgt.n	800df7e <_printf_common+0x9a>
 800df2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df30:	1e13      	subs	r3, r2, #0
 800df32:	6822      	ldr	r2, [r4, #0]
 800df34:	bf18      	it	ne
 800df36:	2301      	movne	r3, #1
 800df38:	0692      	lsls	r2, r2, #26
 800df3a:	d42d      	bmi.n	800df98 <_printf_common+0xb4>
 800df3c:	4649      	mov	r1, r9
 800df3e:	4638      	mov	r0, r7
 800df40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df44:	47c0      	blx	r8
 800df46:	3001      	adds	r0, #1
 800df48:	d020      	beq.n	800df8c <_printf_common+0xa8>
 800df4a:	6823      	ldr	r3, [r4, #0]
 800df4c:	68e5      	ldr	r5, [r4, #12]
 800df4e:	f003 0306 	and.w	r3, r3, #6
 800df52:	2b04      	cmp	r3, #4
 800df54:	bf18      	it	ne
 800df56:	2500      	movne	r5, #0
 800df58:	6832      	ldr	r2, [r6, #0]
 800df5a:	f04f 0600 	mov.w	r6, #0
 800df5e:	68a3      	ldr	r3, [r4, #8]
 800df60:	bf08      	it	eq
 800df62:	1aad      	subeq	r5, r5, r2
 800df64:	6922      	ldr	r2, [r4, #16]
 800df66:	bf08      	it	eq
 800df68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df6c:	4293      	cmp	r3, r2
 800df6e:	bfc4      	itt	gt
 800df70:	1a9b      	subgt	r3, r3, r2
 800df72:	18ed      	addgt	r5, r5, r3
 800df74:	341a      	adds	r4, #26
 800df76:	42b5      	cmp	r5, r6
 800df78:	d11a      	bne.n	800dfb0 <_printf_common+0xcc>
 800df7a:	2000      	movs	r0, #0
 800df7c:	e008      	b.n	800df90 <_printf_common+0xac>
 800df7e:	2301      	movs	r3, #1
 800df80:	4652      	mov	r2, sl
 800df82:	4649      	mov	r1, r9
 800df84:	4638      	mov	r0, r7
 800df86:	47c0      	blx	r8
 800df88:	3001      	adds	r0, #1
 800df8a:	d103      	bne.n	800df94 <_printf_common+0xb0>
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df94:	3501      	adds	r5, #1
 800df96:	e7c4      	b.n	800df22 <_printf_common+0x3e>
 800df98:	2030      	movs	r0, #48	; 0x30
 800df9a:	18e1      	adds	r1, r4, r3
 800df9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dfa0:	1c5a      	adds	r2, r3, #1
 800dfa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dfa6:	4422      	add	r2, r4
 800dfa8:	3302      	adds	r3, #2
 800dfaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dfae:	e7c5      	b.n	800df3c <_printf_common+0x58>
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	4622      	mov	r2, r4
 800dfb4:	4649      	mov	r1, r9
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	47c0      	blx	r8
 800dfba:	3001      	adds	r0, #1
 800dfbc:	d0e6      	beq.n	800df8c <_printf_common+0xa8>
 800dfbe:	3601      	adds	r6, #1
 800dfc0:	e7d9      	b.n	800df76 <_printf_common+0x92>
	...

0800dfc4 <_printf_i>:
 800dfc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc8:	7e0f      	ldrb	r7, [r1, #24]
 800dfca:	4691      	mov	r9, r2
 800dfcc:	2f78      	cmp	r7, #120	; 0x78
 800dfce:	4680      	mov	r8, r0
 800dfd0:	460c      	mov	r4, r1
 800dfd2:	469a      	mov	sl, r3
 800dfd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dfd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dfda:	d807      	bhi.n	800dfec <_printf_i+0x28>
 800dfdc:	2f62      	cmp	r7, #98	; 0x62
 800dfde:	d80a      	bhi.n	800dff6 <_printf_i+0x32>
 800dfe0:	2f00      	cmp	r7, #0
 800dfe2:	f000 80d9 	beq.w	800e198 <_printf_i+0x1d4>
 800dfe6:	2f58      	cmp	r7, #88	; 0x58
 800dfe8:	f000 80a4 	beq.w	800e134 <_printf_i+0x170>
 800dfec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dff4:	e03a      	b.n	800e06c <_printf_i+0xa8>
 800dff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dffa:	2b15      	cmp	r3, #21
 800dffc:	d8f6      	bhi.n	800dfec <_printf_i+0x28>
 800dffe:	a101      	add	r1, pc, #4	; (adr r1, 800e004 <_printf_i+0x40>)
 800e000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e004:	0800e05d 	.word	0x0800e05d
 800e008:	0800e071 	.word	0x0800e071
 800e00c:	0800dfed 	.word	0x0800dfed
 800e010:	0800dfed 	.word	0x0800dfed
 800e014:	0800dfed 	.word	0x0800dfed
 800e018:	0800dfed 	.word	0x0800dfed
 800e01c:	0800e071 	.word	0x0800e071
 800e020:	0800dfed 	.word	0x0800dfed
 800e024:	0800dfed 	.word	0x0800dfed
 800e028:	0800dfed 	.word	0x0800dfed
 800e02c:	0800dfed 	.word	0x0800dfed
 800e030:	0800e17f 	.word	0x0800e17f
 800e034:	0800e0a1 	.word	0x0800e0a1
 800e038:	0800e161 	.word	0x0800e161
 800e03c:	0800dfed 	.word	0x0800dfed
 800e040:	0800dfed 	.word	0x0800dfed
 800e044:	0800e1a1 	.word	0x0800e1a1
 800e048:	0800dfed 	.word	0x0800dfed
 800e04c:	0800e0a1 	.word	0x0800e0a1
 800e050:	0800dfed 	.word	0x0800dfed
 800e054:	0800dfed 	.word	0x0800dfed
 800e058:	0800e169 	.word	0x0800e169
 800e05c:	682b      	ldr	r3, [r5, #0]
 800e05e:	1d1a      	adds	r2, r3, #4
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	602a      	str	r2, [r5, #0]
 800e064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e06c:	2301      	movs	r3, #1
 800e06e:	e0a4      	b.n	800e1ba <_printf_i+0x1f6>
 800e070:	6820      	ldr	r0, [r4, #0]
 800e072:	6829      	ldr	r1, [r5, #0]
 800e074:	0606      	lsls	r6, r0, #24
 800e076:	f101 0304 	add.w	r3, r1, #4
 800e07a:	d50a      	bpl.n	800e092 <_printf_i+0xce>
 800e07c:	680e      	ldr	r6, [r1, #0]
 800e07e:	602b      	str	r3, [r5, #0]
 800e080:	2e00      	cmp	r6, #0
 800e082:	da03      	bge.n	800e08c <_printf_i+0xc8>
 800e084:	232d      	movs	r3, #45	; 0x2d
 800e086:	4276      	negs	r6, r6
 800e088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e08c:	230a      	movs	r3, #10
 800e08e:	485e      	ldr	r0, [pc, #376]	; (800e208 <_printf_i+0x244>)
 800e090:	e019      	b.n	800e0c6 <_printf_i+0x102>
 800e092:	680e      	ldr	r6, [r1, #0]
 800e094:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e098:	602b      	str	r3, [r5, #0]
 800e09a:	bf18      	it	ne
 800e09c:	b236      	sxthne	r6, r6
 800e09e:	e7ef      	b.n	800e080 <_printf_i+0xbc>
 800e0a0:	682b      	ldr	r3, [r5, #0]
 800e0a2:	6820      	ldr	r0, [r4, #0]
 800e0a4:	1d19      	adds	r1, r3, #4
 800e0a6:	6029      	str	r1, [r5, #0]
 800e0a8:	0601      	lsls	r1, r0, #24
 800e0aa:	d501      	bpl.n	800e0b0 <_printf_i+0xec>
 800e0ac:	681e      	ldr	r6, [r3, #0]
 800e0ae:	e002      	b.n	800e0b6 <_printf_i+0xf2>
 800e0b0:	0646      	lsls	r6, r0, #25
 800e0b2:	d5fb      	bpl.n	800e0ac <_printf_i+0xe8>
 800e0b4:	881e      	ldrh	r6, [r3, #0]
 800e0b6:	2f6f      	cmp	r7, #111	; 0x6f
 800e0b8:	bf0c      	ite	eq
 800e0ba:	2308      	moveq	r3, #8
 800e0bc:	230a      	movne	r3, #10
 800e0be:	4852      	ldr	r0, [pc, #328]	; (800e208 <_printf_i+0x244>)
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e0c6:	6865      	ldr	r5, [r4, #4]
 800e0c8:	2d00      	cmp	r5, #0
 800e0ca:	bfa8      	it	ge
 800e0cc:	6821      	ldrge	r1, [r4, #0]
 800e0ce:	60a5      	str	r5, [r4, #8]
 800e0d0:	bfa4      	itt	ge
 800e0d2:	f021 0104 	bicge.w	r1, r1, #4
 800e0d6:	6021      	strge	r1, [r4, #0]
 800e0d8:	b90e      	cbnz	r6, 800e0de <_printf_i+0x11a>
 800e0da:	2d00      	cmp	r5, #0
 800e0dc:	d04d      	beq.n	800e17a <_printf_i+0x1b6>
 800e0de:	4615      	mov	r5, r2
 800e0e0:	fbb6 f1f3 	udiv	r1, r6, r3
 800e0e4:	fb03 6711 	mls	r7, r3, r1, r6
 800e0e8:	5dc7      	ldrb	r7, [r0, r7]
 800e0ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e0ee:	4637      	mov	r7, r6
 800e0f0:	42bb      	cmp	r3, r7
 800e0f2:	460e      	mov	r6, r1
 800e0f4:	d9f4      	bls.n	800e0e0 <_printf_i+0x11c>
 800e0f6:	2b08      	cmp	r3, #8
 800e0f8:	d10b      	bne.n	800e112 <_printf_i+0x14e>
 800e0fa:	6823      	ldr	r3, [r4, #0]
 800e0fc:	07de      	lsls	r6, r3, #31
 800e0fe:	d508      	bpl.n	800e112 <_printf_i+0x14e>
 800e100:	6923      	ldr	r3, [r4, #16]
 800e102:	6861      	ldr	r1, [r4, #4]
 800e104:	4299      	cmp	r1, r3
 800e106:	bfde      	ittt	le
 800e108:	2330      	movle	r3, #48	; 0x30
 800e10a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e10e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e112:	1b52      	subs	r2, r2, r5
 800e114:	6122      	str	r2, [r4, #16]
 800e116:	464b      	mov	r3, r9
 800e118:	4621      	mov	r1, r4
 800e11a:	4640      	mov	r0, r8
 800e11c:	f8cd a000 	str.w	sl, [sp]
 800e120:	aa03      	add	r2, sp, #12
 800e122:	f7ff fedf 	bl	800dee4 <_printf_common>
 800e126:	3001      	adds	r0, #1
 800e128:	d14c      	bne.n	800e1c4 <_printf_i+0x200>
 800e12a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e12e:	b004      	add	sp, #16
 800e130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e134:	4834      	ldr	r0, [pc, #208]	; (800e208 <_printf_i+0x244>)
 800e136:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e13a:	6829      	ldr	r1, [r5, #0]
 800e13c:	6823      	ldr	r3, [r4, #0]
 800e13e:	f851 6b04 	ldr.w	r6, [r1], #4
 800e142:	6029      	str	r1, [r5, #0]
 800e144:	061d      	lsls	r5, r3, #24
 800e146:	d514      	bpl.n	800e172 <_printf_i+0x1ae>
 800e148:	07df      	lsls	r7, r3, #31
 800e14a:	bf44      	itt	mi
 800e14c:	f043 0320 	orrmi.w	r3, r3, #32
 800e150:	6023      	strmi	r3, [r4, #0]
 800e152:	b91e      	cbnz	r6, 800e15c <_printf_i+0x198>
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	f023 0320 	bic.w	r3, r3, #32
 800e15a:	6023      	str	r3, [r4, #0]
 800e15c:	2310      	movs	r3, #16
 800e15e:	e7af      	b.n	800e0c0 <_printf_i+0xfc>
 800e160:	6823      	ldr	r3, [r4, #0]
 800e162:	f043 0320 	orr.w	r3, r3, #32
 800e166:	6023      	str	r3, [r4, #0]
 800e168:	2378      	movs	r3, #120	; 0x78
 800e16a:	4828      	ldr	r0, [pc, #160]	; (800e20c <_printf_i+0x248>)
 800e16c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e170:	e7e3      	b.n	800e13a <_printf_i+0x176>
 800e172:	0659      	lsls	r1, r3, #25
 800e174:	bf48      	it	mi
 800e176:	b2b6      	uxthmi	r6, r6
 800e178:	e7e6      	b.n	800e148 <_printf_i+0x184>
 800e17a:	4615      	mov	r5, r2
 800e17c:	e7bb      	b.n	800e0f6 <_printf_i+0x132>
 800e17e:	682b      	ldr	r3, [r5, #0]
 800e180:	6826      	ldr	r6, [r4, #0]
 800e182:	1d18      	adds	r0, r3, #4
 800e184:	6961      	ldr	r1, [r4, #20]
 800e186:	6028      	str	r0, [r5, #0]
 800e188:	0635      	lsls	r5, r6, #24
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	d501      	bpl.n	800e192 <_printf_i+0x1ce>
 800e18e:	6019      	str	r1, [r3, #0]
 800e190:	e002      	b.n	800e198 <_printf_i+0x1d4>
 800e192:	0670      	lsls	r0, r6, #25
 800e194:	d5fb      	bpl.n	800e18e <_printf_i+0x1ca>
 800e196:	8019      	strh	r1, [r3, #0]
 800e198:	2300      	movs	r3, #0
 800e19a:	4615      	mov	r5, r2
 800e19c:	6123      	str	r3, [r4, #16]
 800e19e:	e7ba      	b.n	800e116 <_printf_i+0x152>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	1d1a      	adds	r2, r3, #4
 800e1a6:	602a      	str	r2, [r5, #0]
 800e1a8:	681d      	ldr	r5, [r3, #0]
 800e1aa:	6862      	ldr	r2, [r4, #4]
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	f000 fa8b 	bl	800e6c8 <memchr>
 800e1b2:	b108      	cbz	r0, 800e1b8 <_printf_i+0x1f4>
 800e1b4:	1b40      	subs	r0, r0, r5
 800e1b6:	6060      	str	r0, [r4, #4]
 800e1b8:	6863      	ldr	r3, [r4, #4]
 800e1ba:	6123      	str	r3, [r4, #16]
 800e1bc:	2300      	movs	r3, #0
 800e1be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1c2:	e7a8      	b.n	800e116 <_printf_i+0x152>
 800e1c4:	462a      	mov	r2, r5
 800e1c6:	4649      	mov	r1, r9
 800e1c8:	4640      	mov	r0, r8
 800e1ca:	6923      	ldr	r3, [r4, #16]
 800e1cc:	47d0      	blx	sl
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	d0ab      	beq.n	800e12a <_printf_i+0x166>
 800e1d2:	6823      	ldr	r3, [r4, #0]
 800e1d4:	079b      	lsls	r3, r3, #30
 800e1d6:	d413      	bmi.n	800e200 <_printf_i+0x23c>
 800e1d8:	68e0      	ldr	r0, [r4, #12]
 800e1da:	9b03      	ldr	r3, [sp, #12]
 800e1dc:	4298      	cmp	r0, r3
 800e1de:	bfb8      	it	lt
 800e1e0:	4618      	movlt	r0, r3
 800e1e2:	e7a4      	b.n	800e12e <_printf_i+0x16a>
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	4632      	mov	r2, r6
 800e1e8:	4649      	mov	r1, r9
 800e1ea:	4640      	mov	r0, r8
 800e1ec:	47d0      	blx	sl
 800e1ee:	3001      	adds	r0, #1
 800e1f0:	d09b      	beq.n	800e12a <_printf_i+0x166>
 800e1f2:	3501      	adds	r5, #1
 800e1f4:	68e3      	ldr	r3, [r4, #12]
 800e1f6:	9903      	ldr	r1, [sp, #12]
 800e1f8:	1a5b      	subs	r3, r3, r1
 800e1fa:	42ab      	cmp	r3, r5
 800e1fc:	dcf2      	bgt.n	800e1e4 <_printf_i+0x220>
 800e1fe:	e7eb      	b.n	800e1d8 <_printf_i+0x214>
 800e200:	2500      	movs	r5, #0
 800e202:	f104 0619 	add.w	r6, r4, #25
 800e206:	e7f5      	b.n	800e1f4 <_printf_i+0x230>
 800e208:	080106c5 	.word	0x080106c5
 800e20c:	080106d6 	.word	0x080106d6

0800e210 <__sread>:
 800e210:	b510      	push	{r4, lr}
 800e212:	460c      	mov	r4, r1
 800e214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e218:	f000 faae 	bl	800e778 <_read_r>
 800e21c:	2800      	cmp	r0, #0
 800e21e:	bfab      	itete	ge
 800e220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e222:	89a3      	ldrhlt	r3, [r4, #12]
 800e224:	181b      	addge	r3, r3, r0
 800e226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e22a:	bfac      	ite	ge
 800e22c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e22e:	81a3      	strhlt	r3, [r4, #12]
 800e230:	bd10      	pop	{r4, pc}

0800e232 <__swrite>:
 800e232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e236:	461f      	mov	r7, r3
 800e238:	898b      	ldrh	r3, [r1, #12]
 800e23a:	4605      	mov	r5, r0
 800e23c:	05db      	lsls	r3, r3, #23
 800e23e:	460c      	mov	r4, r1
 800e240:	4616      	mov	r6, r2
 800e242:	d505      	bpl.n	800e250 <__swrite+0x1e>
 800e244:	2302      	movs	r3, #2
 800e246:	2200      	movs	r2, #0
 800e248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e24c:	f000 f9c4 	bl	800e5d8 <_lseek_r>
 800e250:	89a3      	ldrh	r3, [r4, #12]
 800e252:	4632      	mov	r2, r6
 800e254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e258:	81a3      	strh	r3, [r4, #12]
 800e25a:	4628      	mov	r0, r5
 800e25c:	463b      	mov	r3, r7
 800e25e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e266:	f000 b869 	b.w	800e33c <_write_r>

0800e26a <__sseek>:
 800e26a:	b510      	push	{r4, lr}
 800e26c:	460c      	mov	r4, r1
 800e26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e272:	f000 f9b1 	bl	800e5d8 <_lseek_r>
 800e276:	1c43      	adds	r3, r0, #1
 800e278:	89a3      	ldrh	r3, [r4, #12]
 800e27a:	bf15      	itete	ne
 800e27c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e27e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e286:	81a3      	strheq	r3, [r4, #12]
 800e288:	bf18      	it	ne
 800e28a:	81a3      	strhne	r3, [r4, #12]
 800e28c:	bd10      	pop	{r4, pc}

0800e28e <__sclose>:
 800e28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e292:	f000 b8d3 	b.w	800e43c <_close_r>
	...

0800e298 <__swbuf_r>:
 800e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29a:	460e      	mov	r6, r1
 800e29c:	4614      	mov	r4, r2
 800e29e:	4605      	mov	r5, r0
 800e2a0:	b118      	cbz	r0, 800e2aa <__swbuf_r+0x12>
 800e2a2:	6983      	ldr	r3, [r0, #24]
 800e2a4:	b90b      	cbnz	r3, 800e2aa <__swbuf_r+0x12>
 800e2a6:	f7ff fabd 	bl	800d824 <__sinit>
 800e2aa:	4b21      	ldr	r3, [pc, #132]	; (800e330 <__swbuf_r+0x98>)
 800e2ac:	429c      	cmp	r4, r3
 800e2ae:	d12b      	bne.n	800e308 <__swbuf_r+0x70>
 800e2b0:	686c      	ldr	r4, [r5, #4]
 800e2b2:	69a3      	ldr	r3, [r4, #24]
 800e2b4:	60a3      	str	r3, [r4, #8]
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	071a      	lsls	r2, r3, #28
 800e2ba:	d52f      	bpl.n	800e31c <__swbuf_r+0x84>
 800e2bc:	6923      	ldr	r3, [r4, #16]
 800e2be:	b36b      	cbz	r3, 800e31c <__swbuf_r+0x84>
 800e2c0:	6923      	ldr	r3, [r4, #16]
 800e2c2:	6820      	ldr	r0, [r4, #0]
 800e2c4:	b2f6      	uxtb	r6, r6
 800e2c6:	1ac0      	subs	r0, r0, r3
 800e2c8:	6963      	ldr	r3, [r4, #20]
 800e2ca:	4637      	mov	r7, r6
 800e2cc:	4283      	cmp	r3, r0
 800e2ce:	dc04      	bgt.n	800e2da <__swbuf_r+0x42>
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f000 f944 	bl	800e560 <_fflush_r>
 800e2d8:	bb30      	cbnz	r0, 800e328 <__swbuf_r+0x90>
 800e2da:	68a3      	ldr	r3, [r4, #8]
 800e2dc:	3001      	adds	r0, #1
 800e2de:	3b01      	subs	r3, #1
 800e2e0:	60a3      	str	r3, [r4, #8]
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	1c5a      	adds	r2, r3, #1
 800e2e6:	6022      	str	r2, [r4, #0]
 800e2e8:	701e      	strb	r6, [r3, #0]
 800e2ea:	6963      	ldr	r3, [r4, #20]
 800e2ec:	4283      	cmp	r3, r0
 800e2ee:	d004      	beq.n	800e2fa <__swbuf_r+0x62>
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	07db      	lsls	r3, r3, #31
 800e2f4:	d506      	bpl.n	800e304 <__swbuf_r+0x6c>
 800e2f6:	2e0a      	cmp	r6, #10
 800e2f8:	d104      	bne.n	800e304 <__swbuf_r+0x6c>
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	f000 f92f 	bl	800e560 <_fflush_r>
 800e302:	b988      	cbnz	r0, 800e328 <__swbuf_r+0x90>
 800e304:	4638      	mov	r0, r7
 800e306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e308:	4b0a      	ldr	r3, [pc, #40]	; (800e334 <__swbuf_r+0x9c>)
 800e30a:	429c      	cmp	r4, r3
 800e30c:	d101      	bne.n	800e312 <__swbuf_r+0x7a>
 800e30e:	68ac      	ldr	r4, [r5, #8]
 800e310:	e7cf      	b.n	800e2b2 <__swbuf_r+0x1a>
 800e312:	4b09      	ldr	r3, [pc, #36]	; (800e338 <__swbuf_r+0xa0>)
 800e314:	429c      	cmp	r4, r3
 800e316:	bf08      	it	eq
 800e318:	68ec      	ldreq	r4, [r5, #12]
 800e31a:	e7ca      	b.n	800e2b2 <__swbuf_r+0x1a>
 800e31c:	4621      	mov	r1, r4
 800e31e:	4628      	mov	r0, r5
 800e320:	f000 f81e 	bl	800e360 <__swsetup_r>
 800e324:	2800      	cmp	r0, #0
 800e326:	d0cb      	beq.n	800e2c0 <__swbuf_r+0x28>
 800e328:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e32c:	e7ea      	b.n	800e304 <__swbuf_r+0x6c>
 800e32e:	bf00      	nop
 800e330:	08010674 	.word	0x08010674
 800e334:	08010694 	.word	0x08010694
 800e338:	08010654 	.word	0x08010654

0800e33c <_write_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	4604      	mov	r4, r0
 800e340:	4608      	mov	r0, r1
 800e342:	4611      	mov	r1, r2
 800e344:	2200      	movs	r2, #0
 800e346:	4d05      	ldr	r5, [pc, #20]	; (800e35c <_write_r+0x20>)
 800e348:	602a      	str	r2, [r5, #0]
 800e34a:	461a      	mov	r2, r3
 800e34c:	f7f2 fb73 	bl	8000a36 <_write>
 800e350:	1c43      	adds	r3, r0, #1
 800e352:	d102      	bne.n	800e35a <_write_r+0x1e>
 800e354:	682b      	ldr	r3, [r5, #0]
 800e356:	b103      	cbz	r3, 800e35a <_write_r+0x1e>
 800e358:	6023      	str	r3, [r4, #0]
 800e35a:	bd38      	pop	{r3, r4, r5, pc}
 800e35c:	2000a2a8 	.word	0x2000a2a8

0800e360 <__swsetup_r>:
 800e360:	4b32      	ldr	r3, [pc, #200]	; (800e42c <__swsetup_r+0xcc>)
 800e362:	b570      	push	{r4, r5, r6, lr}
 800e364:	681d      	ldr	r5, [r3, #0]
 800e366:	4606      	mov	r6, r0
 800e368:	460c      	mov	r4, r1
 800e36a:	b125      	cbz	r5, 800e376 <__swsetup_r+0x16>
 800e36c:	69ab      	ldr	r3, [r5, #24]
 800e36e:	b913      	cbnz	r3, 800e376 <__swsetup_r+0x16>
 800e370:	4628      	mov	r0, r5
 800e372:	f7ff fa57 	bl	800d824 <__sinit>
 800e376:	4b2e      	ldr	r3, [pc, #184]	; (800e430 <__swsetup_r+0xd0>)
 800e378:	429c      	cmp	r4, r3
 800e37a:	d10f      	bne.n	800e39c <__swsetup_r+0x3c>
 800e37c:	686c      	ldr	r4, [r5, #4]
 800e37e:	89a3      	ldrh	r3, [r4, #12]
 800e380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e384:	0719      	lsls	r1, r3, #28
 800e386:	d42c      	bmi.n	800e3e2 <__swsetup_r+0x82>
 800e388:	06dd      	lsls	r5, r3, #27
 800e38a:	d411      	bmi.n	800e3b0 <__swsetup_r+0x50>
 800e38c:	2309      	movs	r3, #9
 800e38e:	6033      	str	r3, [r6, #0]
 800e390:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e398:	81a3      	strh	r3, [r4, #12]
 800e39a:	e03e      	b.n	800e41a <__swsetup_r+0xba>
 800e39c:	4b25      	ldr	r3, [pc, #148]	; (800e434 <__swsetup_r+0xd4>)
 800e39e:	429c      	cmp	r4, r3
 800e3a0:	d101      	bne.n	800e3a6 <__swsetup_r+0x46>
 800e3a2:	68ac      	ldr	r4, [r5, #8]
 800e3a4:	e7eb      	b.n	800e37e <__swsetup_r+0x1e>
 800e3a6:	4b24      	ldr	r3, [pc, #144]	; (800e438 <__swsetup_r+0xd8>)
 800e3a8:	429c      	cmp	r4, r3
 800e3aa:	bf08      	it	eq
 800e3ac:	68ec      	ldreq	r4, [r5, #12]
 800e3ae:	e7e6      	b.n	800e37e <__swsetup_r+0x1e>
 800e3b0:	0758      	lsls	r0, r3, #29
 800e3b2:	d512      	bpl.n	800e3da <__swsetup_r+0x7a>
 800e3b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3b6:	b141      	cbz	r1, 800e3ca <__swsetup_r+0x6a>
 800e3b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3bc:	4299      	cmp	r1, r3
 800e3be:	d002      	beq.n	800e3c6 <__swsetup_r+0x66>
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f7ff f8b3 	bl	800d52c <_free_r>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	6363      	str	r3, [r4, #52]	; 0x34
 800e3ca:	89a3      	ldrh	r3, [r4, #12]
 800e3cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3d0:	81a3      	strh	r3, [r4, #12]
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	6063      	str	r3, [r4, #4]
 800e3d6:	6923      	ldr	r3, [r4, #16]
 800e3d8:	6023      	str	r3, [r4, #0]
 800e3da:	89a3      	ldrh	r3, [r4, #12]
 800e3dc:	f043 0308 	orr.w	r3, r3, #8
 800e3e0:	81a3      	strh	r3, [r4, #12]
 800e3e2:	6923      	ldr	r3, [r4, #16]
 800e3e4:	b94b      	cbnz	r3, 800e3fa <__swsetup_r+0x9a>
 800e3e6:	89a3      	ldrh	r3, [r4, #12]
 800e3e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3f0:	d003      	beq.n	800e3fa <__swsetup_r+0x9a>
 800e3f2:	4621      	mov	r1, r4
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	f000 f927 	bl	800e648 <__smakebuf_r>
 800e3fa:	89a0      	ldrh	r0, [r4, #12]
 800e3fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e400:	f010 0301 	ands.w	r3, r0, #1
 800e404:	d00a      	beq.n	800e41c <__swsetup_r+0xbc>
 800e406:	2300      	movs	r3, #0
 800e408:	60a3      	str	r3, [r4, #8]
 800e40a:	6963      	ldr	r3, [r4, #20]
 800e40c:	425b      	negs	r3, r3
 800e40e:	61a3      	str	r3, [r4, #24]
 800e410:	6923      	ldr	r3, [r4, #16]
 800e412:	b943      	cbnz	r3, 800e426 <__swsetup_r+0xc6>
 800e414:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e418:	d1ba      	bne.n	800e390 <__swsetup_r+0x30>
 800e41a:	bd70      	pop	{r4, r5, r6, pc}
 800e41c:	0781      	lsls	r1, r0, #30
 800e41e:	bf58      	it	pl
 800e420:	6963      	ldrpl	r3, [r4, #20]
 800e422:	60a3      	str	r3, [r4, #8]
 800e424:	e7f4      	b.n	800e410 <__swsetup_r+0xb0>
 800e426:	2000      	movs	r0, #0
 800e428:	e7f7      	b.n	800e41a <__swsetup_r+0xba>
 800e42a:	bf00      	nop
 800e42c:	20000018 	.word	0x20000018
 800e430:	08010674 	.word	0x08010674
 800e434:	08010694 	.word	0x08010694
 800e438:	08010654 	.word	0x08010654

0800e43c <_close_r>:
 800e43c:	b538      	push	{r3, r4, r5, lr}
 800e43e:	2300      	movs	r3, #0
 800e440:	4d05      	ldr	r5, [pc, #20]	; (800e458 <_close_r+0x1c>)
 800e442:	4604      	mov	r4, r0
 800e444:	4608      	mov	r0, r1
 800e446:	602b      	str	r3, [r5, #0]
 800e448:	f7f2 fb11 	bl	8000a6e <_close>
 800e44c:	1c43      	adds	r3, r0, #1
 800e44e:	d102      	bne.n	800e456 <_close_r+0x1a>
 800e450:	682b      	ldr	r3, [r5, #0]
 800e452:	b103      	cbz	r3, 800e456 <_close_r+0x1a>
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	bd38      	pop	{r3, r4, r5, pc}
 800e458:	2000a2a8 	.word	0x2000a2a8

0800e45c <__sflush_r>:
 800e45c:	898a      	ldrh	r2, [r1, #12]
 800e45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e460:	4605      	mov	r5, r0
 800e462:	0710      	lsls	r0, r2, #28
 800e464:	460c      	mov	r4, r1
 800e466:	d457      	bmi.n	800e518 <__sflush_r+0xbc>
 800e468:	684b      	ldr	r3, [r1, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	dc04      	bgt.n	800e478 <__sflush_r+0x1c>
 800e46e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e470:	2b00      	cmp	r3, #0
 800e472:	dc01      	bgt.n	800e478 <__sflush_r+0x1c>
 800e474:	2000      	movs	r0, #0
 800e476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e47a:	2e00      	cmp	r6, #0
 800e47c:	d0fa      	beq.n	800e474 <__sflush_r+0x18>
 800e47e:	2300      	movs	r3, #0
 800e480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e484:	682f      	ldr	r7, [r5, #0]
 800e486:	602b      	str	r3, [r5, #0]
 800e488:	d032      	beq.n	800e4f0 <__sflush_r+0x94>
 800e48a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e48c:	89a3      	ldrh	r3, [r4, #12]
 800e48e:	075a      	lsls	r2, r3, #29
 800e490:	d505      	bpl.n	800e49e <__sflush_r+0x42>
 800e492:	6863      	ldr	r3, [r4, #4]
 800e494:	1ac0      	subs	r0, r0, r3
 800e496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e498:	b10b      	cbz	r3, 800e49e <__sflush_r+0x42>
 800e49a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e49c:	1ac0      	subs	r0, r0, r3
 800e49e:	2300      	movs	r3, #0
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	6a21      	ldr	r1, [r4, #32]
 800e4a8:	47b0      	blx	r6
 800e4aa:	1c43      	adds	r3, r0, #1
 800e4ac:	89a3      	ldrh	r3, [r4, #12]
 800e4ae:	d106      	bne.n	800e4be <__sflush_r+0x62>
 800e4b0:	6829      	ldr	r1, [r5, #0]
 800e4b2:	291d      	cmp	r1, #29
 800e4b4:	d82c      	bhi.n	800e510 <__sflush_r+0xb4>
 800e4b6:	4a29      	ldr	r2, [pc, #164]	; (800e55c <__sflush_r+0x100>)
 800e4b8:	40ca      	lsrs	r2, r1
 800e4ba:	07d6      	lsls	r6, r2, #31
 800e4bc:	d528      	bpl.n	800e510 <__sflush_r+0xb4>
 800e4be:	2200      	movs	r2, #0
 800e4c0:	6062      	str	r2, [r4, #4]
 800e4c2:	6922      	ldr	r2, [r4, #16]
 800e4c4:	04d9      	lsls	r1, r3, #19
 800e4c6:	6022      	str	r2, [r4, #0]
 800e4c8:	d504      	bpl.n	800e4d4 <__sflush_r+0x78>
 800e4ca:	1c42      	adds	r2, r0, #1
 800e4cc:	d101      	bne.n	800e4d2 <__sflush_r+0x76>
 800e4ce:	682b      	ldr	r3, [r5, #0]
 800e4d0:	b903      	cbnz	r3, 800e4d4 <__sflush_r+0x78>
 800e4d2:	6560      	str	r0, [r4, #84]	; 0x54
 800e4d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4d6:	602f      	str	r7, [r5, #0]
 800e4d8:	2900      	cmp	r1, #0
 800e4da:	d0cb      	beq.n	800e474 <__sflush_r+0x18>
 800e4dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4e0:	4299      	cmp	r1, r3
 800e4e2:	d002      	beq.n	800e4ea <__sflush_r+0x8e>
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	f7ff f821 	bl	800d52c <_free_r>
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	6360      	str	r0, [r4, #52]	; 0x34
 800e4ee:	e7c2      	b.n	800e476 <__sflush_r+0x1a>
 800e4f0:	6a21      	ldr	r1, [r4, #32]
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	47b0      	blx	r6
 800e4f8:	1c41      	adds	r1, r0, #1
 800e4fa:	d1c7      	bne.n	800e48c <__sflush_r+0x30>
 800e4fc:	682b      	ldr	r3, [r5, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d0c4      	beq.n	800e48c <__sflush_r+0x30>
 800e502:	2b1d      	cmp	r3, #29
 800e504:	d001      	beq.n	800e50a <__sflush_r+0xae>
 800e506:	2b16      	cmp	r3, #22
 800e508:	d101      	bne.n	800e50e <__sflush_r+0xb2>
 800e50a:	602f      	str	r7, [r5, #0]
 800e50c:	e7b2      	b.n	800e474 <__sflush_r+0x18>
 800e50e:	89a3      	ldrh	r3, [r4, #12]
 800e510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e514:	81a3      	strh	r3, [r4, #12]
 800e516:	e7ae      	b.n	800e476 <__sflush_r+0x1a>
 800e518:	690f      	ldr	r7, [r1, #16]
 800e51a:	2f00      	cmp	r7, #0
 800e51c:	d0aa      	beq.n	800e474 <__sflush_r+0x18>
 800e51e:	0793      	lsls	r3, r2, #30
 800e520:	bf18      	it	ne
 800e522:	2300      	movne	r3, #0
 800e524:	680e      	ldr	r6, [r1, #0]
 800e526:	bf08      	it	eq
 800e528:	694b      	ldreq	r3, [r1, #20]
 800e52a:	1bf6      	subs	r6, r6, r7
 800e52c:	600f      	str	r7, [r1, #0]
 800e52e:	608b      	str	r3, [r1, #8]
 800e530:	2e00      	cmp	r6, #0
 800e532:	dd9f      	ble.n	800e474 <__sflush_r+0x18>
 800e534:	4633      	mov	r3, r6
 800e536:	463a      	mov	r2, r7
 800e538:	4628      	mov	r0, r5
 800e53a:	6a21      	ldr	r1, [r4, #32]
 800e53c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e540:	47e0      	blx	ip
 800e542:	2800      	cmp	r0, #0
 800e544:	dc06      	bgt.n	800e554 <__sflush_r+0xf8>
 800e546:	89a3      	ldrh	r3, [r4, #12]
 800e548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e54c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e550:	81a3      	strh	r3, [r4, #12]
 800e552:	e790      	b.n	800e476 <__sflush_r+0x1a>
 800e554:	4407      	add	r7, r0
 800e556:	1a36      	subs	r6, r6, r0
 800e558:	e7ea      	b.n	800e530 <__sflush_r+0xd4>
 800e55a:	bf00      	nop
 800e55c:	20400001 	.word	0x20400001

0800e560 <_fflush_r>:
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	690b      	ldr	r3, [r1, #16]
 800e564:	4605      	mov	r5, r0
 800e566:	460c      	mov	r4, r1
 800e568:	b913      	cbnz	r3, 800e570 <_fflush_r+0x10>
 800e56a:	2500      	movs	r5, #0
 800e56c:	4628      	mov	r0, r5
 800e56e:	bd38      	pop	{r3, r4, r5, pc}
 800e570:	b118      	cbz	r0, 800e57a <_fflush_r+0x1a>
 800e572:	6983      	ldr	r3, [r0, #24]
 800e574:	b90b      	cbnz	r3, 800e57a <_fflush_r+0x1a>
 800e576:	f7ff f955 	bl	800d824 <__sinit>
 800e57a:	4b14      	ldr	r3, [pc, #80]	; (800e5cc <_fflush_r+0x6c>)
 800e57c:	429c      	cmp	r4, r3
 800e57e:	d11b      	bne.n	800e5b8 <_fflush_r+0x58>
 800e580:	686c      	ldr	r4, [r5, #4]
 800e582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d0ef      	beq.n	800e56a <_fflush_r+0xa>
 800e58a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e58c:	07d0      	lsls	r0, r2, #31
 800e58e:	d404      	bmi.n	800e59a <_fflush_r+0x3a>
 800e590:	0599      	lsls	r1, r3, #22
 800e592:	d402      	bmi.n	800e59a <_fflush_r+0x3a>
 800e594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e596:	f7ff f9e3 	bl	800d960 <__retarget_lock_acquire_recursive>
 800e59a:	4628      	mov	r0, r5
 800e59c:	4621      	mov	r1, r4
 800e59e:	f7ff ff5d 	bl	800e45c <__sflush_r>
 800e5a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5a4:	4605      	mov	r5, r0
 800e5a6:	07da      	lsls	r2, r3, #31
 800e5a8:	d4e0      	bmi.n	800e56c <_fflush_r+0xc>
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	059b      	lsls	r3, r3, #22
 800e5ae:	d4dd      	bmi.n	800e56c <_fflush_r+0xc>
 800e5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5b2:	f7ff f9d6 	bl	800d962 <__retarget_lock_release_recursive>
 800e5b6:	e7d9      	b.n	800e56c <_fflush_r+0xc>
 800e5b8:	4b05      	ldr	r3, [pc, #20]	; (800e5d0 <_fflush_r+0x70>)
 800e5ba:	429c      	cmp	r4, r3
 800e5bc:	d101      	bne.n	800e5c2 <_fflush_r+0x62>
 800e5be:	68ac      	ldr	r4, [r5, #8]
 800e5c0:	e7df      	b.n	800e582 <_fflush_r+0x22>
 800e5c2:	4b04      	ldr	r3, [pc, #16]	; (800e5d4 <_fflush_r+0x74>)
 800e5c4:	429c      	cmp	r4, r3
 800e5c6:	bf08      	it	eq
 800e5c8:	68ec      	ldreq	r4, [r5, #12]
 800e5ca:	e7da      	b.n	800e582 <_fflush_r+0x22>
 800e5cc:	08010674 	.word	0x08010674
 800e5d0:	08010694 	.word	0x08010694
 800e5d4:	08010654 	.word	0x08010654

0800e5d8 <_lseek_r>:
 800e5d8:	b538      	push	{r3, r4, r5, lr}
 800e5da:	4604      	mov	r4, r0
 800e5dc:	4608      	mov	r0, r1
 800e5de:	4611      	mov	r1, r2
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	4d05      	ldr	r5, [pc, #20]	; (800e5f8 <_lseek_r+0x20>)
 800e5e4:	602a      	str	r2, [r5, #0]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	f7f2 fa65 	bl	8000ab6 <_lseek>
 800e5ec:	1c43      	adds	r3, r0, #1
 800e5ee:	d102      	bne.n	800e5f6 <_lseek_r+0x1e>
 800e5f0:	682b      	ldr	r3, [r5, #0]
 800e5f2:	b103      	cbz	r3, 800e5f6 <_lseek_r+0x1e>
 800e5f4:	6023      	str	r3, [r4, #0]
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
 800e5f8:	2000a2a8 	.word	0x2000a2a8

0800e5fc <__swhatbuf_r>:
 800e5fc:	b570      	push	{r4, r5, r6, lr}
 800e5fe:	460e      	mov	r6, r1
 800e600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e604:	4614      	mov	r4, r2
 800e606:	2900      	cmp	r1, #0
 800e608:	461d      	mov	r5, r3
 800e60a:	b096      	sub	sp, #88	; 0x58
 800e60c:	da08      	bge.n	800e620 <__swhatbuf_r+0x24>
 800e60e:	2200      	movs	r2, #0
 800e610:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e614:	602a      	str	r2, [r5, #0]
 800e616:	061a      	lsls	r2, r3, #24
 800e618:	d410      	bmi.n	800e63c <__swhatbuf_r+0x40>
 800e61a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e61e:	e00e      	b.n	800e63e <__swhatbuf_r+0x42>
 800e620:	466a      	mov	r2, sp
 800e622:	f000 f8bb 	bl	800e79c <_fstat_r>
 800e626:	2800      	cmp	r0, #0
 800e628:	dbf1      	blt.n	800e60e <__swhatbuf_r+0x12>
 800e62a:	9a01      	ldr	r2, [sp, #4]
 800e62c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e630:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e634:	425a      	negs	r2, r3
 800e636:	415a      	adcs	r2, r3
 800e638:	602a      	str	r2, [r5, #0]
 800e63a:	e7ee      	b.n	800e61a <__swhatbuf_r+0x1e>
 800e63c:	2340      	movs	r3, #64	; 0x40
 800e63e:	2000      	movs	r0, #0
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	b016      	add	sp, #88	; 0x58
 800e644:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e648 <__smakebuf_r>:
 800e648:	898b      	ldrh	r3, [r1, #12]
 800e64a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e64c:	079d      	lsls	r5, r3, #30
 800e64e:	4606      	mov	r6, r0
 800e650:	460c      	mov	r4, r1
 800e652:	d507      	bpl.n	800e664 <__smakebuf_r+0x1c>
 800e654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e658:	6023      	str	r3, [r4, #0]
 800e65a:	6123      	str	r3, [r4, #16]
 800e65c:	2301      	movs	r3, #1
 800e65e:	6163      	str	r3, [r4, #20]
 800e660:	b002      	add	sp, #8
 800e662:	bd70      	pop	{r4, r5, r6, pc}
 800e664:	466a      	mov	r2, sp
 800e666:	ab01      	add	r3, sp, #4
 800e668:	f7ff ffc8 	bl	800e5fc <__swhatbuf_r>
 800e66c:	9900      	ldr	r1, [sp, #0]
 800e66e:	4605      	mov	r5, r0
 800e670:	4630      	mov	r0, r6
 800e672:	f7fe ffc3 	bl	800d5fc <_malloc_r>
 800e676:	b948      	cbnz	r0, 800e68c <__smakebuf_r+0x44>
 800e678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e67c:	059a      	lsls	r2, r3, #22
 800e67e:	d4ef      	bmi.n	800e660 <__smakebuf_r+0x18>
 800e680:	f023 0303 	bic.w	r3, r3, #3
 800e684:	f043 0302 	orr.w	r3, r3, #2
 800e688:	81a3      	strh	r3, [r4, #12]
 800e68a:	e7e3      	b.n	800e654 <__smakebuf_r+0xc>
 800e68c:	4b0d      	ldr	r3, [pc, #52]	; (800e6c4 <__smakebuf_r+0x7c>)
 800e68e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	6020      	str	r0, [r4, #0]
 800e694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e698:	81a3      	strh	r3, [r4, #12]
 800e69a:	9b00      	ldr	r3, [sp, #0]
 800e69c:	6120      	str	r0, [r4, #16]
 800e69e:	6163      	str	r3, [r4, #20]
 800e6a0:	9b01      	ldr	r3, [sp, #4]
 800e6a2:	b15b      	cbz	r3, 800e6bc <__smakebuf_r+0x74>
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6aa:	f000 f889 	bl	800e7c0 <_isatty_r>
 800e6ae:	b128      	cbz	r0, 800e6bc <__smakebuf_r+0x74>
 800e6b0:	89a3      	ldrh	r3, [r4, #12]
 800e6b2:	f023 0303 	bic.w	r3, r3, #3
 800e6b6:	f043 0301 	orr.w	r3, r3, #1
 800e6ba:	81a3      	strh	r3, [r4, #12]
 800e6bc:	89a0      	ldrh	r0, [r4, #12]
 800e6be:	4305      	orrs	r5, r0
 800e6c0:	81a5      	strh	r5, [r4, #12]
 800e6c2:	e7cd      	b.n	800e660 <__smakebuf_r+0x18>
 800e6c4:	0800d7bd 	.word	0x0800d7bd

0800e6c8 <memchr>:
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	b510      	push	{r4, lr}
 800e6cc:	b2c9      	uxtb	r1, r1
 800e6ce:	4402      	add	r2, r0
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	d101      	bne.n	800e6da <memchr+0x12>
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	e003      	b.n	800e6e2 <memchr+0x1a>
 800e6da:	7804      	ldrb	r4, [r0, #0]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	428c      	cmp	r4, r1
 800e6e0:	d1f6      	bne.n	800e6d0 <memchr+0x8>
 800e6e2:	bd10      	pop	{r4, pc}

0800e6e4 <memmove>:
 800e6e4:	4288      	cmp	r0, r1
 800e6e6:	b510      	push	{r4, lr}
 800e6e8:	eb01 0402 	add.w	r4, r1, r2
 800e6ec:	d902      	bls.n	800e6f4 <memmove+0x10>
 800e6ee:	4284      	cmp	r4, r0
 800e6f0:	4623      	mov	r3, r4
 800e6f2:	d807      	bhi.n	800e704 <memmove+0x20>
 800e6f4:	1e43      	subs	r3, r0, #1
 800e6f6:	42a1      	cmp	r1, r4
 800e6f8:	d008      	beq.n	800e70c <memmove+0x28>
 800e6fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e702:	e7f8      	b.n	800e6f6 <memmove+0x12>
 800e704:	4601      	mov	r1, r0
 800e706:	4402      	add	r2, r0
 800e708:	428a      	cmp	r2, r1
 800e70a:	d100      	bne.n	800e70e <memmove+0x2a>
 800e70c:	bd10      	pop	{r4, pc}
 800e70e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e716:	e7f7      	b.n	800e708 <memmove+0x24>

0800e718 <_realloc_r>:
 800e718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e71c:	4680      	mov	r8, r0
 800e71e:	4614      	mov	r4, r2
 800e720:	460e      	mov	r6, r1
 800e722:	b921      	cbnz	r1, 800e72e <_realloc_r+0x16>
 800e724:	4611      	mov	r1, r2
 800e726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e72a:	f7fe bf67 	b.w	800d5fc <_malloc_r>
 800e72e:	b92a      	cbnz	r2, 800e73c <_realloc_r+0x24>
 800e730:	f7fe fefc 	bl	800d52c <_free_r>
 800e734:	4625      	mov	r5, r4
 800e736:	4628      	mov	r0, r5
 800e738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e73c:	f000 f850 	bl	800e7e0 <_malloc_usable_size_r>
 800e740:	4284      	cmp	r4, r0
 800e742:	4607      	mov	r7, r0
 800e744:	d802      	bhi.n	800e74c <_realloc_r+0x34>
 800e746:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e74a:	d812      	bhi.n	800e772 <_realloc_r+0x5a>
 800e74c:	4621      	mov	r1, r4
 800e74e:	4640      	mov	r0, r8
 800e750:	f7fe ff54 	bl	800d5fc <_malloc_r>
 800e754:	4605      	mov	r5, r0
 800e756:	2800      	cmp	r0, #0
 800e758:	d0ed      	beq.n	800e736 <_realloc_r+0x1e>
 800e75a:	42bc      	cmp	r4, r7
 800e75c:	4622      	mov	r2, r4
 800e75e:	4631      	mov	r1, r6
 800e760:	bf28      	it	cs
 800e762:	463a      	movcs	r2, r7
 800e764:	f7fe fecc 	bl	800d500 <memcpy>
 800e768:	4631      	mov	r1, r6
 800e76a:	4640      	mov	r0, r8
 800e76c:	f7fe fede 	bl	800d52c <_free_r>
 800e770:	e7e1      	b.n	800e736 <_realloc_r+0x1e>
 800e772:	4635      	mov	r5, r6
 800e774:	e7df      	b.n	800e736 <_realloc_r+0x1e>
	...

0800e778 <_read_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	4604      	mov	r4, r0
 800e77c:	4608      	mov	r0, r1
 800e77e:	4611      	mov	r1, r2
 800e780:	2200      	movs	r2, #0
 800e782:	4d05      	ldr	r5, [pc, #20]	; (800e798 <_read_r+0x20>)
 800e784:	602a      	str	r2, [r5, #0]
 800e786:	461a      	mov	r2, r3
 800e788:	f7f2 f938 	bl	80009fc <_read>
 800e78c:	1c43      	adds	r3, r0, #1
 800e78e:	d102      	bne.n	800e796 <_read_r+0x1e>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	b103      	cbz	r3, 800e796 <_read_r+0x1e>
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	bd38      	pop	{r3, r4, r5, pc}
 800e798:	2000a2a8 	.word	0x2000a2a8

0800e79c <_fstat_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	2300      	movs	r3, #0
 800e7a0:	4d06      	ldr	r5, [pc, #24]	; (800e7bc <_fstat_r+0x20>)
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	4608      	mov	r0, r1
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	602b      	str	r3, [r5, #0]
 800e7aa:	f7f2 f96b 	bl	8000a84 <_fstat>
 800e7ae:	1c43      	adds	r3, r0, #1
 800e7b0:	d102      	bne.n	800e7b8 <_fstat_r+0x1c>
 800e7b2:	682b      	ldr	r3, [r5, #0]
 800e7b4:	b103      	cbz	r3, 800e7b8 <_fstat_r+0x1c>
 800e7b6:	6023      	str	r3, [r4, #0]
 800e7b8:	bd38      	pop	{r3, r4, r5, pc}
 800e7ba:	bf00      	nop
 800e7bc:	2000a2a8 	.word	0x2000a2a8

0800e7c0 <_isatty_r>:
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	4d05      	ldr	r5, [pc, #20]	; (800e7dc <_isatty_r+0x1c>)
 800e7c6:	4604      	mov	r4, r0
 800e7c8:	4608      	mov	r0, r1
 800e7ca:	602b      	str	r3, [r5, #0]
 800e7cc:	f7f2 f969 	bl	8000aa2 <_isatty>
 800e7d0:	1c43      	adds	r3, r0, #1
 800e7d2:	d102      	bne.n	800e7da <_isatty_r+0x1a>
 800e7d4:	682b      	ldr	r3, [r5, #0]
 800e7d6:	b103      	cbz	r3, 800e7da <_isatty_r+0x1a>
 800e7d8:	6023      	str	r3, [r4, #0]
 800e7da:	bd38      	pop	{r3, r4, r5, pc}
 800e7dc:	2000a2a8 	.word	0x2000a2a8

0800e7e0 <_malloc_usable_size_r>:
 800e7e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7e4:	1f18      	subs	r0, r3, #4
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	bfbc      	itt	lt
 800e7ea:	580b      	ldrlt	r3, [r1, r0]
 800e7ec:	18c0      	addlt	r0, r0, r3
 800e7ee:	4770      	bx	lr

0800e7f0 <_init>:
 800e7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7f2:	bf00      	nop
 800e7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7f6:	bc08      	pop	{r3}
 800e7f8:	469e      	mov	lr, r3
 800e7fa:	4770      	bx	lr

0800e7fc <_fini>:
 800e7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fe:	bf00      	nop
 800e800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e802:	bc08      	pop	{r3}
 800e804:	469e      	mov	lr, r3
 800e806:	4770      	bx	lr
